
minPrj.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a5e8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000360  0800a778  0800a778  0001a778  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800aad8  0800aad8  000200dc  2**0
                  CONTENTS
  4 .ARM          00000000  0800aad8  0800aad8  000200dc  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800aad8  0800aad8  000200dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800aad8  0800aad8  0001aad8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800aadc  0800aadc  0001aadc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000dc  20000000  0800aae0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000200dc  2**0
                  CONTENTS
 10 .bss          00000760  200000dc  200000dc  000200dc  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000083c  2000083c  000200dc  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000200dc  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001dcae  00000000  00000000  0002010c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000033a8  00000000  00000000  0003ddba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001830  00000000  00000000  00041168  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001750  00000000  00000000  00042998  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00020898  00000000  00000000  000440e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001ecfa  00000000  00000000  00064980  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cab05  00000000  00000000  0008367a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0014e17f  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006d5c  00000000  00000000  0014e1d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000dc 	.word	0x200000dc
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800a760 	.word	0x0800a760

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000e0 	.word	0x200000e0
 80001cc:	0800a760 	.word	0x0800a760

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__aeabi_d2iz>:
 8000a1c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a20:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a24:	d215      	bcs.n	8000a52 <__aeabi_d2iz+0x36>
 8000a26:	d511      	bpl.n	8000a4c <__aeabi_d2iz+0x30>
 8000a28:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a2c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a30:	d912      	bls.n	8000a58 <__aeabi_d2iz+0x3c>
 8000a32:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a36:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a3a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a3e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a42:	fa23 f002 	lsr.w	r0, r3, r2
 8000a46:	bf18      	it	ne
 8000a48:	4240      	negne	r0, r0
 8000a4a:	4770      	bx	lr
 8000a4c:	f04f 0000 	mov.w	r0, #0
 8000a50:	4770      	bx	lr
 8000a52:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a56:	d105      	bne.n	8000a64 <__aeabi_d2iz+0x48>
 8000a58:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a5c:	bf08      	it	eq
 8000a5e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a62:	4770      	bx	lr
 8000a64:	f04f 0000 	mov.w	r0, #0
 8000a68:	4770      	bx	lr
 8000a6a:	bf00      	nop

08000a6c <seven_segment_display_decimal>:
GPIOC, .pin = GPIO_PIN_1 }, { .port = GPIOC, .pin = GPIO_PIN_0 } }, .BCD_input =
		{ { .port = GPIOC, .pin = GPIO_PIN_6 }, { .port = GPIOC, .pin =
		GPIO_PIN_7 }, { .port = GPIOC, .pin = GPIO_PIN_8 }, { .port =
		GPIOC, .pin = GPIO_PIN_9 } }, .digits = { 0, 0, 0, 0 }, .number = 0 };

void seven_segment_display_decimal(uint32_t n) {
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b082      	sub	sp, #8
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	6078      	str	r0, [r7, #4]
	if (n < 10) {
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	2b09      	cmp	r3, #9
 8000a78:	d832      	bhi.n	8000ae0 <seven_segment_display_decimal+0x74>
		HAL_GPIO_WritePin(seven_segment.BCD_input[0].port,
 8000a7a:	4b1b      	ldr	r3, [pc, #108]	; (8000ae8 <seven_segment_display_decimal+0x7c>)
 8000a7c:	6a18      	ldr	r0, [r3, #32]
 8000a7e:	4b1a      	ldr	r3, [pc, #104]	; (8000ae8 <seven_segment_display_decimal+0x7c>)
 8000a80:	8c99      	ldrh	r1, [r3, #36]	; 0x24
				seven_segment.BCD_input[0].pin,
				(n & 1) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	b2db      	uxtb	r3, r3
 8000a86:	f003 0301 	and.w	r3, r3, #1
 8000a8a:	b2db      	uxtb	r3, r3
		HAL_GPIO_WritePin(seven_segment.BCD_input[0].port,
 8000a8c:	461a      	mov	r2, r3
 8000a8e:	f004 fa1d 	bl	8004ecc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(seven_segment.BCD_input[1].port,
 8000a92:	4b15      	ldr	r3, [pc, #84]	; (8000ae8 <seven_segment_display_decimal+0x7c>)
 8000a94:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8000a96:	4b14      	ldr	r3, [pc, #80]	; (8000ae8 <seven_segment_display_decimal+0x7c>)
 8000a98:	8d99      	ldrh	r1, [r3, #44]	; 0x2c
				seven_segment.BCD_input[1].pin,
				(n & 2) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	085b      	lsrs	r3, r3, #1
 8000a9e:	b2db      	uxtb	r3, r3
 8000aa0:	f003 0301 	and.w	r3, r3, #1
 8000aa4:	b2db      	uxtb	r3, r3
		HAL_GPIO_WritePin(seven_segment.BCD_input[1].port,
 8000aa6:	461a      	mov	r2, r3
 8000aa8:	f004 fa10 	bl	8004ecc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(seven_segment.BCD_input[2].port,
 8000aac:	4b0e      	ldr	r3, [pc, #56]	; (8000ae8 <seven_segment_display_decimal+0x7c>)
 8000aae:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8000ab0:	4b0d      	ldr	r3, [pc, #52]	; (8000ae8 <seven_segment_display_decimal+0x7c>)
 8000ab2:	8e99      	ldrh	r1, [r3, #52]	; 0x34
				seven_segment.BCD_input[2].pin,
				(n & 4) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	089b      	lsrs	r3, r3, #2
 8000ab8:	b2db      	uxtb	r3, r3
 8000aba:	f003 0301 	and.w	r3, r3, #1
 8000abe:	b2db      	uxtb	r3, r3
		HAL_GPIO_WritePin(seven_segment.BCD_input[2].port,
 8000ac0:	461a      	mov	r2, r3
 8000ac2:	f004 fa03 	bl	8004ecc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(seven_segment.BCD_input[3].port,
 8000ac6:	4b08      	ldr	r3, [pc, #32]	; (8000ae8 <seven_segment_display_decimal+0x7c>)
 8000ac8:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8000aca:	4b07      	ldr	r3, [pc, #28]	; (8000ae8 <seven_segment_display_decimal+0x7c>)
 8000acc:	8f99      	ldrh	r1, [r3, #60]	; 0x3c
				seven_segment.BCD_input[3].pin,
				(n & 8) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	08db      	lsrs	r3, r3, #3
 8000ad2:	b2db      	uxtb	r3, r3
 8000ad4:	f003 0301 	and.w	r3, r3, #1
 8000ad8:	b2db      	uxtb	r3, r3
		HAL_GPIO_WritePin(seven_segment.BCD_input[3].port,
 8000ada:	461a      	mov	r2, r3
 8000adc:	f004 f9f6 	bl	8004ecc <HAL_GPIO_WritePin>
	}
}
 8000ae0:	bf00      	nop
 8000ae2:	3708      	adds	r7, #8
 8000ae4:	46bd      	mov	sp, r7
 8000ae6:	bd80      	pop	{r7, pc}
 8000ae8:	20000010 	.word	0x20000010

08000aec <seven_segment_deactivate_digits>:

void seven_segment_deactivate_digits(void) {
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b082      	sub	sp, #8
 8000af0:	af00      	add	r7, sp, #0
	for (int i = 0; i < 4; ++i) {
 8000af2:	2300      	movs	r3, #0
 8000af4:	607b      	str	r3, [r7, #4]
 8000af6:	e00f      	b.n	8000b18 <seven_segment_deactivate_digits+0x2c>
		HAL_GPIO_WritePin(seven_segment.digit_activators[i].port,
 8000af8:	4a0b      	ldr	r2, [pc, #44]	; (8000b28 <seven_segment_deactivate_digits+0x3c>)
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8000b00:	4a09      	ldr	r2, [pc, #36]	; (8000b28 <seven_segment_deactivate_digits+0x3c>)
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	00db      	lsls	r3, r3, #3
 8000b06:	4413      	add	r3, r2
 8000b08:	889b      	ldrh	r3, [r3, #4]
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	4619      	mov	r1, r3
 8000b0e:	f004 f9dd 	bl	8004ecc <HAL_GPIO_WritePin>
	for (int i = 0; i < 4; ++i) {
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	3301      	adds	r3, #1
 8000b16:	607b      	str	r3, [r7, #4]
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	2b03      	cmp	r3, #3
 8000b1c:	ddec      	ble.n	8000af8 <seven_segment_deactivate_digits+0xc>
				seven_segment.digit_activators[i].pin, GPIO_PIN_RESET);
	}
}
 8000b1e:	bf00      	nop
 8000b20:	bf00      	nop
 8000b22:	3708      	adds	r7, #8
 8000b24:	46bd      	mov	sp, r7
 8000b26:	bd80      	pop	{r7, pc}
 8000b28:	20000010 	.word	0x20000010

08000b2c <seven_segment_activate_digit>:

void seven_segment_activate_digit(uint32_t d) {
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b082      	sub	sp, #8
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	6078      	str	r0, [r7, #4]
	if (d < 4) {
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	2b03      	cmp	r3, #3
 8000b38:	d80c      	bhi.n	8000b54 <seven_segment_activate_digit+0x28>
		HAL_GPIO_WritePin(seven_segment.digit_activators[d].port,
 8000b3a:	4a08      	ldr	r2, [pc, #32]	; (8000b5c <seven_segment_activate_digit+0x30>)
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8000b42:	4a06      	ldr	r2, [pc, #24]	; (8000b5c <seven_segment_activate_digit+0x30>)
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	00db      	lsls	r3, r3, #3
 8000b48:	4413      	add	r3, r2
 8000b4a:	889b      	ldrh	r3, [r3, #4]
 8000b4c:	2201      	movs	r2, #1
 8000b4e:	4619      	mov	r1, r3
 8000b50:	f004 f9bc 	bl	8004ecc <HAL_GPIO_WritePin>
				seven_segment.digit_activators[d].pin, GPIO_PIN_SET);
	}
}
 8000b54:	bf00      	nop
 8000b56:	3708      	adds	r7, #8
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	bd80      	pop	{r7, pc}
 8000b5c:	20000010 	.word	0x20000010

08000b60 <seven_segment_set_num>:

void seven_segment_set_num(uint32_t n) {
 8000b60:	b480      	push	{r7}
 8000b62:	b085      	sub	sp, #20
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	6078      	str	r0, [r7, #4]

	seven_segment.number = n;
 8000b68:	4a15      	ldr	r2, [pc, #84]	; (8000bc0 <seven_segment_set_num+0x60>)
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	6513      	str	r3, [r2, #80]	; 0x50
	for (uint32_t i = 0; i < 4; ++i) {
 8000b6e:	2300      	movs	r3, #0
 8000b70:	60fb      	str	r3, [r7, #12]
 8000b72:	e01a      	b.n	8000baa <seven_segment_set_num+0x4a>
		seven_segment.digits[3 - i] = n % 10;
 8000b74:	68fb      	ldr	r3, [r7, #12]
 8000b76:	f1c3 0003 	rsb	r0, r3, #3
 8000b7a:	6879      	ldr	r1, [r7, #4]
 8000b7c:	4b11      	ldr	r3, [pc, #68]	; (8000bc4 <seven_segment_set_num+0x64>)
 8000b7e:	fba3 2301 	umull	r2, r3, r3, r1
 8000b82:	08da      	lsrs	r2, r3, #3
 8000b84:	4613      	mov	r3, r2
 8000b86:	009b      	lsls	r3, r3, #2
 8000b88:	4413      	add	r3, r2
 8000b8a:	005b      	lsls	r3, r3, #1
 8000b8c:	1aca      	subs	r2, r1, r3
 8000b8e:	490c      	ldr	r1, [pc, #48]	; (8000bc0 <seven_segment_set_num+0x60>)
 8000b90:	f100 0310 	add.w	r3, r0, #16
 8000b94:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		n /= 10;
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	4a0a      	ldr	r2, [pc, #40]	; (8000bc4 <seven_segment_set_num+0x64>)
 8000b9c:	fba2 2303 	umull	r2, r3, r2, r3
 8000ba0:	08db      	lsrs	r3, r3, #3
 8000ba2:	607b      	str	r3, [r7, #4]
	for (uint32_t i = 0; i < 4; ++i) {
 8000ba4:	68fb      	ldr	r3, [r7, #12]
 8000ba6:	3301      	adds	r3, #1
 8000ba8:	60fb      	str	r3, [r7, #12]
 8000baa:	68fb      	ldr	r3, [r7, #12]
 8000bac:	2b03      	cmp	r3, #3
 8000bae:	d9e1      	bls.n	8000b74 <seven_segment_set_num+0x14>
	}
}
 8000bb0:	bf00      	nop
 8000bb2:	bf00      	nop
 8000bb4:	3714      	adds	r7, #20
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bbc:	4770      	bx	lr
 8000bbe:	bf00      	nop
 8000bc0:	20000010 	.word	0x20000010
 8000bc4:	cccccccd 	.word	0xcccccccd

08000bc8 <seven_segment_refresh>:

void seven_segment_refresh(void) {
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	af00      	add	r7, sp, #0
	static uint32_t state = 0;
	static uint32_t last_time = 0;
	static uint32_t second_time = 0;
	static int integer = 0;

	if (HAL_GetTick() - last_time > 4) {
 8000bcc:	f002 fb78 	bl	80032c0 <HAL_GetTick>
 8000bd0:	4602      	mov	r2, r0
 8000bd2:	4b4d      	ldr	r3, [pc, #308]	; (8000d08 <seven_segment_refresh+0x140>)
 8000bd4:	681b      	ldr	r3, [r3, #0]
 8000bd6:	1ad3      	subs	r3, r2, r3
 8000bd8:	2b04      	cmp	r3, #4
 8000bda:	f240 8093 	bls.w	8000d04 <seven_segment_refresh+0x13c>

		seven_segment_display_decimal(seven_segment.digits[state]);
 8000bde:	4b4b      	ldr	r3, [pc, #300]	; (8000d0c <seven_segment_refresh+0x144>)
 8000be0:	681b      	ldr	r3, [r3, #0]
 8000be2:	4a4b      	ldr	r2, [pc, #300]	; (8000d10 <seven_segment_refresh+0x148>)
 8000be4:	3310      	adds	r3, #16
 8000be6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000bea:	4618      	mov	r0, r3
 8000bec:	f7ff ff3e 	bl	8000a6c <seven_segment_display_decimal>
		seven_segment_deactivate_digits();
 8000bf0:	f7ff ff7c 	bl	8000aec <seven_segment_deactivate_digits>

		if (current_sense < threshold) {
 8000bf4:	4b47      	ldr	r3, [pc, #284]	; (8000d14 <seven_segment_refresh+0x14c>)
 8000bf6:	681a      	ldr	r2, [r3, #0]
 8000bf8:	4b47      	ldr	r3, [pc, #284]	; (8000d18 <seven_segment_refresh+0x150>)
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	429a      	cmp	r2, r3
 8000bfe:	da3c      	bge.n	8000c7a <seven_segment_refresh+0xb2>
			if (select == state) {
 8000c00:	4b46      	ldr	r3, [pc, #280]	; (8000d1c <seven_segment_refresh+0x154>)
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	4a41      	ldr	r2, [pc, #260]	; (8000d0c <seven_segment_refresh+0x144>)
 8000c06:	6812      	ldr	r2, [r2, #0]
 8000c08:	4293      	cmp	r3, r2
 8000c0a:	d130      	bne.n	8000c6e <seven_segment_refresh+0xa6>
				if (integer == 0) {
 8000c0c:	4b44      	ldr	r3, [pc, #272]	; (8000d20 <seven_segment_refresh+0x158>)
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d113      	bne.n	8000c3c <seven_segment_refresh+0x74>
					HAL_GPIO_WritePin(
 8000c14:	4b41      	ldr	r3, [pc, #260]	; (8000d1c <seven_segment_refresh+0x154>)
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	4a3d      	ldr	r2, [pc, #244]	; (8000d10 <seven_segment_refresh+0x148>)
 8000c1a:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8000c1e:	4b3f      	ldr	r3, [pc, #252]	; (8000d1c <seven_segment_refresh+0x154>)
 8000c20:	681b      	ldr	r3, [r3, #0]
 8000c22:	4a3b      	ldr	r2, [pc, #236]	; (8000d10 <seven_segment_refresh+0x148>)
 8000c24:	00db      	lsls	r3, r3, #3
 8000c26:	4413      	add	r3, r2
 8000c28:	889b      	ldrh	r3, [r3, #4]
 8000c2a:	2201      	movs	r2, #1
 8000c2c:	4619      	mov	r1, r3
 8000c2e:	f004 f94d 	bl	8004ecc <HAL_GPIO_WritePin>
							seven_segment.digit_activators[select].port,
							seven_segment.digit_activators[select].pin, 1);
					seven_segment_activate_digit(state);
 8000c32:	4b36      	ldr	r3, [pc, #216]	; (8000d0c <seven_segment_refresh+0x144>)
 8000c34:	681b      	ldr	r3, [r3, #0]
 8000c36:	4618      	mov	r0, r3
 8000c38:	f7ff ff78 	bl	8000b2c <seven_segment_activate_digit>
				}
				if (HAL_GetTick() - second_time > 500) {
 8000c3c:	f002 fb40 	bl	80032c0 <HAL_GetTick>
 8000c40:	4602      	mov	r2, r0
 8000c42:	4b38      	ldr	r3, [pc, #224]	; (8000d24 <seven_segment_refresh+0x15c>)
 8000c44:	681b      	ldr	r3, [r3, #0]
 8000c46:	1ad3      	subs	r3, r2, r3
 8000c48:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000c4c:	d945      	bls.n	8000cda <seven_segment_refresh+0x112>
					integer = !integer;
 8000c4e:	4b34      	ldr	r3, [pc, #208]	; (8000d20 <seven_segment_refresh+0x158>)
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	bf0c      	ite	eq
 8000c56:	2301      	moveq	r3, #1
 8000c58:	2300      	movne	r3, #0
 8000c5a:	b2db      	uxtb	r3, r3
 8000c5c:	461a      	mov	r2, r3
 8000c5e:	4b30      	ldr	r3, [pc, #192]	; (8000d20 <seven_segment_refresh+0x158>)
 8000c60:	601a      	str	r2, [r3, #0]
					second_time = HAL_GetTick();
 8000c62:	f002 fb2d 	bl	80032c0 <HAL_GetTick>
 8000c66:	4603      	mov	r3, r0
 8000c68:	4a2e      	ldr	r2, [pc, #184]	; (8000d24 <seven_segment_refresh+0x15c>)
 8000c6a:	6013      	str	r3, [r2, #0]
 8000c6c:	e035      	b.n	8000cda <seven_segment_refresh+0x112>
				}
			} else {
				seven_segment_activate_digit(state);
 8000c6e:	4b27      	ldr	r3, [pc, #156]	; (8000d0c <seven_segment_refresh+0x144>)
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	4618      	mov	r0, r3
 8000c74:	f7ff ff5a 	bl	8000b2c <seven_segment_activate_digit>
 8000c78:	e02f      	b.n	8000cda <seven_segment_refresh+0x112>
			}
		} else {
			if (integer == 0) {
 8000c7a:	4b29      	ldr	r3, [pc, #164]	; (8000d20 <seven_segment_refresh+0x158>)
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d113      	bne.n	8000caa <seven_segment_refresh+0xe2>
				HAL_GPIO_WritePin(seven_segment.digit_activators[select].port,
 8000c82:	4b26      	ldr	r3, [pc, #152]	; (8000d1c <seven_segment_refresh+0x154>)
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	4a22      	ldr	r2, [pc, #136]	; (8000d10 <seven_segment_refresh+0x148>)
 8000c88:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8000c8c:	4b23      	ldr	r3, [pc, #140]	; (8000d1c <seven_segment_refresh+0x154>)
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	4a1f      	ldr	r2, [pc, #124]	; (8000d10 <seven_segment_refresh+0x148>)
 8000c92:	00db      	lsls	r3, r3, #3
 8000c94:	4413      	add	r3, r2
 8000c96:	889b      	ldrh	r3, [r3, #4]
 8000c98:	2201      	movs	r2, #1
 8000c9a:	4619      	mov	r1, r3
 8000c9c:	f004 f916 	bl	8004ecc <HAL_GPIO_WritePin>
						seven_segment.digit_activators[select].pin, 1);
				seven_segment_activate_digit(state);
 8000ca0:	4b1a      	ldr	r3, [pc, #104]	; (8000d0c <seven_segment_refresh+0x144>)
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	4618      	mov	r0, r3
 8000ca6:	f7ff ff41 	bl	8000b2c <seven_segment_activate_digit>
			}
			if (HAL_GetTick() - second_time > 500) {
 8000caa:	f002 fb09 	bl	80032c0 <HAL_GetTick>
 8000cae:	4602      	mov	r2, r0
 8000cb0:	4b1c      	ldr	r3, [pc, #112]	; (8000d24 <seven_segment_refresh+0x15c>)
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	1ad3      	subs	r3, r2, r3
 8000cb6:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000cba:	d90e      	bls.n	8000cda <seven_segment_refresh+0x112>
				integer = !integer;
 8000cbc:	4b18      	ldr	r3, [pc, #96]	; (8000d20 <seven_segment_refresh+0x158>)
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	bf0c      	ite	eq
 8000cc4:	2301      	moveq	r3, #1
 8000cc6:	2300      	movne	r3, #0
 8000cc8:	b2db      	uxtb	r3, r3
 8000cca:	461a      	mov	r2, r3
 8000ccc:	4b14      	ldr	r3, [pc, #80]	; (8000d20 <seven_segment_refresh+0x158>)
 8000cce:	601a      	str	r2, [r3, #0]
				second_time = HAL_GetTick();
 8000cd0:	f002 faf6 	bl	80032c0 <HAL_GetTick>
 8000cd4:	4603      	mov	r3, r0
 8000cd6:	4a13      	ldr	r2, [pc, #76]	; (8000d24 <seven_segment_refresh+0x15c>)
 8000cd8:	6013      	str	r3, [r2, #0]
			}
		}

		seven_segment_display_decimal(seven_segment.digits[state]);
 8000cda:	4b0c      	ldr	r3, [pc, #48]	; (8000d0c <seven_segment_refresh+0x144>)
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	4a0c      	ldr	r2, [pc, #48]	; (8000d10 <seven_segment_refresh+0x148>)
 8000ce0:	3310      	adds	r3, #16
 8000ce2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ce6:	4618      	mov	r0, r3
 8000ce8:	f7ff fec0 	bl	8000a6c <seven_segment_display_decimal>
		state = (state + 1) % 4;
 8000cec:	4b07      	ldr	r3, [pc, #28]	; (8000d0c <seven_segment_refresh+0x144>)
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	3301      	adds	r3, #1
 8000cf2:	f003 0303 	and.w	r3, r3, #3
 8000cf6:	4a05      	ldr	r2, [pc, #20]	; (8000d0c <seven_segment_refresh+0x144>)
 8000cf8:	6013      	str	r3, [r2, #0]
		last_time = HAL_GetTick();
 8000cfa:	f002 fae1 	bl	80032c0 <HAL_GetTick>
 8000cfe:	4603      	mov	r3, r0
 8000d00:	4a01      	ldr	r2, [pc, #4]	; (8000d08 <seven_segment_refresh+0x140>)
 8000d02:	6013      	str	r3, [r2, #0]

	}

}
 8000d04:	bf00      	nop
 8000d06:	bd80      	pop	{r7, pc}
 8000d08:	20000814 	.word	0x20000814
 8000d0c:	20000818 	.word	0x20000818
 8000d10:	20000010 	.word	0x20000010
 8000d14:	20000118 	.word	0x20000118
 8000d18:	2000010c 	.word	0x2000010c
 8000d1c:	200000fc 	.word	0x200000fc
 8000d20:	2000081c 	.word	0x2000081c
 8000d24:	20000820 	.word	0x20000820

08000d28 <programInit>:
		seven_segment_deactivate_digits();
		on = 0;
	}
}

void programInit() {
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	af00      	add	r7, sp, #0

	seven_segment_set_num(0);
 8000d2c:	2000      	movs	r0, #0
 8000d2e:	f7ff ff17 	bl	8000b60 <seven_segment_set_num>

}
 8000d32:	bf00      	nop
 8000d34:	bd80      	pop	{r7, pc}

08000d36 <programLoop>:

void programLoop() {
 8000d36:	b580      	push	{r7, lr}
 8000d38:	af00      	add	r7, sp, #0
	seven_segment_refresh();
 8000d3a:	f7ff ff45 	bl	8000bc8 <seven_segment_refresh>
}
 8000d3e:	bf00      	nop
 8000d40:	bd80      	pop	{r7, pc}
	...

08000d44 <PWM_Start>:
/* USER CODE BEGIN PV */

TIM_HandleTypeDef *pwm_timer = &htim3;
uint32_t pwm_channel = TIM_CHANNEL_2;

void PWM_Start() {
 8000d44:	b580      	push	{r7, lr}
 8000d46:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(pwm_timer, pwm_channel);
 8000d48:	4b04      	ldr	r3, [pc, #16]	; (8000d5c <PWM_Start+0x18>)
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	4a04      	ldr	r2, [pc, #16]	; (8000d60 <PWM_Start+0x1c>)
 8000d4e:	6812      	ldr	r2, [r2, #0]
 8000d50:	4611      	mov	r1, r2
 8000d52:	4618      	mov	r0, r3
 8000d54:	f006 fbfa 	bl	800754c <HAL_TIM_PWM_Start>
}
 8000d58:	bf00      	nop
 8000d5a:	bd80      	pop	{r7, pc}
 8000d5c:	20000064 	.word	0x20000064
 8000d60:	20000068 	.word	0x20000068

08000d64 <PWM_Change_Tone>:

void PWM_Change_Tone(uint16_t pwm_freq, uint16_t volume) {
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b088      	sub	sp, #32
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	4603      	mov	r3, r0
 8000d6c:	460a      	mov	r2, r1
 8000d6e:	80fb      	strh	r3, [r7, #6]
 8000d70:	4613      	mov	r3, r2
 8000d72:	80bb      	strh	r3, [r7, #4]
	if (pwm_freq == 0 || pwm_freq > 20000) {
 8000d74:	88fb      	ldrh	r3, [r7, #6]
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d004      	beq.n	8000d84 <PWM_Change_Tone+0x20>
 8000d7a:	88fb      	ldrh	r3, [r7, #6]
 8000d7c:	f644 6220 	movw	r2, #20000	; 0x4e20
 8000d80:	4293      	cmp	r3, r2
 8000d82:	d937      	bls.n	8000df4 <PWM_Change_Tone+0x90>
		__HAL_TIM_SET_COMPARE(pwm_timer, pwm_channel, 0);
 8000d84:	4b52      	ldr	r3, [pc, #328]	; (8000ed0 <PWM_Change_Tone+0x16c>)
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	d105      	bne.n	8000d98 <PWM_Change_Tone+0x34>
 8000d8c:	4b51      	ldr	r3, [pc, #324]	; (8000ed4 <PWM_Change_Tone+0x170>)
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	2200      	movs	r2, #0
 8000d94:	635a      	str	r2, [r3, #52]	; 0x34
 8000d96:	e097      	b.n	8000ec8 <PWM_Change_Tone+0x164>
 8000d98:	4b4d      	ldr	r3, [pc, #308]	; (8000ed0 <PWM_Change_Tone+0x16c>)
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	2b04      	cmp	r3, #4
 8000d9e:	d105      	bne.n	8000dac <PWM_Change_Tone+0x48>
 8000da0:	4b4c      	ldr	r3, [pc, #304]	; (8000ed4 <PWM_Change_Tone+0x170>)
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	681a      	ldr	r2, [r3, #0]
 8000da6:	2300      	movs	r3, #0
 8000da8:	6393      	str	r3, [r2, #56]	; 0x38
 8000daa:	e08d      	b.n	8000ec8 <PWM_Change_Tone+0x164>
 8000dac:	4b48      	ldr	r3, [pc, #288]	; (8000ed0 <PWM_Change_Tone+0x16c>)
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	2b08      	cmp	r3, #8
 8000db2:	d105      	bne.n	8000dc0 <PWM_Change_Tone+0x5c>
 8000db4:	4b47      	ldr	r3, [pc, #284]	; (8000ed4 <PWM_Change_Tone+0x170>)
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	681a      	ldr	r2, [r3, #0]
 8000dba:	2300      	movs	r3, #0
 8000dbc:	63d3      	str	r3, [r2, #60]	; 0x3c
 8000dbe:	e083      	b.n	8000ec8 <PWM_Change_Tone+0x164>
 8000dc0:	4b43      	ldr	r3, [pc, #268]	; (8000ed0 <PWM_Change_Tone+0x16c>)
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	2b0c      	cmp	r3, #12
 8000dc6:	d105      	bne.n	8000dd4 <PWM_Change_Tone+0x70>
 8000dc8:	4b42      	ldr	r3, [pc, #264]	; (8000ed4 <PWM_Change_Tone+0x170>)
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	681a      	ldr	r2, [r3, #0]
 8000dce:	2300      	movs	r3, #0
 8000dd0:	6413      	str	r3, [r2, #64]	; 0x40
 8000dd2:	e079      	b.n	8000ec8 <PWM_Change_Tone+0x164>
 8000dd4:	4b3e      	ldr	r3, [pc, #248]	; (8000ed0 <PWM_Change_Tone+0x16c>)
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	2b10      	cmp	r3, #16
 8000dda:	d105      	bne.n	8000de8 <PWM_Change_Tone+0x84>
 8000ddc:	4b3d      	ldr	r3, [pc, #244]	; (8000ed4 <PWM_Change_Tone+0x170>)
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	681a      	ldr	r2, [r3, #0]
 8000de2:	2300      	movs	r3, #0
 8000de4:	6593      	str	r3, [r2, #88]	; 0x58
 8000de6:	e06f      	b.n	8000ec8 <PWM_Change_Tone+0x164>
 8000de8:	4b3a      	ldr	r3, [pc, #232]	; (8000ed4 <PWM_Change_Tone+0x170>)
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	681a      	ldr	r2, [r3, #0]
 8000dee:	2300      	movs	r3, #0
 8000df0:	65d3      	str	r3, [r2, #92]	; 0x5c
 8000df2:	e069      	b.n	8000ec8 <PWM_Change_Tone+0x164>
	} else {
		const uint32_t internal_clock_freq = HAL_RCC_GetSysClockFreq();
 8000df4:	f005 fc66 	bl	80066c4 <HAL_RCC_GetSysClockFreq>
 8000df8:	61f8      	str	r0, [r7, #28]
		const uint16_t prescaler = 1 + internal_clock_freq / pwm_freq / 60000;
 8000dfa:	88fb      	ldrh	r3, [r7, #6]
 8000dfc:	69fa      	ldr	r2, [r7, #28]
 8000dfe:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e02:	4a35      	ldr	r2, [pc, #212]	; (8000ed8 <PWM_Change_Tone+0x174>)
 8000e04:	fba2 2303 	umull	r2, r3, r2, r3
 8000e08:	0b9b      	lsrs	r3, r3, #14
 8000e0a:	b29b      	uxth	r3, r3
 8000e0c:	3301      	adds	r3, #1
 8000e0e:	837b      	strh	r3, [r7, #26]
		const uint32_t timer_clock = internal_clock_freq / prescaler;
 8000e10:	8b7b      	ldrh	r3, [r7, #26]
 8000e12:	69fa      	ldr	r2, [r7, #28]
 8000e14:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e18:	617b      	str	r3, [r7, #20]
		const uint32_t period_cycles = timer_clock / pwm_freq;
 8000e1a:	88fb      	ldrh	r3, [r7, #6]
 8000e1c:	697a      	ldr	r2, [r7, #20]
 8000e1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e22:	613b      	str	r3, [r7, #16]
		const uint32_t pulse_width = volume * period_cycles / 1000 / 2;
 8000e24:	88bb      	ldrh	r3, [r7, #4]
 8000e26:	693a      	ldr	r2, [r7, #16]
 8000e28:	fb02 f303 	mul.w	r3, r2, r3
 8000e2c:	4a2b      	ldr	r2, [pc, #172]	; (8000edc <PWM_Change_Tone+0x178>)
 8000e2e:	fba2 2303 	umull	r2, r3, r2, r3
 8000e32:	09db      	lsrs	r3, r3, #7
 8000e34:	60fb      	str	r3, [r7, #12]

		pwm_timer->Instance->PSC = prescaler - 1;
 8000e36:	8b7b      	ldrh	r3, [r7, #26]
 8000e38:	1e5a      	subs	r2, r3, #1
 8000e3a:	4b26      	ldr	r3, [pc, #152]	; (8000ed4 <PWM_Change_Tone+0x170>)
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	629a      	str	r2, [r3, #40]	; 0x28
		pwm_timer->Instance->ARR = period_cycles - 1;
 8000e42:	4b24      	ldr	r3, [pc, #144]	; (8000ed4 <PWM_Change_Tone+0x170>)
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	693a      	ldr	r2, [r7, #16]
 8000e4a:	3a01      	subs	r2, #1
 8000e4c:	62da      	str	r2, [r3, #44]	; 0x2c
		pwm_timer->Instance->EGR = TIM_EGR_UG;
 8000e4e:	4b21      	ldr	r3, [pc, #132]	; (8000ed4 <PWM_Change_Tone+0x170>)
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	2201      	movs	r2, #1
 8000e56:	615a      	str	r2, [r3, #20]
		__HAL_TIM_SET_COMPARE(pwm_timer, pwm_channel, pulse_width);
 8000e58:	4b1d      	ldr	r3, [pc, #116]	; (8000ed0 <PWM_Change_Tone+0x16c>)
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d105      	bne.n	8000e6c <PWM_Change_Tone+0x108>
 8000e60:	4b1c      	ldr	r3, [pc, #112]	; (8000ed4 <PWM_Change_Tone+0x170>)
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	68fa      	ldr	r2, [r7, #12]
 8000e68:	635a      	str	r2, [r3, #52]	; 0x34
	}
}
 8000e6a:	e02d      	b.n	8000ec8 <PWM_Change_Tone+0x164>
		__HAL_TIM_SET_COMPARE(pwm_timer, pwm_channel, pulse_width);
 8000e6c:	4b18      	ldr	r3, [pc, #96]	; (8000ed0 <PWM_Change_Tone+0x16c>)
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	2b04      	cmp	r3, #4
 8000e72:	d105      	bne.n	8000e80 <PWM_Change_Tone+0x11c>
 8000e74:	4b17      	ldr	r3, [pc, #92]	; (8000ed4 <PWM_Change_Tone+0x170>)
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	681a      	ldr	r2, [r3, #0]
 8000e7a:	68fb      	ldr	r3, [r7, #12]
 8000e7c:	6393      	str	r3, [r2, #56]	; 0x38
}
 8000e7e:	e023      	b.n	8000ec8 <PWM_Change_Tone+0x164>
		__HAL_TIM_SET_COMPARE(pwm_timer, pwm_channel, pulse_width);
 8000e80:	4b13      	ldr	r3, [pc, #76]	; (8000ed0 <PWM_Change_Tone+0x16c>)
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	2b08      	cmp	r3, #8
 8000e86:	d105      	bne.n	8000e94 <PWM_Change_Tone+0x130>
 8000e88:	4b12      	ldr	r3, [pc, #72]	; (8000ed4 <PWM_Change_Tone+0x170>)
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	681a      	ldr	r2, [r3, #0]
 8000e8e:	68fb      	ldr	r3, [r7, #12]
 8000e90:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 8000e92:	e019      	b.n	8000ec8 <PWM_Change_Tone+0x164>
		__HAL_TIM_SET_COMPARE(pwm_timer, pwm_channel, pulse_width);
 8000e94:	4b0e      	ldr	r3, [pc, #56]	; (8000ed0 <PWM_Change_Tone+0x16c>)
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	2b0c      	cmp	r3, #12
 8000e9a:	d105      	bne.n	8000ea8 <PWM_Change_Tone+0x144>
 8000e9c:	4b0d      	ldr	r3, [pc, #52]	; (8000ed4 <PWM_Change_Tone+0x170>)
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	681a      	ldr	r2, [r3, #0]
 8000ea2:	68fb      	ldr	r3, [r7, #12]
 8000ea4:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000ea6:	e00f      	b.n	8000ec8 <PWM_Change_Tone+0x164>
		__HAL_TIM_SET_COMPARE(pwm_timer, pwm_channel, pulse_width);
 8000ea8:	4b09      	ldr	r3, [pc, #36]	; (8000ed0 <PWM_Change_Tone+0x16c>)
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	2b10      	cmp	r3, #16
 8000eae:	d105      	bne.n	8000ebc <PWM_Change_Tone+0x158>
 8000eb0:	4b08      	ldr	r3, [pc, #32]	; (8000ed4 <PWM_Change_Tone+0x170>)
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	681a      	ldr	r2, [r3, #0]
 8000eb6:	68fb      	ldr	r3, [r7, #12]
 8000eb8:	6593      	str	r3, [r2, #88]	; 0x58
}
 8000eba:	e005      	b.n	8000ec8 <PWM_Change_Tone+0x164>
		__HAL_TIM_SET_COMPARE(pwm_timer, pwm_channel, pulse_width);
 8000ebc:	4b05      	ldr	r3, [pc, #20]	; (8000ed4 <PWM_Change_Tone+0x170>)
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	681a      	ldr	r2, [r3, #0]
 8000ec2:	68fb      	ldr	r3, [r7, #12]
 8000ec4:	65d3      	str	r3, [r2, #92]	; 0x5c
}
 8000ec6:	e7ff      	b.n	8000ec8 <PWM_Change_Tone+0x164>
 8000ec8:	bf00      	nop
 8000eca:	3720      	adds	r7, #32
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	bd80      	pop	{r7, pc}
 8000ed0:	20000068 	.word	0x20000068
 8000ed4:	20000064 	.word	0x20000064
 8000ed8:	45e7b273 	.word	0x45e7b273
 8000edc:	10624dd3 	.word	0x10624dd3

08000ee0 <TurnOnLed>:
/* USER CODE BEGIN 0 */

RTC_TimeTypeDef myTime;
RTC_DateTypeDef myDate;
char timeStr[20];
void TurnOnLed() {
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8, 1);
 8000ee4:	2201      	movs	r2, #1
 8000ee6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000eea:	4817      	ldr	r0, [pc, #92]	; (8000f48 <TurnOnLed+0x68>)
 8000eec:	f003 ffee 	bl	8004ecc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, 1);
 8000ef0:	2201      	movs	r2, #1
 8000ef2:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ef6:	4814      	ldr	r0, [pc, #80]	; (8000f48 <TurnOnLed+0x68>)
 8000ef8:	f003 ffe8 	bl	8004ecc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10, 1);
 8000efc:	2201      	movs	r2, #1
 8000efe:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f02:	4811      	ldr	r0, [pc, #68]	; (8000f48 <TurnOnLed+0x68>)
 8000f04:	f003 ffe2 	bl	8004ecc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, 1);
 8000f08:	2201      	movs	r2, #1
 8000f0a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000f0e:	480e      	ldr	r0, [pc, #56]	; (8000f48 <TurnOnLed+0x68>)
 8000f10:	f003 ffdc 	bl	8004ecc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_12, 1);
 8000f14:	2201      	movs	r2, #1
 8000f16:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000f1a:	480b      	ldr	r0, [pc, #44]	; (8000f48 <TurnOnLed+0x68>)
 8000f1c:	f003 ffd6 	bl	8004ecc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_13, 1);
 8000f20:	2201      	movs	r2, #1
 8000f22:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f26:	4808      	ldr	r0, [pc, #32]	; (8000f48 <TurnOnLed+0x68>)
 8000f28:	f003 ffd0 	bl	8004ecc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, 1);
 8000f2c:	2201      	movs	r2, #1
 8000f2e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000f32:	4805      	ldr	r0, [pc, #20]	; (8000f48 <TurnOnLed+0x68>)
 8000f34:	f003 ffca 	bl	8004ecc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_15, 1);
 8000f38:	2201      	movs	r2, #1
 8000f3a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000f3e:	4802      	ldr	r0, [pc, #8]	; (8000f48 <TurnOnLed+0x68>)
 8000f40:	f003 ffc4 	bl	8004ecc <HAL_GPIO_WritePin>
}
 8000f44:	bf00      	nop
 8000f46:	bd80      	pop	{r7, pc}
 8000f48:	48001000 	.word	0x48001000

08000f4c <TurnOffLed>:
void TurnOffLed() {
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8, 0);
 8000f50:	2200      	movs	r2, #0
 8000f52:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f56:	4817      	ldr	r0, [pc, #92]	; (8000fb4 <TurnOffLed+0x68>)
 8000f58:	f003 ffb8 	bl	8004ecc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, 0);
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f62:	4814      	ldr	r0, [pc, #80]	; (8000fb4 <TurnOffLed+0x68>)
 8000f64:	f003 ffb2 	bl	8004ecc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10, 0);
 8000f68:	2200      	movs	r2, #0
 8000f6a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f6e:	4811      	ldr	r0, [pc, #68]	; (8000fb4 <TurnOffLed+0x68>)
 8000f70:	f003 ffac 	bl	8004ecc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, 0);
 8000f74:	2200      	movs	r2, #0
 8000f76:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000f7a:	480e      	ldr	r0, [pc, #56]	; (8000fb4 <TurnOffLed+0x68>)
 8000f7c:	f003 ffa6 	bl	8004ecc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_12, 0);
 8000f80:	2200      	movs	r2, #0
 8000f82:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000f86:	480b      	ldr	r0, [pc, #44]	; (8000fb4 <TurnOffLed+0x68>)
 8000f88:	f003 ffa0 	bl	8004ecc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_13, 0);
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f92:	4808      	ldr	r0, [pc, #32]	; (8000fb4 <TurnOffLed+0x68>)
 8000f94:	f003 ff9a 	bl	8004ecc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, 0);
 8000f98:	2200      	movs	r2, #0
 8000f9a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000f9e:	4805      	ldr	r0, [pc, #20]	; (8000fb4 <TurnOffLed+0x68>)
 8000fa0:	f003 ff94 	bl	8004ecc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_15, 0);
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000faa:	4802      	ldr	r0, [pc, #8]	; (8000fb4 <TurnOffLed+0x68>)
 8000fac:	f003 ff8e 	bl	8004ecc <HAL_GPIO_WritePin>
}
 8000fb0:	bf00      	nop
 8000fb2:	bd80      	pop	{r7, pc}
 8000fb4:	48001000 	.word	0x48001000

08000fb8 <printTime>:

void printTime() {
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b084      	sub	sp, #16
 8000fbc:	af02      	add	r7, sp, #8
	int size = sprintf(timeStr, "%2d:%2d:%2d\n", myTime.Hours, myTime.Minutes,
 8000fbe:	4b0d      	ldr	r3, [pc, #52]	; (8000ff4 <printTime+0x3c>)
 8000fc0:	781b      	ldrb	r3, [r3, #0]
 8000fc2:	461a      	mov	r2, r3
 8000fc4:	4b0b      	ldr	r3, [pc, #44]	; (8000ff4 <printTime+0x3c>)
 8000fc6:	785b      	ldrb	r3, [r3, #1]
 8000fc8:	4619      	mov	r1, r3
			myTime.Seconds);
 8000fca:	4b0a      	ldr	r3, [pc, #40]	; (8000ff4 <printTime+0x3c>)
 8000fcc:	789b      	ldrb	r3, [r3, #2]
	int size = sprintf(timeStr, "%2d:%2d:%2d\n", myTime.Hours, myTime.Minutes,
 8000fce:	9300      	str	r3, [sp, #0]
 8000fd0:	460b      	mov	r3, r1
 8000fd2:	4909      	ldr	r1, [pc, #36]	; (8000ff8 <printTime+0x40>)
 8000fd4:	4809      	ldr	r0, [pc, #36]	; (8000ffc <printTime+0x44>)
 8000fd6:	f008 ff41 	bl	8009e5c <siprintf>
 8000fda:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, timeStr, size, 1000);
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	b29a      	uxth	r2, r3
 8000fe0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fe4:	4905      	ldr	r1, [pc, #20]	; (8000ffc <printTime+0x44>)
 8000fe6:	4806      	ldr	r0, [pc, #24]	; (8001000 <printTime+0x48>)
 8000fe8:	f007 fc66 	bl	80088b8 <HAL_UART_Transmit>
}
 8000fec:	bf00      	nop
 8000fee:	3708      	adds	r7, #8
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	bd80      	pop	{r7, pc}
 8000ff4:	200007e8 	.word	0x200007e8
 8000ff8:	0800a778 	.word	0x0800a778
 8000ffc:	20000800 	.word	0x20000800
 8001000:	200003ec 	.word	0x200003ec

08001004 <checkwarn>:

void checkwarn() {
 8001004:	b580      	push	{r7, lr}
 8001006:	af00      	add	r7, sp, #0

	if (current_sense >= threshold) {
 8001008:	4b1a      	ldr	r3, [pc, #104]	; (8001074 <checkwarn+0x70>)
 800100a:	681a      	ldr	r2, [r3, #0]
 800100c:	4b1a      	ldr	r3, [pc, #104]	; (8001078 <checkwarn+0x74>)
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	429a      	cmp	r2, r3
 8001012:	db16      	blt.n	8001042 <checkwarn+0x3e>
		if (is_critical == 0) {
 8001014:	4b19      	ldr	r3, [pc, #100]	; (800107c <checkwarn+0x78>)
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	2b00      	cmp	r3, #0
 800101a:	d107      	bne.n	800102c <checkwarn+0x28>
			is_critical = 1;
 800101c:	4b17      	ldr	r3, [pc, #92]	; (800107c <checkwarn+0x78>)
 800101e:	2201      	movs	r2, #1
 8001020:	601a      	str	r2, [r3, #0]
			warncount++;
 8001022:	4b17      	ldr	r3, [pc, #92]	; (8001080 <checkwarn+0x7c>)
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	3301      	adds	r3, #1
 8001028:	4a15      	ldr	r2, [pc, #84]	; (8001080 <checkwarn+0x7c>)
 800102a:	6013      	str	r3, [r2, #0]
		}
		//warncount++;
		TurnOffLed();
 800102c:	f7ff ff8e 	bl	8000f4c <TurnOffLed>
		seven_segment_set_num(current_sense);
 8001030:	4b10      	ldr	r3, [pc, #64]	; (8001074 <checkwarn+0x70>)
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	4618      	mov	r0, r3
 8001036:	f7ff fd93 	bl	8000b60 <seven_segment_set_num>
		if (counter % 2 == 0) {

		}
//			seven_segment_set_num(0);
//		seven_refresh();
		is_critical = 1;
 800103a:	4b10      	ldr	r3, [pc, #64]	; (800107c <checkwarn+0x78>)
 800103c:	2201      	movs	r2, #1
 800103e:	601a      	str	r2, [r3, #0]

//	if (flag2 == 1 && current_sense * 20 < threshold + base_sense) {
//
//	}

}
 8001040:	e016      	b.n	8001070 <checkwarn+0x6c>
		is_critical = 0;
 8001042:	4b0e      	ldr	r3, [pc, #56]	; (800107c <checkwarn+0x78>)
 8001044:	2200      	movs	r2, #0
 8001046:	601a      	str	r2, [r3, #0]
		seven_segment.digits[0] = dim;
 8001048:	4b0e      	ldr	r3, [pc, #56]	; (8001084 <checkwarn+0x80>)
 800104a:	781b      	ldrb	r3, [r3, #0]
 800104c:	461a      	mov	r2, r3
 800104e:	4b0e      	ldr	r3, [pc, #56]	; (8001088 <checkwarn+0x84>)
 8001050:	641a      	str	r2, [r3, #64]	; 0x40
		seven_segment.digits[1] = light;
 8001052:	4b0e      	ldr	r3, [pc, #56]	; (800108c <checkwarn+0x88>)
 8001054:	781b      	ldrb	r3, [r3, #0]
 8001056:	461a      	mov	r2, r3
 8001058:	4b0b      	ldr	r3, [pc, #44]	; (8001088 <checkwarn+0x84>)
 800105a:	645a      	str	r2, [r3, #68]	; 0x44
		seven_segment.digits[2] = buzzer;
 800105c:	4b0c      	ldr	r3, [pc, #48]	; (8001090 <checkwarn+0x8c>)
 800105e:	781b      	ldrb	r3, [r3, #0]
 8001060:	461a      	mov	r2, r3
 8001062:	4b09      	ldr	r3, [pc, #36]	; (8001088 <checkwarn+0x84>)
 8001064:	649a      	str	r2, [r3, #72]	; 0x48
		seven_segment.digits[3] = warncount;
 8001066:	4b06      	ldr	r3, [pc, #24]	; (8001080 <checkwarn+0x7c>)
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	461a      	mov	r2, r3
 800106c:	4b06      	ldr	r3, [pc, #24]	; (8001088 <checkwarn+0x84>)
 800106e:	64da      	str	r2, [r3, #76]	; 0x4c
}
 8001070:	bf00      	nop
 8001072:	bd80      	pop	{r7, pc}
 8001074:	20000118 	.word	0x20000118
 8001078:	2000010c 	.word	0x2000010c
 800107c:	20000120 	.word	0x20000120
 8001080:	2000011c 	.word	0x2000011c
 8001084:	20000128 	.word	0x20000128
 8001088:	20000010 	.word	0x20000010
 800108c:	20000129 	.word	0x20000129
 8001090:	2000012a 	.word	0x2000012a

08001094 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8001094:	b580      	push	{r7, lr}
 8001096:	b084      	sub	sp, #16
 8001098:	af00      	add	r7, sp, #0
 800109a:	4603      	mov	r3, r0
 800109c:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == GPIO_PIN_13 && HAL_GetTick() - Debuns > 300) {
 800109e:	88fb      	ldrh	r3, [r7, #6]
 80010a0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80010a4:	d137      	bne.n	8001116 <HAL_GPIO_EXTI_Callback+0x82>
 80010a6:	f002 f90b 	bl	80032c0 <HAL_GetTick>
 80010aa:	4603      	mov	r3, r0
 80010ac:	4a8e      	ldr	r2, [pc, #568]	; (80012e8 <HAL_GPIO_EXTI_Callback+0x254>)
 80010ae:	6812      	ldr	r2, [r2, #0]
 80010b0:	1a9b      	subs	r3, r3, r2
 80010b2:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 80010b6:	d92e      	bls.n	8001116 <HAL_GPIO_EXTI_Callback+0x82>
		if (flag) {
 80010b8:	4b8c      	ldr	r3, [pc, #560]	; (80012ec <HAL_GPIO_EXTI_Callback+0x258>)
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d014      	beq.n	80010ea <HAL_GPIO_EXTI_Callback+0x56>
			Debuns = HAL_GetTick();
 80010c0:	f002 f8fe 	bl	80032c0 <HAL_GetTick>
 80010c4:	4603      	mov	r3, r0
 80010c6:	461a      	mov	r2, r3
 80010c8:	4b87      	ldr	r3, [pc, #540]	; (80012e8 <HAL_GPIO_EXTI_Callback+0x254>)
 80010ca:	601a      	str	r2, [r3, #0]
			select = (select + 1) % 3;
 80010cc:	4b88      	ldr	r3, [pc, #544]	; (80012f0 <HAL_GPIO_EXTI_Callback+0x25c>)
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	1c59      	adds	r1, r3, #1
 80010d2:	4b88      	ldr	r3, [pc, #544]	; (80012f4 <HAL_GPIO_EXTI_Callback+0x260>)
 80010d4:	fb83 3201 	smull	r3, r2, r3, r1
 80010d8:	17cb      	asrs	r3, r1, #31
 80010da:	1ad2      	subs	r2, r2, r3
 80010dc:	4613      	mov	r3, r2
 80010de:	005b      	lsls	r3, r3, #1
 80010e0:	4413      	add	r3, r2
 80010e2:	1aca      	subs	r2, r1, r3
 80010e4:	4b82      	ldr	r3, [pc, #520]	; (80012f0 <HAL_GPIO_EXTI_Callback+0x25c>)
 80010e6:	601a      	str	r2, [r3, #0]
		if (flag) {
 80010e8:	e20e      	b.n	8001508 <HAL_GPIO_EXTI_Callback+0x474>

		} else {
			TurnOffLed();
 80010ea:	f7ff ff2f 	bl	8000f4c <TurnOffLed>
			flag = !flag;
 80010ee:	4b7f      	ldr	r3, [pc, #508]	; (80012ec <HAL_GPIO_EXTI_Callback+0x258>)
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	bf0c      	ite	eq
 80010f6:	2301      	moveq	r3, #1
 80010f8:	2300      	movne	r3, #0
 80010fa:	b2db      	uxtb	r3, r3
 80010fc:	461a      	mov	r2, r3
 80010fe:	4b7b      	ldr	r3, [pc, #492]	; (80012ec <HAL_GPIO_EXTI_Callback+0x258>)
 8001100:	601a      	str	r2, [r3, #0]
			threshold = threshold + base_sense;
 8001102:	4b7d      	ldr	r3, [pc, #500]	; (80012f8 <HAL_GPIO_EXTI_Callback+0x264>)
 8001104:	681a      	ldr	r2, [r3, #0]
 8001106:	4b7d      	ldr	r3, [pc, #500]	; (80012fc <HAL_GPIO_EXTI_Callback+0x268>)
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	4413      	add	r3, r2
 800110c:	4a7a      	ldr	r2, [pc, #488]	; (80012f8 <HAL_GPIO_EXTI_Callback+0x264>)
 800110e:	6013      	str	r3, [r2, #0]
			programInit();
 8001110:	f7ff fe0a 	bl	8000d28 <programInit>
		if (flag) {
 8001114:	e1f8      	b.n	8001508 <HAL_GPIO_EXTI_Callback+0x474>
		}

	} else if (GPIO_Pin == GPIO_PIN_14 && HAL_GetTick() - Debuns > 300) {
 8001116:	88fb      	ldrh	r3, [r7, #6]
 8001118:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800111c:	f040 810a 	bne.w	8001334 <HAL_GPIO_EXTI_Callback+0x2a0>
 8001120:	f002 f8ce 	bl	80032c0 <HAL_GetTick>
 8001124:	4603      	mov	r3, r0
 8001126:	4a70      	ldr	r2, [pc, #448]	; (80012e8 <HAL_GPIO_EXTI_Callback+0x254>)
 8001128:	6812      	ldr	r2, [r2, #0]
 800112a:	1a9b      	subs	r3, r3, r2
 800112c:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8001130:	f240 8100 	bls.w	8001334 <HAL_GPIO_EXTI_Callback+0x2a0>
		Debuns = HAL_GetTick();
 8001134:	f002 f8c4 	bl	80032c0 <HAL_GetTick>
 8001138:	4603      	mov	r3, r0
 800113a:	461a      	mov	r2, r3
 800113c:	4b6a      	ldr	r3, [pc, #424]	; (80012e8 <HAL_GPIO_EXTI_Callback+0x254>)
 800113e:	601a      	str	r2, [r3, #0]
		if (select == 0) {
 8001140:	4b6b      	ldr	r3, [pc, #428]	; (80012f0 <HAL_GPIO_EXTI_Callback+0x25c>)
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	2b00      	cmp	r3, #0
 8001146:	d145      	bne.n	80011d4 <HAL_GPIO_EXTI_Callback+0x140>
			seven_segment.digits[select] = (seven_segment.digits[select] + 1)
 8001148:	4b69      	ldr	r3, [pc, #420]	; (80012f0 <HAL_GPIO_EXTI_Callback+0x25c>)
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	4a6c      	ldr	r2, [pc, #432]	; (8001300 <HAL_GPIO_EXTI_Callback+0x26c>)
 800114e:	3310      	adds	r3, #16
 8001150:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001154:	1c59      	adds	r1, r3, #1
 8001156:	4b66      	ldr	r3, [pc, #408]	; (80012f0 <HAL_GPIO_EXTI_Callback+0x25c>)
 8001158:	6818      	ldr	r0, [r3, #0]
					% 10;
 800115a:	4b6a      	ldr	r3, [pc, #424]	; (8001304 <HAL_GPIO_EXTI_Callback+0x270>)
 800115c:	fba3 2301 	umull	r2, r3, r3, r1
 8001160:	08da      	lsrs	r2, r3, #3
 8001162:	4613      	mov	r3, r2
 8001164:	009b      	lsls	r3, r3, #2
 8001166:	4413      	add	r3, r2
 8001168:	005b      	lsls	r3, r3, #1
 800116a:	1aca      	subs	r2, r1, r3
			seven_segment.digits[select] = (seven_segment.digits[select] + 1)
 800116c:	4964      	ldr	r1, [pc, #400]	; (8001300 <HAL_GPIO_EXTI_Callback+0x26c>)
 800116e:	f100 0310 	add.w	r3, r0, #16
 8001172:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			dim = seven_segment.digits[select];
 8001176:	4b5e      	ldr	r3, [pc, #376]	; (80012f0 <HAL_GPIO_EXTI_Callback+0x25c>)
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	4a61      	ldr	r2, [pc, #388]	; (8001300 <HAL_GPIO_EXTI_Callback+0x26c>)
 800117c:	3310      	adds	r3, #16
 800117e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001182:	b2da      	uxtb	r2, r3
 8001184:	4b60      	ldr	r3, [pc, #384]	; (8001308 <HAL_GPIO_EXTI_Callback+0x274>)
 8001186:	701a      	strb	r2, [r3, #0]

			if (seven_segment.digits[select] != 0) {
 8001188:	4b59      	ldr	r3, [pc, #356]	; (80012f0 <HAL_GPIO_EXTI_Callback+0x25c>)
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	4a5c      	ldr	r2, [pc, #368]	; (8001300 <HAL_GPIO_EXTI_Callback+0x26c>)
 800118e:	3310      	adds	r3, #16
 8001190:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001194:	2b00      	cmp	r3, #0
 8001196:	d00e      	beq.n	80011b6 <HAL_GPIO_EXTI_Callback+0x122>
				HAL_UART_Transmit(&huart1, "\n[INFO] DimStep increased\n", 26,
 8001198:	f04f 33ff 	mov.w	r3, #4294967295
 800119c:	221a      	movs	r2, #26
 800119e:	495b      	ldr	r1, [pc, #364]	; (800130c <HAL_GPIO_EXTI_Callback+0x278>)
 80011a0:	485b      	ldr	r0, [pc, #364]	; (8001310 <HAL_GPIO_EXTI_Callback+0x27c>)
 80011a2:	f007 fb89 	bl	80088b8 <HAL_UART_Transmit>
				HAL_MAX_DELAY);
				HAL_UART_Transmit(&huart2, "\n[INFO] DimStep increased\n", 26,
 80011a6:	f04f 33ff 	mov.w	r3, #4294967295
 80011aa:	221a      	movs	r2, #26
 80011ac:	4957      	ldr	r1, [pc, #348]	; (800130c <HAL_GPIO_EXTI_Callback+0x278>)
 80011ae:	4859      	ldr	r0, [pc, #356]	; (8001314 <HAL_GPIO_EXTI_Callback+0x280>)
 80011b0:	f007 fb82 	bl	80088b8 <HAL_UART_Transmit>
 80011b4:	e094      	b.n	80012e0 <HAL_GPIO_EXTI_Callback+0x24c>
				HAL_MAX_DELAY);
			} else {
				HAL_UART_Transmit(&huart1, "\n[INFO] DimStep Decreased\n", 26,
 80011b6:	f04f 33ff 	mov.w	r3, #4294967295
 80011ba:	221a      	movs	r2, #26
 80011bc:	4956      	ldr	r1, [pc, #344]	; (8001318 <HAL_GPIO_EXTI_Callback+0x284>)
 80011be:	4854      	ldr	r0, [pc, #336]	; (8001310 <HAL_GPIO_EXTI_Callback+0x27c>)
 80011c0:	f007 fb7a 	bl	80088b8 <HAL_UART_Transmit>
				HAL_MAX_DELAY);
				HAL_UART_Transmit(&huart2, "\n[INFO] DimStep Decreased\n", 26,
 80011c4:	f04f 33ff 	mov.w	r3, #4294967295
 80011c8:	221a      	movs	r2, #26
 80011ca:	4953      	ldr	r1, [pc, #332]	; (8001318 <HAL_GPIO_EXTI_Callback+0x284>)
 80011cc:	4851      	ldr	r0, [pc, #324]	; (8001314 <HAL_GPIO_EXTI_Callback+0x280>)
 80011ce:	f007 fb73 	bl	80088b8 <HAL_UART_Transmit>
 80011d2:	e085      	b.n	80012e0 <HAL_GPIO_EXTI_Callback+0x24c>
				HAL_MAX_DELAY);
			}
		} else if (select == 1) {
 80011d4:	4b46      	ldr	r3, [pc, #280]	; (80012f0 <HAL_GPIO_EXTI_Callback+0x25c>)
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	2b01      	cmp	r3, #1
 80011da:	d144      	bne.n	8001266 <HAL_GPIO_EXTI_Callback+0x1d2>
			seven_segment.digits[select] = (seven_segment.digits[select] + 1)
 80011dc:	4b44      	ldr	r3, [pc, #272]	; (80012f0 <HAL_GPIO_EXTI_Callback+0x25c>)
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	4a47      	ldr	r2, [pc, #284]	; (8001300 <HAL_GPIO_EXTI_Callback+0x26c>)
 80011e2:	3310      	adds	r3, #16
 80011e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011e8:	1c59      	adds	r1, r3, #1
 80011ea:	4b41      	ldr	r3, [pc, #260]	; (80012f0 <HAL_GPIO_EXTI_Callback+0x25c>)
 80011ec:	6818      	ldr	r0, [r3, #0]
					% 5;
 80011ee:	4b45      	ldr	r3, [pc, #276]	; (8001304 <HAL_GPIO_EXTI_Callback+0x270>)
 80011f0:	fba3 2301 	umull	r2, r3, r3, r1
 80011f4:	089a      	lsrs	r2, r3, #2
 80011f6:	4613      	mov	r3, r2
 80011f8:	009b      	lsls	r3, r3, #2
 80011fa:	4413      	add	r3, r2
 80011fc:	1aca      	subs	r2, r1, r3
			seven_segment.digits[select] = (seven_segment.digits[select] + 1)
 80011fe:	4940      	ldr	r1, [pc, #256]	; (8001300 <HAL_GPIO_EXTI_Callback+0x26c>)
 8001200:	f100 0310 	add.w	r3, r0, #16
 8001204:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			light = seven_segment.digits[select];
 8001208:	4b39      	ldr	r3, [pc, #228]	; (80012f0 <HAL_GPIO_EXTI_Callback+0x25c>)
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	4a3c      	ldr	r2, [pc, #240]	; (8001300 <HAL_GPIO_EXTI_Callback+0x26c>)
 800120e:	3310      	adds	r3, #16
 8001210:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001214:	b2da      	uxtb	r2, r3
 8001216:	4b41      	ldr	r3, [pc, #260]	; (800131c <HAL_GPIO_EXTI_Callback+0x288>)
 8001218:	701a      	strb	r2, [r3, #0]
			if (seven_segment.digits[select] != 0) {
 800121a:	4b35      	ldr	r3, [pc, #212]	; (80012f0 <HAL_GPIO_EXTI_Callback+0x25c>)
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	4a38      	ldr	r2, [pc, #224]	; (8001300 <HAL_GPIO_EXTI_Callback+0x26c>)
 8001220:	3310      	adds	r3, #16
 8001222:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001226:	2b00      	cmp	r3, #0
 8001228:	d00e      	beq.n	8001248 <HAL_GPIO_EXTI_Callback+0x1b4>
				HAL_UART_Transmit(&huart1, "\n[INFO] LIGHTS increased\n", 25,
 800122a:	f04f 33ff 	mov.w	r3, #4294967295
 800122e:	2219      	movs	r2, #25
 8001230:	493b      	ldr	r1, [pc, #236]	; (8001320 <HAL_GPIO_EXTI_Callback+0x28c>)
 8001232:	4837      	ldr	r0, [pc, #220]	; (8001310 <HAL_GPIO_EXTI_Callback+0x27c>)
 8001234:	f007 fb40 	bl	80088b8 <HAL_UART_Transmit>
				HAL_MAX_DELAY);
				HAL_UART_Transmit(&huart2, "\n[INFO] LIGHTS increased\n", 25,
 8001238:	f04f 33ff 	mov.w	r3, #4294967295
 800123c:	2219      	movs	r2, #25
 800123e:	4938      	ldr	r1, [pc, #224]	; (8001320 <HAL_GPIO_EXTI_Callback+0x28c>)
 8001240:	4834      	ldr	r0, [pc, #208]	; (8001314 <HAL_GPIO_EXTI_Callback+0x280>)
 8001242:	f007 fb39 	bl	80088b8 <HAL_UART_Transmit>
 8001246:	e04b      	b.n	80012e0 <HAL_GPIO_EXTI_Callback+0x24c>
				HAL_MAX_DELAY);
			} else {
				HAL_UART_Transmit(&huart1, "\n[INFO] LIGHTS Decreased\n", 25,
 8001248:	f04f 33ff 	mov.w	r3, #4294967295
 800124c:	2219      	movs	r2, #25
 800124e:	4935      	ldr	r1, [pc, #212]	; (8001324 <HAL_GPIO_EXTI_Callback+0x290>)
 8001250:	482f      	ldr	r0, [pc, #188]	; (8001310 <HAL_GPIO_EXTI_Callback+0x27c>)
 8001252:	f007 fb31 	bl	80088b8 <HAL_UART_Transmit>
				HAL_MAX_DELAY);
				HAL_UART_Transmit(&huart2, "\n[INFO] LIGHTS Decreased\n", 25,
 8001256:	f04f 33ff 	mov.w	r3, #4294967295
 800125a:	2219      	movs	r2, #25
 800125c:	4931      	ldr	r1, [pc, #196]	; (8001324 <HAL_GPIO_EXTI_Callback+0x290>)
 800125e:	482d      	ldr	r0, [pc, #180]	; (8001314 <HAL_GPIO_EXTI_Callback+0x280>)
 8001260:	f007 fb2a 	bl	80088b8 <HAL_UART_Transmit>
 8001264:	e03c      	b.n	80012e0 <HAL_GPIO_EXTI_Callback+0x24c>
				HAL_MAX_DELAY);
			}

		} else {
			seven_segment.digits[select] = (seven_segment.digits[select] + 1)
 8001266:	4b22      	ldr	r3, [pc, #136]	; (80012f0 <HAL_GPIO_EXTI_Callback+0x25c>)
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	4a25      	ldr	r2, [pc, #148]	; (8001300 <HAL_GPIO_EXTI_Callback+0x26c>)
 800126c:	3310      	adds	r3, #16
 800126e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001272:	1c5a      	adds	r2, r3, #1
 8001274:	4b1e      	ldr	r3, [pc, #120]	; (80012f0 <HAL_GPIO_EXTI_Callback+0x25c>)
 8001276:	681b      	ldr	r3, [r3, #0]
					% 4;
 8001278:	f002 0203 	and.w	r2, r2, #3
			seven_segment.digits[select] = (seven_segment.digits[select] + 1)
 800127c:	4920      	ldr	r1, [pc, #128]	; (8001300 <HAL_GPIO_EXTI_Callback+0x26c>)
 800127e:	3310      	adds	r3, #16
 8001280:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			buzzer = seven_segment.digits[select];
 8001284:	4b1a      	ldr	r3, [pc, #104]	; (80012f0 <HAL_GPIO_EXTI_Callback+0x25c>)
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	4a1d      	ldr	r2, [pc, #116]	; (8001300 <HAL_GPIO_EXTI_Callback+0x26c>)
 800128a:	3310      	adds	r3, #16
 800128c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001290:	b2da      	uxtb	r2, r3
 8001292:	4b25      	ldr	r3, [pc, #148]	; (8001328 <HAL_GPIO_EXTI_Callback+0x294>)
 8001294:	701a      	strb	r2, [r3, #0]
			if (seven_segment.digits[select] != 0) {
 8001296:	4b16      	ldr	r3, [pc, #88]	; (80012f0 <HAL_GPIO_EXTI_Callback+0x25c>)
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	4a19      	ldr	r2, [pc, #100]	; (8001300 <HAL_GPIO_EXTI_Callback+0x26c>)
 800129c:	3310      	adds	r3, #16
 800129e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d00e      	beq.n	80012c4 <HAL_GPIO_EXTI_Callback+0x230>
				HAL_UART_Transmit(&huart1, "\n[INFO] WAVE increased\n", 23,
 80012a6:	f04f 33ff 	mov.w	r3, #4294967295
 80012aa:	2217      	movs	r2, #23
 80012ac:	491f      	ldr	r1, [pc, #124]	; (800132c <HAL_GPIO_EXTI_Callback+0x298>)
 80012ae:	4818      	ldr	r0, [pc, #96]	; (8001310 <HAL_GPIO_EXTI_Callback+0x27c>)
 80012b0:	f007 fb02 	bl	80088b8 <HAL_UART_Transmit>
				HAL_MAX_DELAY);
				HAL_UART_Transmit(&huart2, "\n[INFO] WAVE increased\n", 23,
 80012b4:	f04f 33ff 	mov.w	r3, #4294967295
 80012b8:	2217      	movs	r2, #23
 80012ba:	491c      	ldr	r1, [pc, #112]	; (800132c <HAL_GPIO_EXTI_Callback+0x298>)
 80012bc:	4815      	ldr	r0, [pc, #84]	; (8001314 <HAL_GPIO_EXTI_Callback+0x280>)
 80012be:	f007 fafb 	bl	80088b8 <HAL_UART_Transmit>
 80012c2:	e00d      	b.n	80012e0 <HAL_GPIO_EXTI_Callback+0x24c>
				HAL_MAX_DELAY);
			} else {
				HAL_UART_Transmit(&huart1, "\n[INFO] WAVE Decreased\n", 23,
 80012c4:	f04f 33ff 	mov.w	r3, #4294967295
 80012c8:	2217      	movs	r2, #23
 80012ca:	4919      	ldr	r1, [pc, #100]	; (8001330 <HAL_GPIO_EXTI_Callback+0x29c>)
 80012cc:	4810      	ldr	r0, [pc, #64]	; (8001310 <HAL_GPIO_EXTI_Callback+0x27c>)
 80012ce:	f007 faf3 	bl	80088b8 <HAL_UART_Transmit>
				HAL_MAX_DELAY);
				HAL_UART_Transmit(&huart2, "\n[INFO] WAVE Decreased\n", 23,
 80012d2:	f04f 33ff 	mov.w	r3, #4294967295
 80012d6:	2217      	movs	r2, #23
 80012d8:	4915      	ldr	r1, [pc, #84]	; (8001330 <HAL_GPIO_EXTI_Callback+0x29c>)
 80012da:	480e      	ldr	r0, [pc, #56]	; (8001314 <HAL_GPIO_EXTI_Callback+0x280>)
 80012dc:	f007 faec 	bl	80088b8 <HAL_UART_Transmit>
				HAL_MAX_DELAY);
			}
		}
		printTime();
 80012e0:	f7ff fe6a 	bl	8000fb8 <printTime>
 80012e4:	e110      	b.n	8001508 <HAL_GPIO_EXTI_Callback+0x474>
 80012e6:	bf00      	nop
 80012e8:	200000f8 	.word	0x200000f8
 80012ec:	20000108 	.word	0x20000108
 80012f0:	200000fc 	.word	0x200000fc
 80012f4:	55555556 	.word	0x55555556
 80012f8:	2000010c 	.word	0x2000010c
 80012fc:	20000114 	.word	0x20000114
 8001300:	20000010 	.word	0x20000010
 8001304:	cccccccd 	.word	0xcccccccd
 8001308:	20000128 	.word	0x20000128
 800130c:	0800a788 	.word	0x0800a788
 8001310:	200003ec 	.word	0x200003ec
 8001314:	20000474 	.word	0x20000474
 8001318:	0800a7a4 	.word	0x0800a7a4
 800131c:	20000129 	.word	0x20000129
 8001320:	0800a7c0 	.word	0x0800a7c0
 8001324:	0800a7dc 	.word	0x0800a7dc
 8001328:	2000012a 	.word	0x2000012a
 800132c:	0800a7f8 	.word	0x0800a7f8
 8001330:	0800a810 	.word	0x0800a810
	} else if (GPIO_Pin == GPIO_PIN_15 && HAL_GetTick() - Debuns > 300) {
 8001334:	88fb      	ldrh	r3, [r7, #6]
 8001336:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800133a:	f040 80e5 	bne.w	8001508 <HAL_GPIO_EXTI_Callback+0x474>
 800133e:	f001 ffbf 	bl	80032c0 <HAL_GetTick>
 8001342:	4603      	mov	r3, r0
 8001344:	4a72      	ldr	r2, [pc, #456]	; (8001510 <HAL_GPIO_EXTI_Callback+0x47c>)
 8001346:	6812      	ldr	r2, [r2, #0]
 8001348:	1a9b      	subs	r3, r3, r2
 800134a:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800134e:	f240 80db 	bls.w	8001508 <HAL_GPIO_EXTI_Callback+0x474>
		Debuns = HAL_GetTick();
 8001352:	f001 ffb5 	bl	80032c0 <HAL_GetTick>
 8001356:	4603      	mov	r3, r0
 8001358:	461a      	mov	r2, r3
 800135a:	4b6d      	ldr	r3, [pc, #436]	; (8001510 <HAL_GPIO_EXTI_Callback+0x47c>)
 800135c:	601a      	str	r2, [r3, #0]
		int k = seven_segment.digits[select] - 1;
 800135e:	4b6d      	ldr	r3, [pc, #436]	; (8001514 <HAL_GPIO_EXTI_Callback+0x480>)
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	4a6d      	ldr	r2, [pc, #436]	; (8001518 <HAL_GPIO_EXTI_Callback+0x484>)
 8001364:	3310      	adds	r3, #16
 8001366:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800136a:	3b01      	subs	r3, #1
 800136c:	60fb      	str	r3, [r7, #12]
		if (select == 1) {
 800136e:	4b69      	ldr	r3, [pc, #420]	; (8001514 <HAL_GPIO_EXTI_Callback+0x480>)
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	2b01      	cmp	r3, #1
 8001374:	d140      	bne.n	80013f8 <HAL_GPIO_EXTI_Callback+0x364>
			if (k < 0) {
 8001376:	68fb      	ldr	r3, [r7, #12]
 8001378:	2b00      	cmp	r3, #0
 800137a:	da1e      	bge.n	80013ba <HAL_GPIO_EXTI_Callback+0x326>
				seven_segment.digits[select] = 4;
 800137c:	4b65      	ldr	r3, [pc, #404]	; (8001514 <HAL_GPIO_EXTI_Callback+0x480>)
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	4a65      	ldr	r2, [pc, #404]	; (8001518 <HAL_GPIO_EXTI_Callback+0x484>)
 8001382:	3310      	adds	r3, #16
 8001384:	2104      	movs	r1, #4
 8001386:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				light = seven_segment.digits[select];
 800138a:	4b62      	ldr	r3, [pc, #392]	; (8001514 <HAL_GPIO_EXTI_Callback+0x480>)
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	4a62      	ldr	r2, [pc, #392]	; (8001518 <HAL_GPIO_EXTI_Callback+0x484>)
 8001390:	3310      	adds	r3, #16
 8001392:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001396:	b2da      	uxtb	r2, r3
 8001398:	4b60      	ldr	r3, [pc, #384]	; (800151c <HAL_GPIO_EXTI_Callback+0x488>)
 800139a:	701a      	strb	r2, [r3, #0]
				HAL_UART_Transmit(&huart1, "\n[INFO] LIGHT INCREASED \n", 25,
 800139c:	f04f 33ff 	mov.w	r3, #4294967295
 80013a0:	2219      	movs	r2, #25
 80013a2:	495f      	ldr	r1, [pc, #380]	; (8001520 <HAL_GPIO_EXTI_Callback+0x48c>)
 80013a4:	485f      	ldr	r0, [pc, #380]	; (8001524 <HAL_GPIO_EXTI_Callback+0x490>)
 80013a6:	f007 fa87 	bl	80088b8 <HAL_UART_Transmit>
				HAL_MAX_DELAY);
				HAL_UART_Transmit(&huart2, "\n[INFO] LIGHT INCREASED \n", 25,
 80013aa:	f04f 33ff 	mov.w	r3, #4294967295
 80013ae:	2219      	movs	r2, #25
 80013b0:	495b      	ldr	r1, [pc, #364]	; (8001520 <HAL_GPIO_EXTI_Callback+0x48c>)
 80013b2:	485d      	ldr	r0, [pc, #372]	; (8001528 <HAL_GPIO_EXTI_Callback+0x494>)
 80013b4:	f007 fa80 	bl	80088b8 <HAL_UART_Transmit>
 80013b8:	e0a3      	b.n	8001502 <HAL_GPIO_EXTI_Callback+0x46e>
				HAL_MAX_DELAY);
			} else {
				seven_segment.digits[select] = k;
 80013ba:	4b56      	ldr	r3, [pc, #344]	; (8001514 <HAL_GPIO_EXTI_Callback+0x480>)
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	68fa      	ldr	r2, [r7, #12]
 80013c0:	4955      	ldr	r1, [pc, #340]	; (8001518 <HAL_GPIO_EXTI_Callback+0x484>)
 80013c2:	3310      	adds	r3, #16
 80013c4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				light = seven_segment.digits[select];
 80013c8:	4b52      	ldr	r3, [pc, #328]	; (8001514 <HAL_GPIO_EXTI_Callback+0x480>)
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	4a52      	ldr	r2, [pc, #328]	; (8001518 <HAL_GPIO_EXTI_Callback+0x484>)
 80013ce:	3310      	adds	r3, #16
 80013d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013d4:	b2da      	uxtb	r2, r3
 80013d6:	4b51      	ldr	r3, [pc, #324]	; (800151c <HAL_GPIO_EXTI_Callback+0x488>)
 80013d8:	701a      	strb	r2, [r3, #0]
				HAL_UART_Transmit(&huart1, "\n[INFO] LIGHT Decreased \n", 25,
 80013da:	f04f 33ff 	mov.w	r3, #4294967295
 80013de:	2219      	movs	r2, #25
 80013e0:	4952      	ldr	r1, [pc, #328]	; (800152c <HAL_GPIO_EXTI_Callback+0x498>)
 80013e2:	4850      	ldr	r0, [pc, #320]	; (8001524 <HAL_GPIO_EXTI_Callback+0x490>)
 80013e4:	f007 fa68 	bl	80088b8 <HAL_UART_Transmit>
				HAL_MAX_DELAY);
				HAL_UART_Transmit(&huart2, "\n[INFO] LIGHT Decreased \n", 25,
 80013e8:	f04f 33ff 	mov.w	r3, #4294967295
 80013ec:	2219      	movs	r2, #25
 80013ee:	494f      	ldr	r1, [pc, #316]	; (800152c <HAL_GPIO_EXTI_Callback+0x498>)
 80013f0:	484d      	ldr	r0, [pc, #308]	; (8001528 <HAL_GPIO_EXTI_Callback+0x494>)
 80013f2:	f007 fa61 	bl	80088b8 <HAL_UART_Transmit>
 80013f6:	e084      	b.n	8001502 <HAL_GPIO_EXTI_Callback+0x46e>
				HAL_MAX_DELAY);
			}

		} else if (select == 2) {
 80013f8:	4b46      	ldr	r3, [pc, #280]	; (8001514 <HAL_GPIO_EXTI_Callback+0x480>)
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	2b02      	cmp	r3, #2
 80013fe:	d140      	bne.n	8001482 <HAL_GPIO_EXTI_Callback+0x3ee>
			if (k < 0) {
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	2b00      	cmp	r3, #0
 8001404:	da1e      	bge.n	8001444 <HAL_GPIO_EXTI_Callback+0x3b0>
				seven_segment.digits[select] = 3;
 8001406:	4b43      	ldr	r3, [pc, #268]	; (8001514 <HAL_GPIO_EXTI_Callback+0x480>)
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	4a43      	ldr	r2, [pc, #268]	; (8001518 <HAL_GPIO_EXTI_Callback+0x484>)
 800140c:	3310      	adds	r3, #16
 800140e:	2103      	movs	r1, #3
 8001410:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				buzzer = seven_segment.digits[select];
 8001414:	4b3f      	ldr	r3, [pc, #252]	; (8001514 <HAL_GPIO_EXTI_Callback+0x480>)
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	4a3f      	ldr	r2, [pc, #252]	; (8001518 <HAL_GPIO_EXTI_Callback+0x484>)
 800141a:	3310      	adds	r3, #16
 800141c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001420:	b2da      	uxtb	r2, r3
 8001422:	4b43      	ldr	r3, [pc, #268]	; (8001530 <HAL_GPIO_EXTI_Callback+0x49c>)
 8001424:	701a      	strb	r2, [r3, #0]
				HAL_UART_Transmit(&huart1, "\n[INFO] WAVE INCREASED \n", 25,
 8001426:	f04f 33ff 	mov.w	r3, #4294967295
 800142a:	2219      	movs	r2, #25
 800142c:	4941      	ldr	r1, [pc, #260]	; (8001534 <HAL_GPIO_EXTI_Callback+0x4a0>)
 800142e:	483d      	ldr	r0, [pc, #244]	; (8001524 <HAL_GPIO_EXTI_Callback+0x490>)
 8001430:	f007 fa42 	bl	80088b8 <HAL_UART_Transmit>
				HAL_MAX_DELAY);
				HAL_UART_Transmit(&huart2, "\n[INFO] WAVE INCREASED \n", 25,
 8001434:	f04f 33ff 	mov.w	r3, #4294967295
 8001438:	2219      	movs	r2, #25
 800143a:	493e      	ldr	r1, [pc, #248]	; (8001534 <HAL_GPIO_EXTI_Callback+0x4a0>)
 800143c:	483a      	ldr	r0, [pc, #232]	; (8001528 <HAL_GPIO_EXTI_Callback+0x494>)
 800143e:	f007 fa3b 	bl	80088b8 <HAL_UART_Transmit>
 8001442:	e05e      	b.n	8001502 <HAL_GPIO_EXTI_Callback+0x46e>
				HAL_MAX_DELAY);
			} else {
				seven_segment.digits[select] = k;
 8001444:	4b33      	ldr	r3, [pc, #204]	; (8001514 <HAL_GPIO_EXTI_Callback+0x480>)
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	68fa      	ldr	r2, [r7, #12]
 800144a:	4933      	ldr	r1, [pc, #204]	; (8001518 <HAL_GPIO_EXTI_Callback+0x484>)
 800144c:	3310      	adds	r3, #16
 800144e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				buzzer = seven_segment.digits[select];
 8001452:	4b30      	ldr	r3, [pc, #192]	; (8001514 <HAL_GPIO_EXTI_Callback+0x480>)
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	4a30      	ldr	r2, [pc, #192]	; (8001518 <HAL_GPIO_EXTI_Callback+0x484>)
 8001458:	3310      	adds	r3, #16
 800145a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800145e:	b2da      	uxtb	r2, r3
 8001460:	4b33      	ldr	r3, [pc, #204]	; (8001530 <HAL_GPIO_EXTI_Callback+0x49c>)
 8001462:	701a      	strb	r2, [r3, #0]
				HAL_UART_Transmit(&huart1, "\n[INFO] WAVE Decreased \n", 25,
 8001464:	f04f 33ff 	mov.w	r3, #4294967295
 8001468:	2219      	movs	r2, #25
 800146a:	4933      	ldr	r1, [pc, #204]	; (8001538 <HAL_GPIO_EXTI_Callback+0x4a4>)
 800146c:	482d      	ldr	r0, [pc, #180]	; (8001524 <HAL_GPIO_EXTI_Callback+0x490>)
 800146e:	f007 fa23 	bl	80088b8 <HAL_UART_Transmit>
				HAL_MAX_DELAY);
				HAL_UART_Transmit(&huart2, "\n[INFO] WAVE Decreased \n", 25,
 8001472:	f04f 33ff 	mov.w	r3, #4294967295
 8001476:	2219      	movs	r2, #25
 8001478:	492f      	ldr	r1, [pc, #188]	; (8001538 <HAL_GPIO_EXTI_Callback+0x4a4>)
 800147a:	482b      	ldr	r0, [pc, #172]	; (8001528 <HAL_GPIO_EXTI_Callback+0x494>)
 800147c:	f007 fa1c 	bl	80088b8 <HAL_UART_Transmit>
 8001480:	e03f      	b.n	8001502 <HAL_GPIO_EXTI_Callback+0x46e>
				HAL_MAX_DELAY);
			}
		} else {
			if (k < 0) {
 8001482:	68fb      	ldr	r3, [r7, #12]
 8001484:	2b00      	cmp	r3, #0
 8001486:	da1e      	bge.n	80014c6 <HAL_GPIO_EXTI_Callback+0x432>
				seven_segment.digits[select] = 9;
 8001488:	4b22      	ldr	r3, [pc, #136]	; (8001514 <HAL_GPIO_EXTI_Callback+0x480>)
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	4a22      	ldr	r2, [pc, #136]	; (8001518 <HAL_GPIO_EXTI_Callback+0x484>)
 800148e:	3310      	adds	r3, #16
 8001490:	2109      	movs	r1, #9
 8001492:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				dim = seven_segment.digits[select];
 8001496:	4b1f      	ldr	r3, [pc, #124]	; (8001514 <HAL_GPIO_EXTI_Callback+0x480>)
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	4a1f      	ldr	r2, [pc, #124]	; (8001518 <HAL_GPIO_EXTI_Callback+0x484>)
 800149c:	3310      	adds	r3, #16
 800149e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014a2:	b2da      	uxtb	r2, r3
 80014a4:	4b25      	ldr	r3, [pc, #148]	; (800153c <HAL_GPIO_EXTI_Callback+0x4a8>)
 80014a6:	701a      	strb	r2, [r3, #0]
				HAL_UART_Transmit(&huart1, "\n[INFO] DIMSTEP INCREASED \n", 25,
 80014a8:	f04f 33ff 	mov.w	r3, #4294967295
 80014ac:	2219      	movs	r2, #25
 80014ae:	4924      	ldr	r1, [pc, #144]	; (8001540 <HAL_GPIO_EXTI_Callback+0x4ac>)
 80014b0:	481c      	ldr	r0, [pc, #112]	; (8001524 <HAL_GPIO_EXTI_Callback+0x490>)
 80014b2:	f007 fa01 	bl	80088b8 <HAL_UART_Transmit>
				HAL_MAX_DELAY);
				HAL_UART_Transmit(&huart2, "\n[INFO] DIMSTEP INCREASED \n", 25,
 80014b6:	f04f 33ff 	mov.w	r3, #4294967295
 80014ba:	2219      	movs	r2, #25
 80014bc:	4920      	ldr	r1, [pc, #128]	; (8001540 <HAL_GPIO_EXTI_Callback+0x4ac>)
 80014be:	481a      	ldr	r0, [pc, #104]	; (8001528 <HAL_GPIO_EXTI_Callback+0x494>)
 80014c0:	f007 f9fa 	bl	80088b8 <HAL_UART_Transmit>
 80014c4:	e01d      	b.n	8001502 <HAL_GPIO_EXTI_Callback+0x46e>
				HAL_MAX_DELAY);
			} else {
				seven_segment.digits[select] = k;
 80014c6:	4b13      	ldr	r3, [pc, #76]	; (8001514 <HAL_GPIO_EXTI_Callback+0x480>)
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	68fa      	ldr	r2, [r7, #12]
 80014cc:	4912      	ldr	r1, [pc, #72]	; (8001518 <HAL_GPIO_EXTI_Callback+0x484>)
 80014ce:	3310      	adds	r3, #16
 80014d0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				dim = seven_segment.digits[select];
 80014d4:	4b0f      	ldr	r3, [pc, #60]	; (8001514 <HAL_GPIO_EXTI_Callback+0x480>)
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	4a0f      	ldr	r2, [pc, #60]	; (8001518 <HAL_GPIO_EXTI_Callback+0x484>)
 80014da:	3310      	adds	r3, #16
 80014dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014e0:	b2da      	uxtb	r2, r3
 80014e2:	4b16      	ldr	r3, [pc, #88]	; (800153c <HAL_GPIO_EXTI_Callback+0x4a8>)
 80014e4:	701a      	strb	r2, [r3, #0]
				HAL_UART_Transmit(&huart1, "\n[INFO] DIMSTEP Decreased \n", 25,
 80014e6:	f04f 33ff 	mov.w	r3, #4294967295
 80014ea:	2219      	movs	r2, #25
 80014ec:	4915      	ldr	r1, [pc, #84]	; (8001544 <HAL_GPIO_EXTI_Callback+0x4b0>)
 80014ee:	480d      	ldr	r0, [pc, #52]	; (8001524 <HAL_GPIO_EXTI_Callback+0x490>)
 80014f0:	f007 f9e2 	bl	80088b8 <HAL_UART_Transmit>
				HAL_MAX_DELAY);
				HAL_UART_Transmit(&huart2, "\n[INFO] DIMSTEP Decreased \n", 25,
 80014f4:	f04f 33ff 	mov.w	r3, #4294967295
 80014f8:	2219      	movs	r2, #25
 80014fa:	4912      	ldr	r1, [pc, #72]	; (8001544 <HAL_GPIO_EXTI_Callback+0x4b0>)
 80014fc:	480a      	ldr	r0, [pc, #40]	; (8001528 <HAL_GPIO_EXTI_Callback+0x494>)
 80014fe:	f007 f9db 	bl	80088b8 <HAL_UART_Transmit>
				HAL_MAX_DELAY);
			}
		}
		printTime();
 8001502:	f7ff fd59 	bl	8000fb8 <printTime>
	}

}
 8001506:	e7ff      	b.n	8001508 <HAL_GPIO_EXTI_Callback+0x474>
 8001508:	bf00      	nop
 800150a:	3710      	adds	r7, #16
 800150c:	46bd      	mov	sp, r7
 800150e:	bd80      	pop	{r7, pc}
 8001510:	200000f8 	.word	0x200000f8
 8001514:	200000fc 	.word	0x200000fc
 8001518:	20000010 	.word	0x20000010
 800151c:	20000129 	.word	0x20000129
 8001520:	0800a828 	.word	0x0800a828
 8001524:	200003ec 	.word	0x200003ec
 8001528:	20000474 	.word	0x20000474
 800152c:	0800a844 	.word	0x0800a844
 8001530:	2000012a 	.word	0x2000012a
 8001534:	0800a860 	.word	0x0800a860
 8001538:	0800a87c 	.word	0x0800a87c
 800153c:	20000128 	.word	0x20000128
 8001540:	0800a898 	.word	0x0800a898
 8001544:	0800a8b4 	.word	0x0800a8b4

08001548 <uart_rx_enable_it>:

void uart_rx_enable_it(void) {
 8001548:	b580      	push	{r7, lr}
 800154a:	af00      	add	r7, sp, #0
	HAL_UART_Receive_IT(&huart1, &rx_byte, 1);
 800154c:	2201      	movs	r2, #1
 800154e:	4903      	ldr	r1, [pc, #12]	; (800155c <uart_rx_enable_it+0x14>)
 8001550:	4803      	ldr	r0, [pc, #12]	; (8001560 <uart_rx_enable_it+0x18>)
 8001552:	f007 fa3b 	bl	80089cc <HAL_UART_Receive_IT>
}
 8001556:	bf00      	nop
 8001558:	bd80      	pop	{r7, pc}
 800155a:	bf00      	nop
 800155c:	2000013b 	.word	0x2000013b
 8001560:	200003ec 	.word	0x200003ec

08001564 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8001564:	b580      	push	{r7, lr}
 8001566:	b098      	sub	sp, #96	; 0x60
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART1) {
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	4a97      	ldr	r2, [pc, #604]	; (80017d0 <HAL_UART_RxCpltCallback+0x26c>)
 8001572:	4293      	cmp	r3, r2
 8001574:	f040 8299 	bne.w	8001aaa <HAL_UART_RxCpltCallback+0x546>

		input[buffer_index++] = rx_byte;
 8001578:	4b96      	ldr	r3, [pc, #600]	; (80017d4 <HAL_UART_RxCpltCallback+0x270>)
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	1c5a      	adds	r2, r3, #1
 800157e:	4995      	ldr	r1, [pc, #596]	; (80017d4 <HAL_UART_RxCpltCallback+0x270>)
 8001580:	600a      	str	r2, [r1, #0]
 8001582:	4a95      	ldr	r2, [pc, #596]	; (80017d8 <HAL_UART_RxCpltCallback+0x274>)
 8001584:	7811      	ldrb	r1, [r2, #0]
 8001586:	4a95      	ldr	r2, [pc, #596]	; (80017dc <HAL_UART_RxCpltCallback+0x278>)
 8001588:	54d1      	strb	r1, [r2, r3]
		HAL_UART_Receive_IT(&huart1, &rx_byte, 1);
 800158a:	2201      	movs	r2, #1
 800158c:	4992      	ldr	r1, [pc, #584]	; (80017d8 <HAL_UART_RxCpltCallback+0x274>)
 800158e:	4894      	ldr	r0, [pc, #592]	; (80017e0 <HAL_UART_RxCpltCallback+0x27c>)
 8001590:	f007 fa1c 	bl	80089cc <HAL_UART_Receive_IT>

		if (rx_byte == '\n') {
 8001594:	4b90      	ldr	r3, [pc, #576]	; (80017d8 <HAL_UART_RxCpltCallback+0x274>)
 8001596:	781b      	ldrb	r3, [r3, #0]
 8001598:	2b0a      	cmp	r3, #10
 800159a:	f040 8286 	bne.w	8001aaa <HAL_UART_RxCpltCallback+0x546>

			if (time_flag) {
 800159e:	4b91      	ldr	r3, [pc, #580]	; (80017e4 <HAL_UART_RxCpltCallback+0x280>)
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d079      	beq.n	800169a <HAL_UART_RxCpltCallback+0x136>
				HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_13);
 80015a6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80015aa:	488f      	ldr	r0, [pc, #572]	; (80017e8 <HAL_UART_RxCpltCallback+0x284>)
 80015ac:	f003 fca6 	bl	8004efc <HAL_GPIO_TogglePin>
				HAL_RTC_GetTime(&hrtc, &myTime, RTC_FORMAT_BIN);
 80015b0:	2200      	movs	r2, #0
 80015b2:	498e      	ldr	r1, [pc, #568]	; (80017ec <HAL_UART_RxCpltCallback+0x288>)
 80015b4:	488e      	ldr	r0, [pc, #568]	; (80017f0 <HAL_UART_RxCpltCallback+0x28c>)
 80015b6:	f005 fc0c 	bl	8006dd2 <HAL_RTC_GetTime>
				hours[0] = input[0];
 80015ba:	4b88      	ldr	r3, [pc, #544]	; (80017dc <HAL_UART_RxCpltCallback+0x278>)
 80015bc:	781a      	ldrb	r2, [r3, #0]
 80015be:	4b8d      	ldr	r3, [pc, #564]	; (80017f4 <HAL_UART_RxCpltCallback+0x290>)
 80015c0:	701a      	strb	r2, [r3, #0]
				hours[1] = input[1];
 80015c2:	4b86      	ldr	r3, [pc, #536]	; (80017dc <HAL_UART_RxCpltCallback+0x278>)
 80015c4:	785a      	ldrb	r2, [r3, #1]
 80015c6:	4b8b      	ldr	r3, [pc, #556]	; (80017f4 <HAL_UART_RxCpltCallback+0x290>)
 80015c8:	705a      	strb	r2, [r3, #1]

				minute[0] = input[3];
 80015ca:	4b84      	ldr	r3, [pc, #528]	; (80017dc <HAL_UART_RxCpltCallback+0x278>)
 80015cc:	78da      	ldrb	r2, [r3, #3]
 80015ce:	4b8a      	ldr	r3, [pc, #552]	; (80017f8 <HAL_UART_RxCpltCallback+0x294>)
 80015d0:	701a      	strb	r2, [r3, #0]
				minute[1] = input[4];
 80015d2:	4b82      	ldr	r3, [pc, #520]	; (80017dc <HAL_UART_RxCpltCallback+0x278>)
 80015d4:	791a      	ldrb	r2, [r3, #4]
 80015d6:	4b88      	ldr	r3, [pc, #544]	; (80017f8 <HAL_UART_RxCpltCallback+0x294>)
 80015d8:	705a      	strb	r2, [r3, #1]

				second[0] = input[6];
 80015da:	4b80      	ldr	r3, [pc, #512]	; (80017dc <HAL_UART_RxCpltCallback+0x278>)
 80015dc:	799a      	ldrb	r2, [r3, #6]
 80015de:	4b87      	ldr	r3, [pc, #540]	; (80017fc <HAL_UART_RxCpltCallback+0x298>)
 80015e0:	701a      	strb	r2, [r3, #0]
				second[1] = input[7];
 80015e2:	4b7e      	ldr	r3, [pc, #504]	; (80017dc <HAL_UART_RxCpltCallback+0x278>)
 80015e4:	79da      	ldrb	r2, [r3, #7]
 80015e6:	4b85      	ldr	r3, [pc, #532]	; (80017fc <HAL_UART_RxCpltCallback+0x298>)
 80015e8:	705a      	strb	r2, [r3, #1]

				for (int i = 0; i < 8; i++)
 80015ea:	2300      	movs	r3, #0
 80015ec:	65fb      	str	r3, [r7, #92]	; 0x5c
 80015ee:	e00b      	b.n	8001608 <HAL_UART_RxCpltCallback+0xa4>
					timeFormat[i] = input[i];
 80015f0:	4a7a      	ldr	r2, [pc, #488]	; (80017dc <HAL_UART_RxCpltCallback+0x278>)
 80015f2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80015f4:	4413      	add	r3, r2
 80015f6:	7819      	ldrb	r1, [r3, #0]
 80015f8:	4a81      	ldr	r2, [pc, #516]	; (8001800 <HAL_UART_RxCpltCallback+0x29c>)
 80015fa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80015fc:	4413      	add	r3, r2
 80015fe:	460a      	mov	r2, r1
 8001600:	701a      	strb	r2, [r3, #0]
				for (int i = 0; i < 8; i++)
 8001602:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001604:	3301      	adds	r3, #1
 8001606:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001608:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800160a:	2b07      	cmp	r3, #7
 800160c:	ddf0      	ble.n	80015f0 <HAL_UART_RxCpltCallback+0x8c>
				HAL_UART_Transmit(&huart1, input, 10, HAL_MAX_DELAY);
 800160e:	f04f 33ff 	mov.w	r3, #4294967295
 8001612:	220a      	movs	r2, #10
 8001614:	4971      	ldr	r1, [pc, #452]	; (80017dc <HAL_UART_RxCpltCallback+0x278>)
 8001616:	4872      	ldr	r0, [pc, #456]	; (80017e0 <HAL_UART_RxCpltCallback+0x27c>)
 8001618:	f007 f94e 	bl	80088b8 <HAL_UART_Transmit>

//				myTime.Hours = atoi(hours);
				myTime.Hours = (hours[0] - '0') * 10 + (hours[1] - '0');
 800161c:	4b75      	ldr	r3, [pc, #468]	; (80017f4 <HAL_UART_RxCpltCallback+0x290>)
 800161e:	781b      	ldrb	r3, [r3, #0]
 8001620:	3b30      	subs	r3, #48	; 0x30
 8001622:	b2db      	uxtb	r3, r3
 8001624:	461a      	mov	r2, r3
 8001626:	0092      	lsls	r2, r2, #2
 8001628:	4413      	add	r3, r2
 800162a:	005b      	lsls	r3, r3, #1
 800162c:	b2da      	uxtb	r2, r3
 800162e:	4b71      	ldr	r3, [pc, #452]	; (80017f4 <HAL_UART_RxCpltCallback+0x290>)
 8001630:	785b      	ldrb	r3, [r3, #1]
 8001632:	4413      	add	r3, r2
 8001634:	b2db      	uxtb	r3, r3
 8001636:	3b30      	subs	r3, #48	; 0x30
 8001638:	b2da      	uxtb	r2, r3
 800163a:	4b6c      	ldr	r3, [pc, #432]	; (80017ec <HAL_UART_RxCpltCallback+0x288>)
 800163c:	701a      	strb	r2, [r3, #0]
//				myTime.Minutes = atoi(minute);
				myTime.Minutes = (minute[0] - '0') * 10 + (minute[1] - '0');
 800163e:	4b6e      	ldr	r3, [pc, #440]	; (80017f8 <HAL_UART_RxCpltCallback+0x294>)
 8001640:	781b      	ldrb	r3, [r3, #0]
 8001642:	3b30      	subs	r3, #48	; 0x30
 8001644:	b2db      	uxtb	r3, r3
 8001646:	461a      	mov	r2, r3
 8001648:	0092      	lsls	r2, r2, #2
 800164a:	4413      	add	r3, r2
 800164c:	005b      	lsls	r3, r3, #1
 800164e:	b2da      	uxtb	r2, r3
 8001650:	4b69      	ldr	r3, [pc, #420]	; (80017f8 <HAL_UART_RxCpltCallback+0x294>)
 8001652:	785b      	ldrb	r3, [r3, #1]
 8001654:	4413      	add	r3, r2
 8001656:	b2db      	uxtb	r3, r3
 8001658:	3b30      	subs	r3, #48	; 0x30
 800165a:	b2da      	uxtb	r2, r3
 800165c:	4b63      	ldr	r3, [pc, #396]	; (80017ec <HAL_UART_RxCpltCallback+0x288>)
 800165e:	705a      	strb	r2, [r3, #1]
//				myTime.Seconds = atoi(second);
				myTime.Seconds = (second[0] - '0') * 10 + (second[1] - '0');
 8001660:	4b66      	ldr	r3, [pc, #408]	; (80017fc <HAL_UART_RxCpltCallback+0x298>)
 8001662:	781b      	ldrb	r3, [r3, #0]
 8001664:	3b30      	subs	r3, #48	; 0x30
 8001666:	b2db      	uxtb	r3, r3
 8001668:	461a      	mov	r2, r3
 800166a:	0092      	lsls	r2, r2, #2
 800166c:	4413      	add	r3, r2
 800166e:	005b      	lsls	r3, r3, #1
 8001670:	b2da      	uxtb	r2, r3
 8001672:	4b62      	ldr	r3, [pc, #392]	; (80017fc <HAL_UART_RxCpltCallback+0x298>)
 8001674:	785b      	ldrb	r3, [r3, #1]
 8001676:	4413      	add	r3, r2
 8001678:	b2db      	uxtb	r3, r3
 800167a:	3b30      	subs	r3, #48	; 0x30
 800167c:	b2da      	uxtb	r2, r3
 800167e:	4b5b      	ldr	r3, [pc, #364]	; (80017ec <HAL_UART_RxCpltCallback+0x288>)
 8001680:	709a      	strb	r2, [r3, #2]

				HAL_RTC_SetTime(&hrtc, &myTime, RTC_FORMAT_BIN);
 8001682:	2200      	movs	r2, #0
 8001684:	4959      	ldr	r1, [pc, #356]	; (80017ec <HAL_UART_RxCpltCallback+0x288>)
 8001686:	485a      	ldr	r0, [pc, #360]	; (80017f0 <HAL_UART_RxCpltCallback+0x28c>)
 8001688:	f005 fb09 	bl	8006c9e <HAL_RTC_SetTime>
				if (input[2] == ':')
 800168c:	4b53      	ldr	r3, [pc, #332]	; (80017dc <HAL_UART_RxCpltCallback+0x278>)
 800168e:	789b      	ldrb	r3, [r3, #2]
 8001690:	2b3a      	cmp	r3, #58	; 0x3a
 8001692:	d102      	bne.n	800169a <HAL_UART_RxCpltCallback+0x136>
					time_flag = 0;
 8001694:	4b53      	ldr	r3, [pc, #332]	; (80017e4 <HAL_UART_RxCpltCallback+0x280>)
 8001696:	2200      	movs	r2, #0
 8001698:	601a      	str	r2, [r3, #0]
			}

//			if (time_flag == 0)
//				HAL_UART_Transmit(&huart1, input, 10, HAL_MAX_DELAY);

			buffer_index = 0;
 800169a:	4b4e      	ldr	r3, [pc, #312]	; (80017d4 <HAL_UART_RxCpltCallback+0x270>)
 800169c:	2200      	movs	r2, #0
 800169e:	601a      	str	r2, [r3, #0]
			if (strncmp(input, "[DIMSTEP]:", 10) == 0) {
 80016a0:	220a      	movs	r2, #10
 80016a2:	4958      	ldr	r1, [pc, #352]	; (8001804 <HAL_UART_RxCpltCallback+0x2a0>)
 80016a4:	484d      	ldr	r0, [pc, #308]	; (80017dc <HAL_UART_RxCpltCallback+0x278>)
 80016a6:	f008 fbf9 	bl	8009e9c <strncmp>
 80016aa:	4603      	mov	r3, r0
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	f040 80b7 	bne.w	8001820 <HAL_UART_RxCpltCallback+0x2bc>
				if (input[10] - 48 >= 0 && input[10] - 48 <= 9) {
 80016b2:	4b4a      	ldr	r3, [pc, #296]	; (80017dc <HAL_UART_RxCpltCallback+0x278>)
 80016b4:	7a9b      	ldrb	r3, [r3, #10]
 80016b6:	2b2f      	cmp	r3, #47	; 0x2f
 80016b8:	d97b      	bls.n	80017b2 <HAL_UART_RxCpltCallback+0x24e>
 80016ba:	4b48      	ldr	r3, [pc, #288]	; (80017dc <HAL_UART_RxCpltCallback+0x278>)
 80016bc:	7a9b      	ldrb	r3, [r3, #10]
 80016be:	2b39      	cmp	r3, #57	; 0x39
 80016c0:	d877      	bhi.n	80017b2 <HAL_UART_RxCpltCallback+0x24e>
					dim = input[10] - 48;
 80016c2:	4b46      	ldr	r3, [pc, #280]	; (80017dc <HAL_UART_RxCpltCallback+0x278>)
 80016c4:	7a9b      	ldrb	r3, [r3, #10]
 80016c6:	3b30      	subs	r3, #48	; 0x30
 80016c8:	b2da      	uxtb	r2, r3
 80016ca:	4b4f      	ldr	r3, [pc, #316]	; (8001808 <HAL_UART_RxCpltCallback+0x2a4>)
 80016cc:	701a      	strb	r2, [r3, #0]
					if (seven_segment.digits[0] > input[10] - 48) {
 80016ce:	4b4f      	ldr	r3, [pc, #316]	; (800180c <HAL_UART_RxCpltCallback+0x2a8>)
 80016d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016d2:	4a42      	ldr	r2, [pc, #264]	; (80017dc <HAL_UART_RxCpltCallback+0x278>)
 80016d4:	7a92      	ldrb	r2, [r2, #10]
 80016d6:	3a30      	subs	r2, #48	; 0x30
 80016d8:	4293      	cmp	r3, r2
 80016da:	d930      	bls.n	800173e <HAL_UART_RxCpltCallback+0x1da>
						int differ = seven_segment.digits[0] - (input[10] - 48);
 80016dc:	4b4b      	ldr	r3, [pc, #300]	; (800180c <HAL_UART_RxCpltCallback+0x2a8>)
 80016de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016e0:	4a3e      	ldr	r2, [pc, #248]	; (80017dc <HAL_UART_RxCpltCallback+0x278>)
 80016e2:	7a92      	ldrb	r2, [r2, #10]
 80016e4:	1a9b      	subs	r3, r3, r2
 80016e6:	3330      	adds	r3, #48	; 0x30
 80016e8:	647b      	str	r3, [r7, #68]	; 0x44
						char message[60];
						sprintf((char*) message, "\nDimStep Deceased : {%d}\n",
 80016ea:	f107 0308 	add.w	r3, r7, #8
 80016ee:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80016f0:	4947      	ldr	r1, [pc, #284]	; (8001810 <HAL_UART_RxCpltCallback+0x2ac>)
 80016f2:	4618      	mov	r0, r3
 80016f4:	f008 fbb2 	bl	8009e5c <siprintf>
								differ);
						HAL_UART_Transmit(&huart1, (uint8_t*) message,
								strlen((char*) message),
 80016f8:	f107 0308 	add.w	r3, r7, #8
 80016fc:	4618      	mov	r0, r3
 80016fe:	f7fe fd67 	bl	80001d0 <strlen>
 8001702:	4603      	mov	r3, r0
						HAL_UART_Transmit(&huart1, (uint8_t*) message,
 8001704:	b29a      	uxth	r2, r3
 8001706:	f107 0108 	add.w	r1, r7, #8
 800170a:	f04f 33ff 	mov.w	r3, #4294967295
 800170e:	4834      	ldr	r0, [pc, #208]	; (80017e0 <HAL_UART_RxCpltCallback+0x27c>)
 8001710:	f007 f8d2 	bl	80088b8 <HAL_UART_Transmit>
								HAL_MAX_DELAY);
						HAL_UART_Transmit(&huart2, (uint8_t*) message,
								strlen((char*) message),
 8001714:	f107 0308 	add.w	r3, r7, #8
 8001718:	4618      	mov	r0, r3
 800171a:	f7fe fd59 	bl	80001d0 <strlen>
 800171e:	4603      	mov	r3, r0
						HAL_UART_Transmit(&huart2, (uint8_t*) message,
 8001720:	b29a      	uxth	r2, r3
 8001722:	f107 0108 	add.w	r1, r7, #8
 8001726:	f04f 33ff 	mov.w	r3, #4294967295
 800172a:	483a      	ldr	r0, [pc, #232]	; (8001814 <HAL_UART_RxCpltCallback+0x2b0>)
 800172c:	f007 f8c4 	bl	80088b8 <HAL_UART_Transmit>
								HAL_MAX_DELAY);
						seven_segment.digits[0] = input[10] - 48;
 8001730:	4b2a      	ldr	r3, [pc, #168]	; (80017dc <HAL_UART_RxCpltCallback+0x278>)
 8001732:	7a9b      	ldrb	r3, [r3, #10]
 8001734:	3b30      	subs	r3, #48	; 0x30
 8001736:	461a      	mov	r2, r3
 8001738:	4b34      	ldr	r3, [pc, #208]	; (800180c <HAL_UART_RxCpltCallback+0x2a8>)
 800173a:	641a      	str	r2, [r3, #64]	; 0x40
					if (seven_segment.digits[0] > input[10] - 48) {
 800173c:	e1ae      	b.n	8001a9c <HAL_UART_RxCpltCallback+0x538>

					} else if (seven_segment.digits[0] < input[10] - 48) {
 800173e:	4b33      	ldr	r3, [pc, #204]	; (800180c <HAL_UART_RxCpltCallback+0x2a8>)
 8001740:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001742:	4a26      	ldr	r2, [pc, #152]	; (80017dc <HAL_UART_RxCpltCallback+0x278>)
 8001744:	7a92      	ldrb	r2, [r2, #10]
 8001746:	3a30      	subs	r2, #48	; 0x30
 8001748:	4293      	cmp	r3, r2
 800174a:	f080 81a7 	bcs.w	8001a9c <HAL_UART_RxCpltCallback+0x538>
						int differ = (input[10] - 48) - seven_segment.digits[0];
 800174e:	4b23      	ldr	r3, [pc, #140]	; (80017dc <HAL_UART_RxCpltCallback+0x278>)
 8001750:	7a9b      	ldrb	r3, [r3, #10]
 8001752:	461a      	mov	r2, r3
 8001754:	4b2d      	ldr	r3, [pc, #180]	; (800180c <HAL_UART_RxCpltCallback+0x2a8>)
 8001756:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001758:	1ad3      	subs	r3, r2, r3
 800175a:	3b30      	subs	r3, #48	; 0x30
 800175c:	64bb      	str	r3, [r7, #72]	; 0x48
						char message[60];
						sprintf((char*) message, "\nDimStep Increased : {%d}\n",
 800175e:	f107 0308 	add.w	r3, r7, #8
 8001762:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001764:	492c      	ldr	r1, [pc, #176]	; (8001818 <HAL_UART_RxCpltCallback+0x2b4>)
 8001766:	4618      	mov	r0, r3
 8001768:	f008 fb78 	bl	8009e5c <siprintf>
								differ);
						HAL_UART_Transmit(&huart1, (uint8_t*) message,
								strlen((char*) message),
 800176c:	f107 0308 	add.w	r3, r7, #8
 8001770:	4618      	mov	r0, r3
 8001772:	f7fe fd2d 	bl	80001d0 <strlen>
 8001776:	4603      	mov	r3, r0
						HAL_UART_Transmit(&huart1, (uint8_t*) message,
 8001778:	b29a      	uxth	r2, r3
 800177a:	f107 0108 	add.w	r1, r7, #8
 800177e:	f04f 33ff 	mov.w	r3, #4294967295
 8001782:	4817      	ldr	r0, [pc, #92]	; (80017e0 <HAL_UART_RxCpltCallback+0x27c>)
 8001784:	f007 f898 	bl	80088b8 <HAL_UART_Transmit>
								HAL_MAX_DELAY);
						HAL_UART_Transmit(&huart2, (uint8_t*) message,
								strlen((char*) message),
 8001788:	f107 0308 	add.w	r3, r7, #8
 800178c:	4618      	mov	r0, r3
 800178e:	f7fe fd1f 	bl	80001d0 <strlen>
 8001792:	4603      	mov	r3, r0
						HAL_UART_Transmit(&huart2, (uint8_t*) message,
 8001794:	b29a      	uxth	r2, r3
 8001796:	f107 0108 	add.w	r1, r7, #8
 800179a:	f04f 33ff 	mov.w	r3, #4294967295
 800179e:	481d      	ldr	r0, [pc, #116]	; (8001814 <HAL_UART_RxCpltCallback+0x2b0>)
 80017a0:	f007 f88a 	bl	80088b8 <HAL_UART_Transmit>
								HAL_MAX_DELAY);
						seven_segment.digits[0] = input[10] - 48;
 80017a4:	4b0d      	ldr	r3, [pc, #52]	; (80017dc <HAL_UART_RxCpltCallback+0x278>)
 80017a6:	7a9b      	ldrb	r3, [r3, #10]
 80017a8:	3b30      	subs	r3, #48	; 0x30
 80017aa:	461a      	mov	r2, r3
 80017ac:	4b17      	ldr	r3, [pc, #92]	; (800180c <HAL_UART_RxCpltCallback+0x2a8>)
 80017ae:	641a      	str	r2, [r3, #64]	; 0x40
					if (seven_segment.digits[0] > input[10] - 48) {
 80017b0:	e174      	b.n	8001a9c <HAL_UART_RxCpltCallback+0x538>
					}
				} else {
					HAL_UART_Transmit(&huart1, "\nOut of range!\n", 15,
 80017b2:	f04f 33ff 	mov.w	r3, #4294967295
 80017b6:	220f      	movs	r2, #15
 80017b8:	4918      	ldr	r1, [pc, #96]	; (800181c <HAL_UART_RxCpltCallback+0x2b8>)
 80017ba:	4809      	ldr	r0, [pc, #36]	; (80017e0 <HAL_UART_RxCpltCallback+0x27c>)
 80017bc:	f007 f87c 	bl	80088b8 <HAL_UART_Transmit>
					HAL_MAX_DELAY);
					HAL_UART_Transmit(&huart2, "\nOut of range!\n", 15,
 80017c0:	f04f 33ff 	mov.w	r3, #4294967295
 80017c4:	220f      	movs	r2, #15
 80017c6:	4915      	ldr	r1, [pc, #84]	; (800181c <HAL_UART_RxCpltCallback+0x2b8>)
 80017c8:	4812      	ldr	r0, [pc, #72]	; (8001814 <HAL_UART_RxCpltCallback+0x2b0>)
 80017ca:	f007 f875 	bl	80088b8 <HAL_UART_Transmit>
 80017ce:	e16a      	b.n	8001aa6 <HAL_UART_RxCpltCallback+0x542>
 80017d0:	40013800 	.word	0x40013800
 80017d4:	20000110 	.word	0x20000110
 80017d8:	2000013b 	.word	0x2000013b
 80017dc:	2000012c 	.word	0x2000012c
 80017e0:	200003ec 	.word	0x200003ec
 80017e4:	20000000 	.word	0x20000000
 80017e8:	48001000 	.word	0x48001000
 80017ec:	200007e8 	.word	0x200007e8
 80017f0:	20000238 	.word	0x20000238
 80017f4:	2000000c 	.word	0x2000000c
 80017f8:	20000008 	.word	0x20000008
 80017fc:	20000004 	.word	0x20000004
 8001800:	2000013c 	.word	0x2000013c
 8001804:	0800a8d0 	.word	0x0800a8d0
 8001808:	20000128 	.word	0x20000128
 800180c:	20000010 	.word	0x20000010
 8001810:	0800a8dc 	.word	0x0800a8dc
 8001814:	20000474 	.word	0x20000474
 8001818:	0800a8f8 	.word	0x0800a8f8
 800181c:	0800a914 	.word	0x0800a914
					HAL_MAX_DELAY);
				}

			} else if (strncmp(input, "[LIGHTS]:", 9) == 0) {
 8001820:	2209      	movs	r2, #9
 8001822:	49a4      	ldr	r1, [pc, #656]	; (8001ab4 <HAL_UART_RxCpltCallback+0x550>)
 8001824:	48a4      	ldr	r0, [pc, #656]	; (8001ab8 <HAL_UART_RxCpltCallback+0x554>)
 8001826:	f008 fb39 	bl	8009e9c <strncmp>
 800182a:	4603      	mov	r3, r0
 800182c:	2b00      	cmp	r3, #0
 800182e:	f040 808f 	bne.w	8001950 <HAL_UART_RxCpltCallback+0x3ec>
				if (input[9] - 48 >= 0 && input[9] - 48 <= 4) {
 8001832:	4ba1      	ldr	r3, [pc, #644]	; (8001ab8 <HAL_UART_RxCpltCallback+0x554>)
 8001834:	7a5b      	ldrb	r3, [r3, #9]
 8001836:	2b2f      	cmp	r3, #47	; 0x2f
 8001838:	d97b      	bls.n	8001932 <HAL_UART_RxCpltCallback+0x3ce>
 800183a:	4b9f      	ldr	r3, [pc, #636]	; (8001ab8 <HAL_UART_RxCpltCallback+0x554>)
 800183c:	7a5b      	ldrb	r3, [r3, #9]
 800183e:	2b34      	cmp	r3, #52	; 0x34
 8001840:	d877      	bhi.n	8001932 <HAL_UART_RxCpltCallback+0x3ce>
					light = input[9] - 48;
 8001842:	4b9d      	ldr	r3, [pc, #628]	; (8001ab8 <HAL_UART_RxCpltCallback+0x554>)
 8001844:	7a5b      	ldrb	r3, [r3, #9]
 8001846:	3b30      	subs	r3, #48	; 0x30
 8001848:	b2da      	uxtb	r2, r3
 800184a:	4b9c      	ldr	r3, [pc, #624]	; (8001abc <HAL_UART_RxCpltCallback+0x558>)
 800184c:	701a      	strb	r2, [r3, #0]
					if (seven_segment.digits[1] > input[9] - 48) {
 800184e:	4b9c      	ldr	r3, [pc, #624]	; (8001ac0 <HAL_UART_RxCpltCallback+0x55c>)
 8001850:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001852:	4a99      	ldr	r2, [pc, #612]	; (8001ab8 <HAL_UART_RxCpltCallback+0x554>)
 8001854:	7a52      	ldrb	r2, [r2, #9]
 8001856:	3a30      	subs	r2, #48	; 0x30
 8001858:	4293      	cmp	r3, r2
 800185a:	d930      	bls.n	80018be <HAL_UART_RxCpltCallback+0x35a>
						int differ = seven_segment.digits[1] - (input[9] - 48);
 800185c:	4b98      	ldr	r3, [pc, #608]	; (8001ac0 <HAL_UART_RxCpltCallback+0x55c>)
 800185e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001860:	4a95      	ldr	r2, [pc, #596]	; (8001ab8 <HAL_UART_RxCpltCallback+0x554>)
 8001862:	7a52      	ldrb	r2, [r2, #9]
 8001864:	1a9b      	subs	r3, r3, r2
 8001866:	3330      	adds	r3, #48	; 0x30
 8001868:	64fb      	str	r3, [r7, #76]	; 0x4c
						char message[60];
						sprintf((char*) message, "\nLights Deceased : {%d}\n",
 800186a:	f107 0308 	add.w	r3, r7, #8
 800186e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001870:	4994      	ldr	r1, [pc, #592]	; (8001ac4 <HAL_UART_RxCpltCallback+0x560>)
 8001872:	4618      	mov	r0, r3
 8001874:	f008 faf2 	bl	8009e5c <siprintf>
								differ);
						HAL_UART_Transmit(&huart1, (uint8_t*) message,
								strlen((char*) message),
 8001878:	f107 0308 	add.w	r3, r7, #8
 800187c:	4618      	mov	r0, r3
 800187e:	f7fe fca7 	bl	80001d0 <strlen>
 8001882:	4603      	mov	r3, r0
						HAL_UART_Transmit(&huart1, (uint8_t*) message,
 8001884:	b29a      	uxth	r2, r3
 8001886:	f107 0108 	add.w	r1, r7, #8
 800188a:	f04f 33ff 	mov.w	r3, #4294967295
 800188e:	488e      	ldr	r0, [pc, #568]	; (8001ac8 <HAL_UART_RxCpltCallback+0x564>)
 8001890:	f007 f812 	bl	80088b8 <HAL_UART_Transmit>
								HAL_MAX_DELAY);
						HAL_UART_Transmit(&huart2, (uint8_t*) message,
								strlen((char*) message),
 8001894:	f107 0308 	add.w	r3, r7, #8
 8001898:	4618      	mov	r0, r3
 800189a:	f7fe fc99 	bl	80001d0 <strlen>
 800189e:	4603      	mov	r3, r0
						HAL_UART_Transmit(&huart2, (uint8_t*) message,
 80018a0:	b29a      	uxth	r2, r3
 80018a2:	f107 0108 	add.w	r1, r7, #8
 80018a6:	f04f 33ff 	mov.w	r3, #4294967295
 80018aa:	4888      	ldr	r0, [pc, #544]	; (8001acc <HAL_UART_RxCpltCallback+0x568>)
 80018ac:	f007 f804 	bl	80088b8 <HAL_UART_Transmit>
								HAL_MAX_DELAY);
						seven_segment.digits[1] = input[9] - 48;
 80018b0:	4b81      	ldr	r3, [pc, #516]	; (8001ab8 <HAL_UART_RxCpltCallback+0x554>)
 80018b2:	7a5b      	ldrb	r3, [r3, #9]
 80018b4:	3b30      	subs	r3, #48	; 0x30
 80018b6:	461a      	mov	r2, r3
 80018b8:	4b81      	ldr	r3, [pc, #516]	; (8001ac0 <HAL_UART_RxCpltCallback+0x55c>)
 80018ba:	645a      	str	r2, [r3, #68]	; 0x44
					if (seven_segment.digits[1] > input[9] - 48) {
 80018bc:	e0f0      	b.n	8001aa0 <HAL_UART_RxCpltCallback+0x53c>

					} else if (seven_segment.digits[1] < input[9] - 48) {
 80018be:	4b80      	ldr	r3, [pc, #512]	; (8001ac0 <HAL_UART_RxCpltCallback+0x55c>)
 80018c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018c2:	4a7d      	ldr	r2, [pc, #500]	; (8001ab8 <HAL_UART_RxCpltCallback+0x554>)
 80018c4:	7a52      	ldrb	r2, [r2, #9]
 80018c6:	3a30      	subs	r2, #48	; 0x30
 80018c8:	4293      	cmp	r3, r2
 80018ca:	f080 80e9 	bcs.w	8001aa0 <HAL_UART_RxCpltCallback+0x53c>
						int differ = (input[9] - 48) - seven_segment.digits[1];
 80018ce:	4b7a      	ldr	r3, [pc, #488]	; (8001ab8 <HAL_UART_RxCpltCallback+0x554>)
 80018d0:	7a5b      	ldrb	r3, [r3, #9]
 80018d2:	461a      	mov	r2, r3
 80018d4:	4b7a      	ldr	r3, [pc, #488]	; (8001ac0 <HAL_UART_RxCpltCallback+0x55c>)
 80018d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018d8:	1ad3      	subs	r3, r2, r3
 80018da:	3b30      	subs	r3, #48	; 0x30
 80018dc:	653b      	str	r3, [r7, #80]	; 0x50
						char message[60];
						sprintf((char*) message, "\nLights Increased : {%d}\n",
 80018de:	f107 0308 	add.w	r3, r7, #8
 80018e2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80018e4:	497a      	ldr	r1, [pc, #488]	; (8001ad0 <HAL_UART_RxCpltCallback+0x56c>)
 80018e6:	4618      	mov	r0, r3
 80018e8:	f008 fab8 	bl	8009e5c <siprintf>
								differ);
						HAL_UART_Transmit(&huart1, (uint8_t*) message,
								strlen((char*) message),
 80018ec:	f107 0308 	add.w	r3, r7, #8
 80018f0:	4618      	mov	r0, r3
 80018f2:	f7fe fc6d 	bl	80001d0 <strlen>
 80018f6:	4603      	mov	r3, r0
						HAL_UART_Transmit(&huart1, (uint8_t*) message,
 80018f8:	b29a      	uxth	r2, r3
 80018fa:	f107 0108 	add.w	r1, r7, #8
 80018fe:	f04f 33ff 	mov.w	r3, #4294967295
 8001902:	4871      	ldr	r0, [pc, #452]	; (8001ac8 <HAL_UART_RxCpltCallback+0x564>)
 8001904:	f006 ffd8 	bl	80088b8 <HAL_UART_Transmit>
								HAL_MAX_DELAY);
						HAL_UART_Transmit(&huart2, (uint8_t*) message,
								strlen((char*) message),
 8001908:	f107 0308 	add.w	r3, r7, #8
 800190c:	4618      	mov	r0, r3
 800190e:	f7fe fc5f 	bl	80001d0 <strlen>
 8001912:	4603      	mov	r3, r0
						HAL_UART_Transmit(&huart2, (uint8_t*) message,
 8001914:	b29a      	uxth	r2, r3
 8001916:	f107 0108 	add.w	r1, r7, #8
 800191a:	f04f 33ff 	mov.w	r3, #4294967295
 800191e:	486b      	ldr	r0, [pc, #428]	; (8001acc <HAL_UART_RxCpltCallback+0x568>)
 8001920:	f006 ffca 	bl	80088b8 <HAL_UART_Transmit>
								HAL_MAX_DELAY);
						seven_segment.digits[1] = input[9] - 48;
 8001924:	4b64      	ldr	r3, [pc, #400]	; (8001ab8 <HAL_UART_RxCpltCallback+0x554>)
 8001926:	7a5b      	ldrb	r3, [r3, #9]
 8001928:	3b30      	subs	r3, #48	; 0x30
 800192a:	461a      	mov	r2, r3
 800192c:	4b64      	ldr	r3, [pc, #400]	; (8001ac0 <HAL_UART_RxCpltCallback+0x55c>)
 800192e:	645a      	str	r2, [r3, #68]	; 0x44
					if (seven_segment.digits[1] > input[9] - 48) {
 8001930:	e0b6      	b.n	8001aa0 <HAL_UART_RxCpltCallback+0x53c>
					}
				} else {
					HAL_UART_Transmit(&huart1, "\nOut of range!\n", 15,
 8001932:	f04f 33ff 	mov.w	r3, #4294967295
 8001936:	220f      	movs	r2, #15
 8001938:	4966      	ldr	r1, [pc, #408]	; (8001ad4 <HAL_UART_RxCpltCallback+0x570>)
 800193a:	4863      	ldr	r0, [pc, #396]	; (8001ac8 <HAL_UART_RxCpltCallback+0x564>)
 800193c:	f006 ffbc 	bl	80088b8 <HAL_UART_Transmit>
					HAL_MAX_DELAY);
					HAL_UART_Transmit(&huart2, "\nOut of range!\n", 15,
 8001940:	f04f 33ff 	mov.w	r3, #4294967295
 8001944:	220f      	movs	r2, #15
 8001946:	4963      	ldr	r1, [pc, #396]	; (8001ad4 <HAL_UART_RxCpltCallback+0x570>)
 8001948:	4860      	ldr	r0, [pc, #384]	; (8001acc <HAL_UART_RxCpltCallback+0x568>)
 800194a:	f006 ffb5 	bl	80088b8 <HAL_UART_Transmit>
 800194e:	e0aa      	b.n	8001aa6 <HAL_UART_RxCpltCallback+0x542>
					HAL_MAX_DELAY);
				}

			} else if (strncmp(input, "[WARNNUM]:", 10) == 0) {
 8001950:	220a      	movs	r2, #10
 8001952:	4961      	ldr	r1, [pc, #388]	; (8001ad8 <HAL_UART_RxCpltCallback+0x574>)
 8001954:	4858      	ldr	r0, [pc, #352]	; (8001ab8 <HAL_UART_RxCpltCallback+0x554>)
 8001956:	f008 faa1 	bl	8009e9c <strncmp>
 800195a:	4603      	mov	r3, r0
 800195c:	2b00      	cmp	r3, #0
 800195e:	f040 808e 	bne.w	8001a7e <HAL_UART_RxCpltCallback+0x51a>
				if (input[10] - 48 >= 0 && input[10] - 48 <= 3) {
 8001962:	4b55      	ldr	r3, [pc, #340]	; (8001ab8 <HAL_UART_RxCpltCallback+0x554>)
 8001964:	7a9b      	ldrb	r3, [r3, #10]
 8001966:	2b2f      	cmp	r3, #47	; 0x2f
 8001968:	d97a      	bls.n	8001a60 <HAL_UART_RxCpltCallback+0x4fc>
 800196a:	4b53      	ldr	r3, [pc, #332]	; (8001ab8 <HAL_UART_RxCpltCallback+0x554>)
 800196c:	7a9b      	ldrb	r3, [r3, #10]
 800196e:	2b33      	cmp	r3, #51	; 0x33
 8001970:	d876      	bhi.n	8001a60 <HAL_UART_RxCpltCallback+0x4fc>
					buzzer = input[10] - 48;
 8001972:	4b51      	ldr	r3, [pc, #324]	; (8001ab8 <HAL_UART_RxCpltCallback+0x554>)
 8001974:	7a9b      	ldrb	r3, [r3, #10]
 8001976:	3b30      	subs	r3, #48	; 0x30
 8001978:	b2da      	uxtb	r2, r3
 800197a:	4b58      	ldr	r3, [pc, #352]	; (8001adc <HAL_UART_RxCpltCallback+0x578>)
 800197c:	701a      	strb	r2, [r3, #0]
					if (seven_segment.digits[2] > input[10] - 48) {
 800197e:	4b50      	ldr	r3, [pc, #320]	; (8001ac0 <HAL_UART_RxCpltCallback+0x55c>)
 8001980:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001982:	4a4d      	ldr	r2, [pc, #308]	; (8001ab8 <HAL_UART_RxCpltCallback+0x554>)
 8001984:	7a92      	ldrb	r2, [r2, #10]
 8001986:	3a30      	subs	r2, #48	; 0x30
 8001988:	4293      	cmp	r3, r2
 800198a:	d930      	bls.n	80019ee <HAL_UART_RxCpltCallback+0x48a>
						int differ = seven_segment.digits[2] - (input[10] - 48);
 800198c:	4b4c      	ldr	r3, [pc, #304]	; (8001ac0 <HAL_UART_RxCpltCallback+0x55c>)
 800198e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001990:	4a49      	ldr	r2, [pc, #292]	; (8001ab8 <HAL_UART_RxCpltCallback+0x554>)
 8001992:	7a92      	ldrb	r2, [r2, #10]
 8001994:	1a9b      	subs	r3, r3, r2
 8001996:	3330      	adds	r3, #48	; 0x30
 8001998:	657b      	str	r3, [r7, #84]	; 0x54
						char message[60];
						sprintf((char*) message, "\nWarnNum Deceased : {%d}\n",
 800199a:	f107 0308 	add.w	r3, r7, #8
 800199e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80019a0:	494f      	ldr	r1, [pc, #316]	; (8001ae0 <HAL_UART_RxCpltCallback+0x57c>)
 80019a2:	4618      	mov	r0, r3
 80019a4:	f008 fa5a 	bl	8009e5c <siprintf>
								differ);
						HAL_UART_Transmit(&huart1, (uint8_t*) message,
								strlen((char*) message),
 80019a8:	f107 0308 	add.w	r3, r7, #8
 80019ac:	4618      	mov	r0, r3
 80019ae:	f7fe fc0f 	bl	80001d0 <strlen>
 80019b2:	4603      	mov	r3, r0
						HAL_UART_Transmit(&huart1, (uint8_t*) message,
 80019b4:	b29a      	uxth	r2, r3
 80019b6:	f107 0108 	add.w	r1, r7, #8
 80019ba:	f04f 33ff 	mov.w	r3, #4294967295
 80019be:	4842      	ldr	r0, [pc, #264]	; (8001ac8 <HAL_UART_RxCpltCallback+0x564>)
 80019c0:	f006 ff7a 	bl	80088b8 <HAL_UART_Transmit>
								HAL_MAX_DELAY);
						HAL_UART_Transmit(&huart2, (uint8_t*) message,
								strlen((char*) message),
 80019c4:	f107 0308 	add.w	r3, r7, #8
 80019c8:	4618      	mov	r0, r3
 80019ca:	f7fe fc01 	bl	80001d0 <strlen>
 80019ce:	4603      	mov	r3, r0
						HAL_UART_Transmit(&huart2, (uint8_t*) message,
 80019d0:	b29a      	uxth	r2, r3
 80019d2:	f107 0108 	add.w	r1, r7, #8
 80019d6:	f04f 33ff 	mov.w	r3, #4294967295
 80019da:	483c      	ldr	r0, [pc, #240]	; (8001acc <HAL_UART_RxCpltCallback+0x568>)
 80019dc:	f006 ff6c 	bl	80088b8 <HAL_UART_Transmit>
								HAL_MAX_DELAY);
						seven_segment.digits[2] = input[10] - 48;
 80019e0:	4b35      	ldr	r3, [pc, #212]	; (8001ab8 <HAL_UART_RxCpltCallback+0x554>)
 80019e2:	7a9b      	ldrb	r3, [r3, #10]
 80019e4:	3b30      	subs	r3, #48	; 0x30
 80019e6:	461a      	mov	r2, r3
 80019e8:	4b35      	ldr	r3, [pc, #212]	; (8001ac0 <HAL_UART_RxCpltCallback+0x55c>)
 80019ea:	649a      	str	r2, [r3, #72]	; 0x48
					if (seven_segment.digits[2] > input[10] - 48) {
 80019ec:	e05a      	b.n	8001aa4 <HAL_UART_RxCpltCallback+0x540>

					} else if (seven_segment.digits[2] < input[10] - 48) {
 80019ee:	4b34      	ldr	r3, [pc, #208]	; (8001ac0 <HAL_UART_RxCpltCallback+0x55c>)
 80019f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80019f2:	4a31      	ldr	r2, [pc, #196]	; (8001ab8 <HAL_UART_RxCpltCallback+0x554>)
 80019f4:	7a92      	ldrb	r2, [r2, #10]
 80019f6:	3a30      	subs	r2, #48	; 0x30
 80019f8:	4293      	cmp	r3, r2
 80019fa:	d253      	bcs.n	8001aa4 <HAL_UART_RxCpltCallback+0x540>
						int differ = (input[10] - 48) - seven_segment.digits[2];
 80019fc:	4b2e      	ldr	r3, [pc, #184]	; (8001ab8 <HAL_UART_RxCpltCallback+0x554>)
 80019fe:	7a9b      	ldrb	r3, [r3, #10]
 8001a00:	461a      	mov	r2, r3
 8001a02:	4b2f      	ldr	r3, [pc, #188]	; (8001ac0 <HAL_UART_RxCpltCallback+0x55c>)
 8001a04:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001a06:	1ad3      	subs	r3, r2, r3
 8001a08:	3b30      	subs	r3, #48	; 0x30
 8001a0a:	65bb      	str	r3, [r7, #88]	; 0x58
						char message[60];
						sprintf((char*) message, "\nWarnNum Increased : {%d}\n",
 8001a0c:	f107 0308 	add.w	r3, r7, #8
 8001a10:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001a12:	4934      	ldr	r1, [pc, #208]	; (8001ae4 <HAL_UART_RxCpltCallback+0x580>)
 8001a14:	4618      	mov	r0, r3
 8001a16:	f008 fa21 	bl	8009e5c <siprintf>
								differ);
						HAL_UART_Transmit(&huart1, (uint8_t*) message,
								strlen((char*) message),
 8001a1a:	f107 0308 	add.w	r3, r7, #8
 8001a1e:	4618      	mov	r0, r3
 8001a20:	f7fe fbd6 	bl	80001d0 <strlen>
 8001a24:	4603      	mov	r3, r0
						HAL_UART_Transmit(&huart1, (uint8_t*) message,
 8001a26:	b29a      	uxth	r2, r3
 8001a28:	f107 0108 	add.w	r1, r7, #8
 8001a2c:	f04f 33ff 	mov.w	r3, #4294967295
 8001a30:	4825      	ldr	r0, [pc, #148]	; (8001ac8 <HAL_UART_RxCpltCallback+0x564>)
 8001a32:	f006 ff41 	bl	80088b8 <HAL_UART_Transmit>
								HAL_MAX_DELAY);
						HAL_UART_Transmit(&huart2, (uint8_t*) message,
								strlen((char*) message),
 8001a36:	f107 0308 	add.w	r3, r7, #8
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	f7fe fbc8 	bl	80001d0 <strlen>
 8001a40:	4603      	mov	r3, r0
						HAL_UART_Transmit(&huart2, (uint8_t*) message,
 8001a42:	b29a      	uxth	r2, r3
 8001a44:	f107 0108 	add.w	r1, r7, #8
 8001a48:	f04f 33ff 	mov.w	r3, #4294967295
 8001a4c:	481f      	ldr	r0, [pc, #124]	; (8001acc <HAL_UART_RxCpltCallback+0x568>)
 8001a4e:	f006 ff33 	bl	80088b8 <HAL_UART_Transmit>
								HAL_MAX_DELAY);
						seven_segment.digits[2] = input[10] - 48;
 8001a52:	4b19      	ldr	r3, [pc, #100]	; (8001ab8 <HAL_UART_RxCpltCallback+0x554>)
 8001a54:	7a9b      	ldrb	r3, [r3, #10]
 8001a56:	3b30      	subs	r3, #48	; 0x30
 8001a58:	461a      	mov	r2, r3
 8001a5a:	4b19      	ldr	r3, [pc, #100]	; (8001ac0 <HAL_UART_RxCpltCallback+0x55c>)
 8001a5c:	649a      	str	r2, [r3, #72]	; 0x48
					if (seven_segment.digits[2] > input[10] - 48) {
 8001a5e:	e021      	b.n	8001aa4 <HAL_UART_RxCpltCallback+0x540>
					}
				} else {
					HAL_UART_Transmit(&huart1, "\nOut of range!\n", 15,
 8001a60:	f04f 33ff 	mov.w	r3, #4294967295
 8001a64:	220f      	movs	r2, #15
 8001a66:	491b      	ldr	r1, [pc, #108]	; (8001ad4 <HAL_UART_RxCpltCallback+0x570>)
 8001a68:	4817      	ldr	r0, [pc, #92]	; (8001ac8 <HAL_UART_RxCpltCallback+0x564>)
 8001a6a:	f006 ff25 	bl	80088b8 <HAL_UART_Transmit>
					HAL_MAX_DELAY);
					HAL_UART_Transmit(&huart2, "\nOut of range!\n", 15,
 8001a6e:	f04f 33ff 	mov.w	r3, #4294967295
 8001a72:	220f      	movs	r2, #15
 8001a74:	4917      	ldr	r1, [pc, #92]	; (8001ad4 <HAL_UART_RxCpltCallback+0x570>)
 8001a76:	4815      	ldr	r0, [pc, #84]	; (8001acc <HAL_UART_RxCpltCallback+0x568>)
 8001a78:	f006 ff1e 	bl	80088b8 <HAL_UART_Transmit>
 8001a7c:	e013      	b.n	8001aa6 <HAL_UART_RxCpltCallback+0x542>
					HAL_MAX_DELAY);
				}

			} else {
				HAL_UART_Transmit(&huart1,
 8001a7e:	f04f 33ff 	mov.w	r3, #4294967295
 8001a82:	2230      	movs	r2, #48	; 0x30
 8001a84:	4918      	ldr	r1, [pc, #96]	; (8001ae8 <HAL_UART_RxCpltCallback+0x584>)
 8001a86:	4810      	ldr	r0, [pc, #64]	; (8001ac8 <HAL_UART_RxCpltCallback+0x564>)
 8001a88:	f006 ff16 	bl	80088b8 <HAL_UART_Transmit>
						"\n[ERR] Not valid Value – When working with UART\n",
						48,
						HAL_MAX_DELAY);
				HAL_UART_Transmit(&huart2,
 8001a8c:	f04f 33ff 	mov.w	r3, #4294967295
 8001a90:	2230      	movs	r2, #48	; 0x30
 8001a92:	4915      	ldr	r1, [pc, #84]	; (8001ae8 <HAL_UART_RxCpltCallback+0x584>)
 8001a94:	480d      	ldr	r0, [pc, #52]	; (8001acc <HAL_UART_RxCpltCallback+0x568>)
 8001a96:	f006 ff0f 	bl	80088b8 <HAL_UART_Transmit>
 8001a9a:	e004      	b.n	8001aa6 <HAL_UART_RxCpltCallback+0x542>
					if (seven_segment.digits[0] > input[10] - 48) {
 8001a9c:	bf00      	nop
 8001a9e:	e002      	b.n	8001aa6 <HAL_UART_RxCpltCallback+0x542>
					if (seven_segment.digits[1] > input[9] - 48) {
 8001aa0:	bf00      	nop
 8001aa2:	e000      	b.n	8001aa6 <HAL_UART_RxCpltCallback+0x542>
					if (seven_segment.digits[2] > input[10] - 48) {
 8001aa4:	bf00      	nop
						"\n[ERR] Not valid Value – When working with UART\n",
						48,
						HAL_MAX_DELAY);
			}
			printTime();
 8001aa6:	f7ff fa87 	bl	8000fb8 <printTime>
		}

	}
}
 8001aaa:	bf00      	nop
 8001aac:	3760      	adds	r7, #96	; 0x60
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	bd80      	pop	{r7, pc}
 8001ab2:	bf00      	nop
 8001ab4:	0800a924 	.word	0x0800a924
 8001ab8:	2000012c 	.word	0x2000012c
 8001abc:	20000129 	.word	0x20000129
 8001ac0:	20000010 	.word	0x20000010
 8001ac4:	0800a930 	.word	0x0800a930
 8001ac8:	200003ec 	.word	0x200003ec
 8001acc:	20000474 	.word	0x20000474
 8001ad0:	0800a94c 	.word	0x0800a94c
 8001ad4:	0800a914 	.word	0x0800a914
 8001ad8:	0800a968 	.word	0x0800a968
 8001adc:	2000012a 	.word	0x2000012a
 8001ae0:	0800a974 	.word	0x0800a974
 8001ae4:	0800a990 	.word	0x0800a990
 8001ae8:	0800a9ac 	.word	0x0800a9ac

08001aec <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b084      	sub	sp, #16
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM2) {
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001afc:	f040 80e7 	bne.w	8001cce <HAL_TIM_PeriodElapsedCallback+0x1e2>

		HAL_ADC_Start_IT(&hadc1);
 8001b00:	4875      	ldr	r0, [pc, #468]	; (8001cd8 <HAL_TIM_PeriodElapsedCallback+0x1ec>)
 8001b02:	f001 fddd 	bl	80036c0 <HAL_ADC_Start_IT>
		HAL_ADC_Start_IT(&hadc3);
 8001b06:	4875      	ldr	r0, [pc, #468]	; (8001cdc <HAL_TIM_PeriodElapsedCallback+0x1f0>)
 8001b08:	f001 fdda 	bl	80036c0 <HAL_ADC_Start_IT>
		counter++;
 8001b0c:	4b74      	ldr	r3, [pc, #464]	; (8001ce0 <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	3301      	adds	r3, #1
 8001b12:	4a73      	ldr	r2, [pc, #460]	; (8001ce0 <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 8001b14:	6013      	str	r3, [r2, #0]
		if (flag) {
 8001b16:	4b73      	ldr	r3, [pc, #460]	; (8001ce4 <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	f000 80d7 	beq.w	8001cce <HAL_TIM_PeriodElapsedCallback+0x1e2>

			if (buzzer == 1 && is_critical) {
 8001b20:	4b71      	ldr	r3, [pc, #452]	; (8001ce8 <HAL_TIM_PeriodElapsedCallback+0x1fc>)
 8001b22:	781b      	ldrb	r3, [r3, #0]
 8001b24:	2b01      	cmp	r3, #1
 8001b26:	d11c      	bne.n	8001b62 <HAL_TIM_PeriodElapsedCallback+0x76>
 8001b28:	4b70      	ldr	r3, [pc, #448]	; (8001cec <HAL_TIM_PeriodElapsedCallback+0x200>)
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d018      	beq.n	8001b62 <HAL_TIM_PeriodElapsedCallback+0x76>
				sin_index = (sin_index + 1) % 50;
 8001b30:	4b6f      	ldr	r3, [pc, #444]	; (8001cf0 <HAL_TIM_PeriodElapsedCallback+0x204>)
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	1c5a      	adds	r2, r3, #1
 8001b36:	4b6f      	ldr	r3, [pc, #444]	; (8001cf4 <HAL_TIM_PeriodElapsedCallback+0x208>)
 8001b38:	fb83 1302 	smull	r1, r3, r3, r2
 8001b3c:	1119      	asrs	r1, r3, #4
 8001b3e:	17d3      	asrs	r3, r2, #31
 8001b40:	1acb      	subs	r3, r1, r3
 8001b42:	2132      	movs	r1, #50	; 0x32
 8001b44:	fb01 f303 	mul.w	r3, r1, r3
 8001b48:	1ad3      	subs	r3, r2, r3
 8001b4a:	4a69      	ldr	r2, [pc, #420]	; (8001cf0 <HAL_TIM_PeriodElapsedCallback+0x204>)
 8001b4c:	6013      	str	r3, [r2, #0]
				PWM_Change_Tone(sine_table[sin_index], 50);
 8001b4e:	4b68      	ldr	r3, [pc, #416]	; (8001cf0 <HAL_TIM_PeriodElapsedCallback+0x204>)
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	4a69      	ldr	r2, [pc, #420]	; (8001cf8 <HAL_TIM_PeriodElapsedCallback+0x20c>)
 8001b54:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001b58:	2132      	movs	r1, #50	; 0x32
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	f7ff f902 	bl	8000d64 <PWM_Change_Tone>
 8001b60:	e044      	b.n	8001bec <HAL_TIM_PeriodElapsedCallback+0x100>
			} else if (buzzer == 2 && is_critical) {
 8001b62:	4b61      	ldr	r3, [pc, #388]	; (8001ce8 <HAL_TIM_PeriodElapsedCallback+0x1fc>)
 8001b64:	781b      	ldrb	r3, [r3, #0]
 8001b66:	2b02      	cmp	r3, #2
 8001b68:	d119      	bne.n	8001b9e <HAL_TIM_PeriodElapsedCallback+0xb2>
 8001b6a:	4b60      	ldr	r3, [pc, #384]	; (8001cec <HAL_TIM_PeriodElapsedCallback+0x200>)
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d015      	beq.n	8001b9e <HAL_TIM_PeriodElapsedCallback+0xb2>
				sin_index = (sin_index + 1) % 4;
 8001b72:	4b5f      	ldr	r3, [pc, #380]	; (8001cf0 <HAL_TIM_PeriodElapsedCallback+0x204>)
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	3301      	adds	r3, #1
 8001b78:	425a      	negs	r2, r3
 8001b7a:	f003 0303 	and.w	r3, r3, #3
 8001b7e:	f002 0203 	and.w	r2, r2, #3
 8001b82:	bf58      	it	pl
 8001b84:	4253      	negpl	r3, r2
 8001b86:	4a5a      	ldr	r2, [pc, #360]	; (8001cf0 <HAL_TIM_PeriodElapsedCallback+0x204>)
 8001b88:	6013      	str	r3, [r2, #0]
				PWM_Change_Tone(square[sin_index], 50);
 8001b8a:	4b59      	ldr	r3, [pc, #356]	; (8001cf0 <HAL_TIM_PeriodElapsedCallback+0x204>)
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	4a5b      	ldr	r2, [pc, #364]	; (8001cfc <HAL_TIM_PeriodElapsedCallback+0x210>)
 8001b90:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001b94:	2132      	movs	r1, #50	; 0x32
 8001b96:	4618      	mov	r0, r3
 8001b98:	f7ff f8e4 	bl	8000d64 <PWM_Change_Tone>
 8001b9c:	e026      	b.n	8001bec <HAL_TIM_PeriodElapsedCallback+0x100>
			} else if (buzzer == 3 && is_critical) {
 8001b9e:	4b52      	ldr	r3, [pc, #328]	; (8001ce8 <HAL_TIM_PeriodElapsedCallback+0x1fc>)
 8001ba0:	781b      	ldrb	r3, [r3, #0]
 8001ba2:	2b03      	cmp	r3, #3
 8001ba4:	d11e      	bne.n	8001be4 <HAL_TIM_PeriodElapsedCallback+0xf8>
 8001ba6:	4b51      	ldr	r3, [pc, #324]	; (8001cec <HAL_TIM_PeriodElapsedCallback+0x200>)
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d01a      	beq.n	8001be4 <HAL_TIM_PeriodElapsedCallback+0xf8>
				sin_index = (sin_index + 1) % 11;
 8001bae:	4b50      	ldr	r3, [pc, #320]	; (8001cf0 <HAL_TIM_PeriodElapsedCallback+0x204>)
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	1c59      	adds	r1, r3, #1
 8001bb4:	4b52      	ldr	r3, [pc, #328]	; (8001d00 <HAL_TIM_PeriodElapsedCallback+0x214>)
 8001bb6:	fb83 2301 	smull	r2, r3, r3, r1
 8001bba:	105a      	asrs	r2, r3, #1
 8001bbc:	17cb      	asrs	r3, r1, #31
 8001bbe:	1ad2      	subs	r2, r2, r3
 8001bc0:	4613      	mov	r3, r2
 8001bc2:	009b      	lsls	r3, r3, #2
 8001bc4:	4413      	add	r3, r2
 8001bc6:	005b      	lsls	r3, r3, #1
 8001bc8:	4413      	add	r3, r2
 8001bca:	1aca      	subs	r2, r1, r3
 8001bcc:	4b48      	ldr	r3, [pc, #288]	; (8001cf0 <HAL_TIM_PeriodElapsedCallback+0x204>)
 8001bce:	601a      	str	r2, [r3, #0]
				PWM_Change_Tone(triangle[sin_index], 50);
 8001bd0:	4b47      	ldr	r3, [pc, #284]	; (8001cf0 <HAL_TIM_PeriodElapsedCallback+0x204>)
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	4a4b      	ldr	r2, [pc, #300]	; (8001d04 <HAL_TIM_PeriodElapsedCallback+0x218>)
 8001bd6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001bda:	2132      	movs	r1, #50	; 0x32
 8001bdc:	4618      	mov	r0, r3
 8001bde:	f7ff f8c1 	bl	8000d64 <PWM_Change_Tone>
 8001be2:	e003      	b.n	8001bec <HAL_TIM_PeriodElapsedCallback+0x100>
			} else {
				PWM_Change_Tone(0, 10);
 8001be4:	210a      	movs	r1, #10
 8001be6:	2000      	movs	r0, #0
 8001be8:	f7ff f8bc 	bl	8000d64 <PWM_Change_Tone>
			}

			int intensity = 100 * seven_segment.digits[0]
 8001bec:	4b46      	ldr	r3, [pc, #280]	; (8001d08 <HAL_TIM_PeriodElapsedCallback+0x21c>)
 8001bee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bf0:	2264      	movs	r2, #100	; 0x64
 8001bf2:	fb02 f103 	mul.w	r1, r2, r3
					+ ten_mili_second * 10;
 8001bf6:	4b45      	ldr	r3, [pc, #276]	; (8001d0c <HAL_TIM_PeriodElapsedCallback+0x220>)
 8001bf8:	681a      	ldr	r2, [r3, #0]
 8001bfa:	4613      	mov	r3, r2
 8001bfc:	009b      	lsls	r3, r3, #2
 8001bfe:	4413      	add	r3, r2
 8001c00:	005b      	lsls	r3, r3, #1
 8001c02:	440b      	add	r3, r1
			int intensity = 100 * seven_segment.digits[0]
 8001c04:	60fb      	str	r3, [r7, #12]

			if (seven_segment.digits[1] == 1) {
 8001c06:	4b40      	ldr	r3, [pc, #256]	; (8001d08 <HAL_TIM_PeriodElapsedCallback+0x21c>)
 8001c08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c0a:	2b01      	cmp	r3, #1
 8001c0c:	d110      	bne.n	8001c30 <HAL_TIM_PeriodElapsedCallback+0x144>
				__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, intensity);
 8001c0e:	4b40      	ldr	r3, [pc, #256]	; (8001d10 <HAL_TIM_PeriodElapsedCallback+0x224>)
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	68fa      	ldr	r2, [r7, #12]
 8001c14:	635a      	str	r2, [r3, #52]	; 0x34
				__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 0);
 8001c16:	4b3e      	ldr	r3, [pc, #248]	; (8001d10 <HAL_TIM_PeriodElapsedCallback+0x224>)
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	639a      	str	r2, [r3, #56]	; 0x38
				__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 0);
 8001c1e:	4b3c      	ldr	r3, [pc, #240]	; (8001d10 <HAL_TIM_PeriodElapsedCallback+0x224>)
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	2200      	movs	r2, #0
 8001c24:	63da      	str	r2, [r3, #60]	; 0x3c
				__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, 0);
 8001c26:	4b3b      	ldr	r3, [pc, #236]	; (8001d14 <HAL_TIM_PeriodElapsedCallback+0x228>)
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	635a      	str	r2, [r3, #52]	; 0x34
				__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, 0);
			}
		}

	}
}
 8001c2e:	e04e      	b.n	8001cce <HAL_TIM_PeriodElapsedCallback+0x1e2>
			} else if (seven_segment.digits[1] == 2) {
 8001c30:	4b35      	ldr	r3, [pc, #212]	; (8001d08 <HAL_TIM_PeriodElapsedCallback+0x21c>)
 8001c32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c34:	2b02      	cmp	r3, #2
 8001c36:	d110      	bne.n	8001c5a <HAL_TIM_PeriodElapsedCallback+0x16e>
				__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, intensity);
 8001c38:	4b35      	ldr	r3, [pc, #212]	; (8001d10 <HAL_TIM_PeriodElapsedCallback+0x224>)
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	68fa      	ldr	r2, [r7, #12]
 8001c3e:	635a      	str	r2, [r3, #52]	; 0x34
				__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, intensity);
 8001c40:	4b33      	ldr	r3, [pc, #204]	; (8001d10 <HAL_TIM_PeriodElapsedCallback+0x224>)
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	68fa      	ldr	r2, [r7, #12]
 8001c46:	639a      	str	r2, [r3, #56]	; 0x38
				__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 0);
 8001c48:	4b31      	ldr	r3, [pc, #196]	; (8001d10 <HAL_TIM_PeriodElapsedCallback+0x224>)
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	63da      	str	r2, [r3, #60]	; 0x3c
				__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, 0);
 8001c50:	4b30      	ldr	r3, [pc, #192]	; (8001d14 <HAL_TIM_PeriodElapsedCallback+0x228>)
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	2200      	movs	r2, #0
 8001c56:	635a      	str	r2, [r3, #52]	; 0x34
}
 8001c58:	e039      	b.n	8001cce <HAL_TIM_PeriodElapsedCallback+0x1e2>
			} else if (seven_segment.digits[1] == 3) {
 8001c5a:	4b2b      	ldr	r3, [pc, #172]	; (8001d08 <HAL_TIM_PeriodElapsedCallback+0x21c>)
 8001c5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c5e:	2b03      	cmp	r3, #3
 8001c60:	d110      	bne.n	8001c84 <HAL_TIM_PeriodElapsedCallback+0x198>
				__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, intensity);
 8001c62:	4b2b      	ldr	r3, [pc, #172]	; (8001d10 <HAL_TIM_PeriodElapsedCallback+0x224>)
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	68fa      	ldr	r2, [r7, #12]
 8001c68:	635a      	str	r2, [r3, #52]	; 0x34
				__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, intensity);
 8001c6a:	4b29      	ldr	r3, [pc, #164]	; (8001d10 <HAL_TIM_PeriodElapsedCallback+0x224>)
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	68fa      	ldr	r2, [r7, #12]
 8001c70:	639a      	str	r2, [r3, #56]	; 0x38
				__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, intensity);
 8001c72:	4b27      	ldr	r3, [pc, #156]	; (8001d10 <HAL_TIM_PeriodElapsedCallback+0x224>)
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	68fa      	ldr	r2, [r7, #12]
 8001c78:	63da      	str	r2, [r3, #60]	; 0x3c
				__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, 0);
 8001c7a:	4b26      	ldr	r3, [pc, #152]	; (8001d14 <HAL_TIM_PeriodElapsedCallback+0x228>)
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	2200      	movs	r2, #0
 8001c80:	635a      	str	r2, [r3, #52]	; 0x34
}
 8001c82:	e024      	b.n	8001cce <HAL_TIM_PeriodElapsedCallback+0x1e2>
			} else if (seven_segment.digits[1] == 4) {
 8001c84:	4b20      	ldr	r3, [pc, #128]	; (8001d08 <HAL_TIM_PeriodElapsedCallback+0x21c>)
 8001c86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c88:	2b04      	cmp	r3, #4
 8001c8a:	d110      	bne.n	8001cae <HAL_TIM_PeriodElapsedCallback+0x1c2>
				__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, intensity);
 8001c8c:	4b20      	ldr	r3, [pc, #128]	; (8001d10 <HAL_TIM_PeriodElapsedCallback+0x224>)
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	68fa      	ldr	r2, [r7, #12]
 8001c92:	635a      	str	r2, [r3, #52]	; 0x34
				__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, intensity);
 8001c94:	4b1e      	ldr	r3, [pc, #120]	; (8001d10 <HAL_TIM_PeriodElapsedCallback+0x224>)
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	68fa      	ldr	r2, [r7, #12]
 8001c9a:	639a      	str	r2, [r3, #56]	; 0x38
				__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, intensity);
 8001c9c:	4b1c      	ldr	r3, [pc, #112]	; (8001d10 <HAL_TIM_PeriodElapsedCallback+0x224>)
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	68fa      	ldr	r2, [r7, #12]
 8001ca2:	63da      	str	r2, [r3, #60]	; 0x3c
				__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, intensity);
 8001ca4:	4b1b      	ldr	r3, [pc, #108]	; (8001d14 <HAL_TIM_PeriodElapsedCallback+0x228>)
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	68fa      	ldr	r2, [r7, #12]
 8001caa:	635a      	str	r2, [r3, #52]	; 0x34
}
 8001cac:	e00f      	b.n	8001cce <HAL_TIM_PeriodElapsedCallback+0x1e2>
				__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0);
 8001cae:	4b18      	ldr	r3, [pc, #96]	; (8001d10 <HAL_TIM_PeriodElapsedCallback+0x224>)
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	635a      	str	r2, [r3, #52]	; 0x34
				__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 0);
 8001cb6:	4b16      	ldr	r3, [pc, #88]	; (8001d10 <HAL_TIM_PeriodElapsedCallback+0x224>)
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	2200      	movs	r2, #0
 8001cbc:	639a      	str	r2, [r3, #56]	; 0x38
				__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 0);
 8001cbe:	4b14      	ldr	r3, [pc, #80]	; (8001d10 <HAL_TIM_PeriodElapsedCallback+0x224>)
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	63da      	str	r2, [r3, #60]	; 0x3c
				__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, 0);
 8001cc6:	4b13      	ldr	r3, [pc, #76]	; (8001d14 <HAL_TIM_PeriodElapsedCallback+0x228>)
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	2200      	movs	r2, #0
 8001ccc:	635a      	str	r2, [r3, #52]	; 0x34
}
 8001cce:	bf00      	nop
 8001cd0:	3710      	adds	r7, #16
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	bd80      	pop	{r7, pc}
 8001cd6:	bf00      	nop
 8001cd8:	20000144 	.word	0x20000144
 8001cdc:	20000194 	.word	0x20000194
 8001ce0:	20000124 	.word	0x20000124
 8001ce4:	20000108 	.word	0x20000108
 8001ce8:	2000012a 	.word	0x2000012a
 8001cec:	20000120 	.word	0x20000120
 8001cf0:	20000100 	.word	0x20000100
 8001cf4:	51eb851f 	.word	0x51eb851f
 8001cf8:	0800a9e8 	.word	0x0800a9e8
 8001cfc:	0800aa4c 	.word	0x0800aa4c
 8001d00:	2e8ba2e9 	.word	0x2e8ba2e9
 8001d04:	0800aa54 	.word	0x0800aa54
 8001d08:	20000010 	.word	0x20000010
 8001d0c:	20000104 	.word	0x20000104
 8001d10:	200002bc 	.word	0x200002bc
 8001d14:	200003a0 	.word	0x200003a0

08001d18 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) {
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	b084      	sub	sp, #16
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]
	if (hadc->Instance == ADC1) {
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001d28:	d14b      	bne.n	8001dc2 <HAL_ADC_ConvCpltCallback+0xaa>

		ten_mili_second = HAL_ADC_GetValue(&hadc1);
 8001d2a:	4836      	ldr	r0, [pc, #216]	; (8001e04 <HAL_ADC_ConvCpltCallback+0xec>)
 8001d2c:	f001 fe08 	bl	8003940 <HAL_ADC_GetValue>
 8001d30:	4603      	mov	r3, r0
 8001d32:	461a      	mov	r2, r3
 8001d34:	4b34      	ldr	r3, [pc, #208]	; (8001e08 <HAL_ADC_ConvCpltCallback+0xf0>)
 8001d36:	601a      	str	r2, [r3, #0]

		if (!flag) {
 8001d38:	4b34      	ldr	r3, [pc, #208]	; (8001e0c <HAL_ADC_ConvCpltCallback+0xf4>)
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d111      	bne.n	8001d64 <HAL_ADC_ConvCpltCallback+0x4c>
			threshold = 20 * ten_mili_second;
 8001d40:	4b31      	ldr	r3, [pc, #196]	; (8001e08 <HAL_ADC_ConvCpltCallback+0xf0>)
 8001d42:	681a      	ldr	r2, [r3, #0]
 8001d44:	4613      	mov	r3, r2
 8001d46:	009b      	lsls	r3, r3, #2
 8001d48:	4413      	add	r3, r2
 8001d4a:	009b      	lsls	r3, r3, #2
 8001d4c:	461a      	mov	r2, r3
 8001d4e:	4b30      	ldr	r3, [pc, #192]	; (8001e10 <HAL_ADC_ConvCpltCallback+0xf8>)
 8001d50:	601a      	str	r2, [r3, #0]
			seven_segment_set_num(threshold + base_sense);
 8001d52:	4b2f      	ldr	r3, [pc, #188]	; (8001e10 <HAL_ADC_ConvCpltCallback+0xf8>)
 8001d54:	681a      	ldr	r2, [r3, #0]
 8001d56:	4b2f      	ldr	r3, [pc, #188]	; (8001e14 <HAL_ADC_ConvCpltCallback+0xfc>)
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	4413      	add	r3, r2
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	f7fe feff 	bl	8000b60 <seven_segment_set_num>
 8001d62:	e02e      	b.n	8001dc2 <HAL_ADC_ConvCpltCallback+0xaa>
//			unsigned char data[100] = "SALAM";
//			int n = sprintf(data, "%d\n", threshold + base_sense);
//			HAL_UART_Transmit(&huart1, data, n, 1000);
		} else {

			double y = ten_mili_second / 62.0;
 8001d64:	4b28      	ldr	r3, [pc, #160]	; (8001e08 <HAL_ADC_ConvCpltCallback+0xf0>)
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	4618      	mov	r0, r3
 8001d6a:	f7fe fbdb 	bl	8000524 <__aeabi_i2d>
 8001d6e:	f04f 0200 	mov.w	r2, #0
 8001d72:	4b29      	ldr	r3, [pc, #164]	; (8001e18 <HAL_ADC_ConvCpltCallback+0x100>)
 8001d74:	f7fe fd6a 	bl	800084c <__aeabi_ddiv>
 8001d78:	4602      	mov	r2, r0
 8001d7a:	460b      	mov	r3, r1
 8001d7c:	e9c7 2302 	strd	r2, r3, [r7, #8]
			if (seven_segment.digits[0] == 0)
 8001d80:	4b26      	ldr	r3, [pc, #152]	; (8001e1c <HAL_ADC_ConvCpltCallback+0x104>)
 8001d82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d103      	bne.n	8001d90 <HAL_ADC_ConvCpltCallback+0x78>
				ten_mili_second = 0;
 8001d88:	4b1f      	ldr	r3, [pc, #124]	; (8001e08 <HAL_ADC_ConvCpltCallback+0xf0>)
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	601a      	str	r2, [r3, #0]
 8001d8e:	e018      	b.n	8001dc2 <HAL_ADC_ConvCpltCallback+0xaa>
			else
				ten_mili_second = ((y) * 19) - 9;
 8001d90:	f04f 0200 	mov.w	r2, #0
 8001d94:	4b22      	ldr	r3, [pc, #136]	; (8001e20 <HAL_ADC_ConvCpltCallback+0x108>)
 8001d96:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001d9a:	f7fe fc2d 	bl	80005f8 <__aeabi_dmul>
 8001d9e:	4602      	mov	r2, r0
 8001da0:	460b      	mov	r3, r1
 8001da2:	4610      	mov	r0, r2
 8001da4:	4619      	mov	r1, r3
 8001da6:	f04f 0200 	mov.w	r2, #0
 8001daa:	4b1e      	ldr	r3, [pc, #120]	; (8001e24 <HAL_ADC_ConvCpltCallback+0x10c>)
 8001dac:	f7fe fa6c 	bl	8000288 <__aeabi_dsub>
 8001db0:	4602      	mov	r2, r0
 8001db2:	460b      	mov	r3, r1
 8001db4:	4610      	mov	r0, r2
 8001db6:	4619      	mov	r1, r3
 8001db8:	f7fe fe30 	bl	8000a1c <__aeabi_d2iz>
 8001dbc:	4603      	mov	r3, r0
 8001dbe:	4a12      	ldr	r2, [pc, #72]	; (8001e08 <HAL_ADC_ConvCpltCallback+0xf0>)
 8001dc0:	6013      	str	r3, [r2, #0]

//		unsigned char data[100] = "SALAM";
//		int n = sprintf(data, "%d\n", ten_mili_second);
//		HAL_UART_Transmit(&huart1, data, n, 1000);
	}
	if (hadc->Instance == ADC3) {
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	4a18      	ldr	r2, [pc, #96]	; (8001e28 <HAL_ADC_ConvCpltCallback+0x110>)
 8001dc8:	4293      	cmp	r3, r2
 8001dca:	d116      	bne.n	8001dfa <HAL_ADC_ConvCpltCallback+0xe2>
		if (!flag) {
 8001dcc:	4b0f      	ldr	r3, [pc, #60]	; (8001e0c <HAL_ADC_ConvCpltCallback+0xf4>)
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d109      	bne.n	8001de8 <HAL_ADC_ConvCpltCallback+0xd0>
			base_sense = HAL_ADC_GetValue(&hadc3);
 8001dd4:	4815      	ldr	r0, [pc, #84]	; (8001e2c <HAL_ADC_ConvCpltCallback+0x114>)
 8001dd6:	f001 fdb3 	bl	8003940 <HAL_ADC_GetValue>
 8001dda:	4603      	mov	r3, r0
 8001ddc:	461a      	mov	r2, r3
 8001dde:	4b0d      	ldr	r3, [pc, #52]	; (8001e14 <HAL_ADC_ConvCpltCallback+0xfc>)
 8001de0:	601a      	str	r2, [r3, #0]
			TurnOnLed();
 8001de2:	f7ff f87d 	bl	8000ee0 <TurnOnLed>
			checkwarn();

		}

	}
}
 8001de6:	e008      	b.n	8001dfa <HAL_ADC_ConvCpltCallback+0xe2>
			current_sense = HAL_ADC_GetValue(&hadc3);
 8001de8:	4810      	ldr	r0, [pc, #64]	; (8001e2c <HAL_ADC_ConvCpltCallback+0x114>)
 8001dea:	f001 fda9 	bl	8003940 <HAL_ADC_GetValue>
 8001dee:	4603      	mov	r3, r0
 8001df0:	461a      	mov	r2, r3
 8001df2:	4b0f      	ldr	r3, [pc, #60]	; (8001e30 <HAL_ADC_ConvCpltCallback+0x118>)
 8001df4:	601a      	str	r2, [r3, #0]
			checkwarn();
 8001df6:	f7ff f905 	bl	8001004 <checkwarn>
}
 8001dfa:	bf00      	nop
 8001dfc:	3710      	adds	r7, #16
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	bd80      	pop	{r7, pc}
 8001e02:	bf00      	nop
 8001e04:	20000144 	.word	0x20000144
 8001e08:	20000104 	.word	0x20000104
 8001e0c:	20000108 	.word	0x20000108
 8001e10:	2000010c 	.word	0x2000010c
 8001e14:	20000114 	.word	0x20000114
 8001e18:	404f0000 	.word	0x404f0000
 8001e1c:	20000010 	.word	0x20000010
 8001e20:	40330000 	.word	0x40330000
 8001e24:	40220000 	.word	0x40220000
 8001e28:	50000400 	.word	0x50000400
 8001e2c:	20000194 	.word	0x20000194
 8001e30:	20000118 	.word	0x20000118

08001e34 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001e38:	f001 f9e8 	bl	800320c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001e3c:	f000 f87e 	bl	8001f3c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001e40:	f000 fd2a 	bl	8002898 <MX_GPIO_Init>
  MX_I2C1_Init();
 8001e44:	f000 f9cc 	bl	80021e0 <MX_I2C1_Init>
  MX_SPI1_Init();
 8001e48:	f000 fa64 	bl	8002314 <MX_SPI1_Init>
  MX_USB_PCD_Init();
 8001e4c:	f000 fd02 	bl	8002854 <MX_USB_PCD_Init>
  MX_TIM1_Init();
 8001e50:	f000 fa9e 	bl	8002390 <MX_TIM1_Init>
  MX_TIM2_Init();
 8001e54:	f000 fb60 	bl	8002518 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001e58:	f000 fbac 	bl	80025b4 <MX_TIM3_Init>
  MX_TIM4_Init();
 8001e5c:	f000 fc22 	bl	80026a4 <MX_TIM4_Init>
  MX_USART1_UART_Init();
 8001e60:	f000 fc98 	bl	8002794 <MX_USART1_UART_Init>
  MX_ADC1_Init();
 8001e64:	f000 f8dc 	bl	8002020 <MX_ADC1_Init>
  MX_ADC3_Init();
 8001e68:	f000 f94a 	bl	8002100 <MX_ADC3_Init>
  MX_RTC_Init();
 8001e6c:	f000 f9f8 	bl	8002260 <MX_RTC_Init>
  MX_USART2_UART_Init();
 8001e70:	f000 fcc0 	bl	80027f4 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
	HAL_TIM_Base_Start_IT(&htim2);
 8001e74:	4827      	ldr	r0, [pc, #156]	; (8001f14 <main+0xe0>)
 8001e76:	f005 fa9d 	bl	80073b4 <HAL_TIM_Base_Start_IT>
//	HAL_TIM_B
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001e7a:	2100      	movs	r1, #0
 8001e7c:	4826      	ldr	r0, [pc, #152]	; (8001f18 <main+0xe4>)
 8001e7e:	f005 fb65 	bl	800754c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8001e82:	2104      	movs	r1, #4
 8001e84:	4824      	ldr	r0, [pc, #144]	; (8001f18 <main+0xe4>)
 8001e86:	f005 fb61 	bl	800754c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8001e8a:	2108      	movs	r1, #8
 8001e8c:	4822      	ldr	r0, [pc, #136]	; (8001f18 <main+0xe4>)
 8001e8e:	f005 fb5d 	bl	800754c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8001e92:	2100      	movs	r1, #0
 8001e94:	4821      	ldr	r0, [pc, #132]	; (8001f1c <main+0xe8>)
 8001e96:	f005 fb59 	bl	800754c <HAL_TIM_PWM_Start>
	HAL_ADC_Start_IT(&hadc1);
 8001e9a:	4821      	ldr	r0, [pc, #132]	; (8001f20 <main+0xec>)
 8001e9c:	f001 fc10 	bl	80036c0 <HAL_ADC_Start_IT>
	HAL_ADC_Start_IT(&hadc3);
 8001ea0:	4820      	ldr	r0, [pc, #128]	; (8001f24 <main+0xf0>)
 8001ea2:	f001 fc0d 	bl	80036c0 <HAL_ADC_Start_IT>
	uart_rx_enable_it();
 8001ea6:	f7ff fb4f 	bl	8001548 <uart_rx_enable_it>
	programInit();
 8001eaa:	f7fe ff3d 	bl	8000d28 <programInit>
	PWM_Start();
 8001eae:	f7fe ff49 	bl	8000d44 <PWM_Start>
//
	myTime.Hours = 4;
 8001eb2:	4b1d      	ldr	r3, [pc, #116]	; (8001f28 <main+0xf4>)
 8001eb4:	2204      	movs	r2, #4
 8001eb6:	701a      	strb	r2, [r3, #0]
	myTime.Minutes = 3;
 8001eb8:	4b1b      	ldr	r3, [pc, #108]	; (8001f28 <main+0xf4>)
 8001eba:	2203      	movs	r2, #3
 8001ebc:	705a      	strb	r2, [r3, #1]
	myTime.Seconds = 32;
 8001ebe:	4b1a      	ldr	r3, [pc, #104]	; (8001f28 <main+0xf4>)
 8001ec0:	2220      	movs	r2, #32
 8001ec2:	709a      	strb	r2, [r3, #2]
	HAL_RTC_SetTime(&hrtc, &myTime, RTC_FORMAT_BIN);
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	4918      	ldr	r1, [pc, #96]	; (8001f28 <main+0xf4>)
 8001ec8:	4818      	ldr	r0, [pc, #96]	; (8001f2c <main+0xf8>)
 8001eca:	f004 fee8 	bl	8006c9e <HAL_RTC_SetTime>
	HAL_RTC_GetTime(&hrtc, &myTime, RTC_FORMAT_BIN);
 8001ece:	2200      	movs	r2, #0
 8001ed0:	4915      	ldr	r1, [pc, #84]	; (8001f28 <main+0xf4>)
 8001ed2:	4816      	ldr	r0, [pc, #88]	; (8001f2c <main+0xf8>)
 8001ed4:	f004 ff7d 	bl	8006dd2 <HAL_RTC_GetTime>
	HAL_RTC_SetDate(&hrtc, &myDate, RTC_FORMAT_BIN);
 8001ed8:	2200      	movs	r2, #0
 8001eda:	4915      	ldr	r1, [pc, #84]	; (8001f30 <main+0xfc>)
 8001edc:	4813      	ldr	r0, [pc, #76]	; (8001f2c <main+0xf8>)
 8001ede:	f004 ffd6 	bl	8006e8e <HAL_RTC_SetDate>
	HAL_RTC_GetDate(&hrtc, &myDate, RTC_FORMAT_BIN);
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	4912      	ldr	r1, [pc, #72]	; (8001f30 <main+0xfc>)
 8001ee6:	4811      	ldr	r0, [pc, #68]	; (8001f2c <main+0xf8>)
 8001ee8:	f005 f855 	bl	8006f96 <HAL_RTC_GetDate>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
		programLoop();
 8001eec:	f7fe ff23 	bl	8000d36 <programLoop>

		HAL_RTC_GetTime(&hrtc, &myTime, RTC_FORMAT_BIN);
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	490d      	ldr	r1, [pc, #52]	; (8001f28 <main+0xf4>)
 8001ef4:	480d      	ldr	r0, [pc, #52]	; (8001f2c <main+0xf8>)
 8001ef6:	f004 ff6c 	bl	8006dd2 <HAL_RTC_GetTime>
		HAL_RTC_GetDate(&hrtc, &myDate, RTC_FORMAT_BIN);
 8001efa:	2200      	movs	r2, #0
 8001efc:	490c      	ldr	r1, [pc, #48]	; (8001f30 <main+0xfc>)
 8001efe:	480b      	ldr	r0, [pc, #44]	; (8001f2c <main+0xf8>)
 8001f00:	f005 f849 	bl	8006f96 <HAL_RTC_GetDate>

		HAL_UART_Transmit(&huart2, "reza\n", 5, HAL_MAX_DELAY);
 8001f04:	f04f 33ff 	mov.w	r3, #4294967295
 8001f08:	2205      	movs	r2, #5
 8001f0a:	490a      	ldr	r1, [pc, #40]	; (8001f34 <main+0x100>)
 8001f0c:	480a      	ldr	r0, [pc, #40]	; (8001f38 <main+0x104>)
 8001f0e:	f006 fcd3 	bl	80088b8 <HAL_UART_Transmit>
		programLoop();
 8001f12:	e7eb      	b.n	8001eec <main+0xb8>
 8001f14:	20000308 	.word	0x20000308
 8001f18:	200002bc 	.word	0x200002bc
 8001f1c:	200003a0 	.word	0x200003a0
 8001f20:	20000144 	.word	0x20000144
 8001f24:	20000194 	.word	0x20000194
 8001f28:	200007e8 	.word	0x200007e8
 8001f2c:	20000238 	.word	0x20000238
 8001f30:	200007fc 	.word	0x200007fc
 8001f34:	0800a9e0 	.word	0x0800a9e0
 8001f38:	20000474 	.word	0x20000474

08001f3c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	b09e      	sub	sp, #120	; 0x78
 8001f40:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001f42:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001f46:	2228      	movs	r2, #40	; 0x28
 8001f48:	2100      	movs	r1, #0
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	f007 ff7e 	bl	8009e4c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001f50:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001f54:	2200      	movs	r2, #0
 8001f56:	601a      	str	r2, [r3, #0]
 8001f58:	605a      	str	r2, [r3, #4]
 8001f5a:	609a      	str	r2, [r3, #8]
 8001f5c:	60da      	str	r2, [r3, #12]
 8001f5e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001f60:	463b      	mov	r3, r7
 8001f62:	223c      	movs	r2, #60	; 0x3c
 8001f64:	2100      	movs	r1, #0
 8001f66:	4618      	mov	r0, r3
 8001f68:	f007 ff70 	bl	8009e4c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI
 8001f6c:	230b      	movs	r3, #11
 8001f6e:	653b      	str	r3, [r7, #80]	; 0x50
                              |RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001f70:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001f74:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001f76:	2300      	movs	r3, #0
 8001f78:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001f7a:	2301      	movs	r3, #1
 8001f7c:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001f7e:	2310      	movs	r3, #16
 8001f80:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001f82:	2301      	movs	r3, #1
 8001f84:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001f86:	2302      	movs	r3, #2
 8001f88:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001f8a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001f8e:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8001f90:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001f94:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001f96:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001f9a:	4618      	mov	r0, r3
 8001f9c:	f003 f9d8 	bl	8005350 <HAL_RCC_OscConfig>
 8001fa0:	4603      	mov	r3, r0
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d001      	beq.n	8001faa <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8001fa6:	f000 fd31 	bl	8002a0c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001faa:	230f      	movs	r3, #15
 8001fac:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001fae:	2302      	movs	r3, #2
 8001fb0:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001fb6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001fba:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001fbc:	2300      	movs	r3, #0
 8001fbe:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001fc0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001fc4:	2101      	movs	r1, #1
 8001fc6:	4618      	mov	r0, r3
 8001fc8:	f004 fa00 	bl	80063cc <HAL_RCC_ClockConfig>
 8001fcc:	4603      	mov	r3, r0
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d001      	beq.n	8001fd6 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8001fd2:	f000 fd1b 	bl	8002a0c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_USART1
 8001fd6:	4b11      	ldr	r3, [pc, #68]	; (800201c <SystemClock_Config+0xe0>)
 8001fd8:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_I2C1
                              |RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_TIM1
                              |RCC_PERIPHCLK_ADC12|RCC_PERIPHCLK_ADC34;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001fda:	2300      	movs	r3, #0
 8001fdc:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001fde:	2300      	movs	r3, #0
 8001fe0:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 8001fe2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001fe6:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInit.Adc34ClockSelection = RCC_ADC34PLLCLK_DIV1;
 8001fe8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001fec:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8001fee:	2300      	movs	r3, #0
 8001ff0:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001ff2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001ff6:	607b      	str	r3, [r7, #4]
  PeriphClkInit.USBClockSelection = RCC_USBCLKSOURCE_PLL;
 8001ff8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001ffc:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 8001ffe:	2300      	movs	r3, #0
 8002000:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002002:	463b      	mov	r3, r7
 8002004:	4618      	mov	r0, r3
 8002006:	f004 fc17 	bl	8006838 <HAL_RCCEx_PeriphCLKConfig>
 800200a:	4603      	mov	r3, r0
 800200c:	2b00      	cmp	r3, #0
 800200e:	d001      	beq.n	8002014 <SystemClock_Config+0xd8>
  {
    Error_Handler();
 8002010:	f000 fcfc 	bl	8002a0c <Error_Handler>
  }
}
 8002014:	bf00      	nop
 8002016:	3778      	adds	r7, #120	; 0x78
 8002018:	46bd      	mov	sp, r7
 800201a:	bd80      	pop	{r7, pc}
 800201c:	000311a3 	.word	0x000311a3

08002020 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	b08a      	sub	sp, #40	; 0x28
 8002024:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8002026:	f107 031c 	add.w	r3, r7, #28
 800202a:	2200      	movs	r2, #0
 800202c:	601a      	str	r2, [r3, #0]
 800202e:	605a      	str	r2, [r3, #4]
 8002030:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8002032:	1d3b      	adds	r3, r7, #4
 8002034:	2200      	movs	r2, #0
 8002036:	601a      	str	r2, [r3, #0]
 8002038:	605a      	str	r2, [r3, #4]
 800203a:	609a      	str	r2, [r3, #8]
 800203c:	60da      	str	r2, [r3, #12]
 800203e:	611a      	str	r2, [r3, #16]
 8002040:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8002042:	4b2e      	ldr	r3, [pc, #184]	; (80020fc <MX_ADC1_Init+0xdc>)
 8002044:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8002048:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800204a:	4b2c      	ldr	r3, [pc, #176]	; (80020fc <MX_ADC1_Init+0xdc>)
 800204c:	2200      	movs	r2, #0
 800204e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_6B;
 8002050:	4b2a      	ldr	r3, [pc, #168]	; (80020fc <MX_ADC1_Init+0xdc>)
 8002052:	2218      	movs	r2, #24
 8002054:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8002056:	4b29      	ldr	r3, [pc, #164]	; (80020fc <MX_ADC1_Init+0xdc>)
 8002058:	2200      	movs	r2, #0
 800205a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800205c:	4b27      	ldr	r3, [pc, #156]	; (80020fc <MX_ADC1_Init+0xdc>)
 800205e:	2200      	movs	r2, #0
 8002060:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002062:	4b26      	ldr	r3, [pc, #152]	; (80020fc <MX_ADC1_Init+0xdc>)
 8002064:	2200      	movs	r2, #0
 8002066:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800206a:	4b24      	ldr	r3, [pc, #144]	; (80020fc <MX_ADC1_Init+0xdc>)
 800206c:	2200      	movs	r2, #0
 800206e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002070:	4b22      	ldr	r3, [pc, #136]	; (80020fc <MX_ADC1_Init+0xdc>)
 8002072:	2201      	movs	r2, #1
 8002074:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002076:	4b21      	ldr	r3, [pc, #132]	; (80020fc <MX_ADC1_Init+0xdc>)
 8002078:	2200      	movs	r2, #0
 800207a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800207c:	4b1f      	ldr	r3, [pc, #124]	; (80020fc <MX_ADC1_Init+0xdc>)
 800207e:	2201      	movs	r2, #1
 8002080:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8002082:	4b1e      	ldr	r3, [pc, #120]	; (80020fc <MX_ADC1_Init+0xdc>)
 8002084:	2200      	movs	r2, #0
 8002086:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800208a:	4b1c      	ldr	r3, [pc, #112]	; (80020fc <MX_ADC1_Init+0xdc>)
 800208c:	2204      	movs	r2, #4
 800208e:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8002090:	4b1a      	ldr	r3, [pc, #104]	; (80020fc <MX_ADC1_Init+0xdc>)
 8002092:	2200      	movs	r2, #0
 8002094:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8002096:	4b19      	ldr	r3, [pc, #100]	; (80020fc <MX_ADC1_Init+0xdc>)
 8002098:	2200      	movs	r2, #0
 800209a:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800209c:	4817      	ldr	r0, [pc, #92]	; (80020fc <MX_ADC1_Init+0xdc>)
 800209e:	f001 f92f 	bl	8003300 <HAL_ADC_Init>
 80020a2:	4603      	mov	r3, r0
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d001      	beq.n	80020ac <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 80020a8:	f000 fcb0 	bl	8002a0c <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80020ac:	2300      	movs	r3, #0
 80020ae:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80020b0:	f107 031c 	add.w	r3, r7, #28
 80020b4:	4619      	mov	r1, r3
 80020b6:	4811      	ldr	r0, [pc, #68]	; (80020fc <MX_ADC1_Init+0xdc>)
 80020b8:	f002 fa4a 	bl	8004550 <HAL_ADCEx_MultiModeConfigChannel>
 80020bc:	4603      	mov	r3, r0
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d001      	beq.n	80020c6 <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 80020c2:	f000 fca3 	bl	8002a0c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80020c6:	2302      	movs	r3, #2
 80020c8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80020ca:	2301      	movs	r3, #1
 80020cc:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80020ce:	2300      	movs	r3, #0
 80020d0:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80020d2:	2300      	movs	r3, #0
 80020d4:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80020d6:	2300      	movs	r3, #0
 80020d8:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80020da:	2300      	movs	r3, #0
 80020dc:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80020de:	1d3b      	adds	r3, r7, #4
 80020e0:	4619      	mov	r1, r3
 80020e2:	4806      	ldr	r0, [pc, #24]	; (80020fc <MX_ADC1_Init+0xdc>)
 80020e4:	f001 ff48 	bl	8003f78 <HAL_ADC_ConfigChannel>
 80020e8:	4603      	mov	r3, r0
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d001      	beq.n	80020f2 <MX_ADC1_Init+0xd2>
  {
    Error_Handler();
 80020ee:	f000 fc8d 	bl	8002a0c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80020f2:	bf00      	nop
 80020f4:	3728      	adds	r7, #40	; 0x28
 80020f6:	46bd      	mov	sp, r7
 80020f8:	bd80      	pop	{r7, pc}
 80020fa:	bf00      	nop
 80020fc:	20000144 	.word	0x20000144

08002100 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8002100:	b580      	push	{r7, lr}
 8002102:	b08a      	sub	sp, #40	; 0x28
 8002104:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8002106:	f107 031c 	add.w	r3, r7, #28
 800210a:	2200      	movs	r2, #0
 800210c:	601a      	str	r2, [r3, #0]
 800210e:	605a      	str	r2, [r3, #4]
 8002110:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8002112:	1d3b      	adds	r3, r7, #4
 8002114:	2200      	movs	r2, #0
 8002116:	601a      	str	r2, [r3, #0]
 8002118:	605a      	str	r2, [r3, #4]
 800211a:	609a      	str	r2, [r3, #8]
 800211c:	60da      	str	r2, [r3, #12]
 800211e:	611a      	str	r2, [r3, #16]
 8002120:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 8002122:	4b2d      	ldr	r3, [pc, #180]	; (80021d8 <MX_ADC3_Init+0xd8>)
 8002124:	4a2d      	ldr	r2, [pc, #180]	; (80021dc <MX_ADC3_Init+0xdc>)
 8002126:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8002128:	4b2b      	ldr	r3, [pc, #172]	; (80021d8 <MX_ADC3_Init+0xd8>)
 800212a:	2200      	movs	r2, #0
 800212c:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_10B;
 800212e:	4b2a      	ldr	r3, [pc, #168]	; (80021d8 <MX_ADC3_Init+0xd8>)
 8002130:	2208      	movs	r2, #8
 8002132:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8002134:	4b28      	ldr	r3, [pc, #160]	; (80021d8 <MX_ADC3_Init+0xd8>)
 8002136:	2200      	movs	r2, #0
 8002138:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 800213a:	4b27      	ldr	r3, [pc, #156]	; (80021d8 <MX_ADC3_Init+0xd8>)
 800213c:	2200      	movs	r2, #0
 800213e:	765a      	strb	r2, [r3, #25]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8002140:	4b25      	ldr	r3, [pc, #148]	; (80021d8 <MX_ADC3_Init+0xd8>)
 8002142:	2200      	movs	r2, #0
 8002144:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002148:	4b23      	ldr	r3, [pc, #140]	; (80021d8 <MX_ADC3_Init+0xd8>)
 800214a:	2200      	movs	r2, #0
 800214c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800214e:	4b22      	ldr	r3, [pc, #136]	; (80021d8 <MX_ADC3_Init+0xd8>)
 8002150:	2201      	movs	r2, #1
 8002152:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002154:	4b20      	ldr	r3, [pc, #128]	; (80021d8 <MX_ADC3_Init+0xd8>)
 8002156:	2200      	movs	r2, #0
 8002158:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 800215a:	4b1f      	ldr	r3, [pc, #124]	; (80021d8 <MX_ADC3_Init+0xd8>)
 800215c:	2201      	movs	r2, #1
 800215e:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8002160:	4b1d      	ldr	r3, [pc, #116]	; (80021d8 <MX_ADC3_Init+0xd8>)
 8002162:	2200      	movs	r2, #0
 8002164:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002168:	4b1b      	ldr	r3, [pc, #108]	; (80021d8 <MX_ADC3_Init+0xd8>)
 800216a:	2204      	movs	r2, #4
 800216c:	615a      	str	r2, [r3, #20]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 800216e:	4b1a      	ldr	r3, [pc, #104]	; (80021d8 <MX_ADC3_Init+0xd8>)
 8002170:	2200      	movs	r2, #0
 8002172:	761a      	strb	r2, [r3, #24]
  hadc3.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8002174:	4b18      	ldr	r3, [pc, #96]	; (80021d8 <MX_ADC3_Init+0xd8>)
 8002176:	2200      	movs	r2, #0
 8002178:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 800217a:	4817      	ldr	r0, [pc, #92]	; (80021d8 <MX_ADC3_Init+0xd8>)
 800217c:	f001 f8c0 	bl	8003300 <HAL_ADC_Init>
 8002180:	4603      	mov	r3, r0
 8002182:	2b00      	cmp	r3, #0
 8002184:	d001      	beq.n	800218a <MX_ADC3_Init+0x8a>
  {
    Error_Handler();
 8002186:	f000 fc41 	bl	8002a0c <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800218a:	2300      	movs	r3, #0
 800218c:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc3, &multimode) != HAL_OK)
 800218e:	f107 031c 	add.w	r3, r7, #28
 8002192:	4619      	mov	r1, r3
 8002194:	4810      	ldr	r0, [pc, #64]	; (80021d8 <MX_ADC3_Init+0xd8>)
 8002196:	f002 f9db 	bl	8004550 <HAL_ADCEx_MultiModeConfigChannel>
 800219a:	4603      	mov	r3, r0
 800219c:	2b00      	cmp	r3, #0
 800219e:	d001      	beq.n	80021a4 <MX_ADC3_Init+0xa4>
  {
    Error_Handler();
 80021a0:	f000 fc34 	bl	8002a0c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 80021a4:	2307      	movs	r3, #7
 80021a6:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80021a8:	2301      	movs	r3, #1
 80021aa:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80021ac:	2300      	movs	r3, #0
 80021ae:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80021b0:	2300      	movs	r3, #0
 80021b2:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80021b4:	2300      	movs	r3, #0
 80021b6:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80021b8:	2300      	movs	r3, #0
 80021ba:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80021bc:	1d3b      	adds	r3, r7, #4
 80021be:	4619      	mov	r1, r3
 80021c0:	4805      	ldr	r0, [pc, #20]	; (80021d8 <MX_ADC3_Init+0xd8>)
 80021c2:	f001 fed9 	bl	8003f78 <HAL_ADC_ConfigChannel>
 80021c6:	4603      	mov	r3, r0
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d001      	beq.n	80021d0 <MX_ADC3_Init+0xd0>
  {
    Error_Handler();
 80021cc:	f000 fc1e 	bl	8002a0c <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 80021d0:	bf00      	nop
 80021d2:	3728      	adds	r7, #40	; 0x28
 80021d4:	46bd      	mov	sp, r7
 80021d6:	bd80      	pop	{r7, pc}
 80021d8:	20000194 	.word	0x20000194
 80021dc:	50000400 	.word	0x50000400

080021e0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80021e4:	4b1b      	ldr	r3, [pc, #108]	; (8002254 <MX_I2C1_Init+0x74>)
 80021e6:	4a1c      	ldr	r2, [pc, #112]	; (8002258 <MX_I2C1_Init+0x78>)
 80021e8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 80021ea:	4b1a      	ldr	r3, [pc, #104]	; (8002254 <MX_I2C1_Init+0x74>)
 80021ec:	4a1b      	ldr	r2, [pc, #108]	; (800225c <MX_I2C1_Init+0x7c>)
 80021ee:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80021f0:	4b18      	ldr	r3, [pc, #96]	; (8002254 <MX_I2C1_Init+0x74>)
 80021f2:	2200      	movs	r2, #0
 80021f4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80021f6:	4b17      	ldr	r3, [pc, #92]	; (8002254 <MX_I2C1_Init+0x74>)
 80021f8:	2201      	movs	r2, #1
 80021fa:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80021fc:	4b15      	ldr	r3, [pc, #84]	; (8002254 <MX_I2C1_Init+0x74>)
 80021fe:	2200      	movs	r2, #0
 8002200:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8002202:	4b14      	ldr	r3, [pc, #80]	; (8002254 <MX_I2C1_Init+0x74>)
 8002204:	2200      	movs	r2, #0
 8002206:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002208:	4b12      	ldr	r3, [pc, #72]	; (8002254 <MX_I2C1_Init+0x74>)
 800220a:	2200      	movs	r2, #0
 800220c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800220e:	4b11      	ldr	r3, [pc, #68]	; (8002254 <MX_I2C1_Init+0x74>)
 8002210:	2200      	movs	r2, #0
 8002212:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002214:	4b0f      	ldr	r3, [pc, #60]	; (8002254 <MX_I2C1_Init+0x74>)
 8002216:	2200      	movs	r2, #0
 8002218:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800221a:	480e      	ldr	r0, [pc, #56]	; (8002254 <MX_I2C1_Init+0x74>)
 800221c:	f002 fea0 	bl	8004f60 <HAL_I2C_Init>
 8002220:	4603      	mov	r3, r0
 8002222:	2b00      	cmp	r3, #0
 8002224:	d001      	beq.n	800222a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8002226:	f000 fbf1 	bl	8002a0c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800222a:	2100      	movs	r1, #0
 800222c:	4809      	ldr	r0, [pc, #36]	; (8002254 <MX_I2C1_Init+0x74>)
 800222e:	f002 ff26 	bl	800507e <HAL_I2CEx_ConfigAnalogFilter>
 8002232:	4603      	mov	r3, r0
 8002234:	2b00      	cmp	r3, #0
 8002236:	d001      	beq.n	800223c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8002238:	f000 fbe8 	bl	8002a0c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800223c:	2100      	movs	r1, #0
 800223e:	4805      	ldr	r0, [pc, #20]	; (8002254 <MX_I2C1_Init+0x74>)
 8002240:	f002 ff68 	bl	8005114 <HAL_I2CEx_ConfigDigitalFilter>
 8002244:	4603      	mov	r3, r0
 8002246:	2b00      	cmp	r3, #0
 8002248:	d001      	beq.n	800224e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800224a:	f000 fbdf 	bl	8002a0c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800224e:	bf00      	nop
 8002250:	bd80      	pop	{r7, pc}
 8002252:	bf00      	nop
 8002254:	200001e4 	.word	0x200001e4
 8002258:	40005400 	.word	0x40005400
 800225c:	2000090e 	.word	0x2000090e

08002260 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8002260:	b580      	push	{r7, lr}
 8002262:	b086      	sub	sp, #24
 8002264:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8002266:	1d3b      	adds	r3, r7, #4
 8002268:	2200      	movs	r2, #0
 800226a:	601a      	str	r2, [r3, #0]
 800226c:	605a      	str	r2, [r3, #4]
 800226e:	609a      	str	r2, [r3, #8]
 8002270:	60da      	str	r2, [r3, #12]
 8002272:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8002274:	2300      	movs	r3, #0
 8002276:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8002278:	4b24      	ldr	r3, [pc, #144]	; (800230c <MX_RTC_Init+0xac>)
 800227a:	4a25      	ldr	r2, [pc, #148]	; (8002310 <MX_RTC_Init+0xb0>)
 800227c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800227e:	4b23      	ldr	r3, [pc, #140]	; (800230c <MX_RTC_Init+0xac>)
 8002280:	2200      	movs	r2, #0
 8002282:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 39;
 8002284:	4b21      	ldr	r3, [pc, #132]	; (800230c <MX_RTC_Init+0xac>)
 8002286:	2227      	movs	r2, #39	; 0x27
 8002288:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 999;
 800228a:	4b20      	ldr	r3, [pc, #128]	; (800230c <MX_RTC_Init+0xac>)
 800228c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002290:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8002292:	4b1e      	ldr	r3, [pc, #120]	; (800230c <MX_RTC_Init+0xac>)
 8002294:	2200      	movs	r2, #0
 8002296:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8002298:	4b1c      	ldr	r3, [pc, #112]	; (800230c <MX_RTC_Init+0xac>)
 800229a:	2200      	movs	r2, #0
 800229c:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800229e:	4b1b      	ldr	r3, [pc, #108]	; (800230c <MX_RTC_Init+0xac>)
 80022a0:	2200      	movs	r2, #0
 80022a2:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80022a4:	4819      	ldr	r0, [pc, #100]	; (800230c <MX_RTC_Init+0xac>)
 80022a6:	f004 fc77 	bl	8006b98 <HAL_RTC_Init>
 80022aa:	4603      	mov	r3, r0
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d001      	beq.n	80022b4 <MX_RTC_Init+0x54>
  {
    Error_Handler();
 80022b0:	f000 fbac 	bl	8002a0c <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0;
 80022b4:	2300      	movs	r3, #0
 80022b6:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0;
 80022b8:	2300      	movs	r3, #0
 80022ba:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0;
 80022bc:	2300      	movs	r3, #0
 80022be:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80022c0:	2300      	movs	r3, #0
 80022c2:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80022c4:	2300      	movs	r3, #0
 80022c6:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 80022c8:	1d3b      	adds	r3, r7, #4
 80022ca:	2200      	movs	r2, #0
 80022cc:	4619      	mov	r1, r3
 80022ce:	480f      	ldr	r0, [pc, #60]	; (800230c <MX_RTC_Init+0xac>)
 80022d0:	f004 fce5 	bl	8006c9e <HAL_RTC_SetTime>
 80022d4:	4603      	mov	r3, r0
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d001      	beq.n	80022de <MX_RTC_Init+0x7e>
  {
    Error_Handler();
 80022da:	f000 fb97 	bl	8002a0c <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 80022de:	2301      	movs	r3, #1
 80022e0:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 80022e2:	2301      	movs	r3, #1
 80022e4:	707b      	strb	r3, [r7, #1]
  sDate.Date = 1;
 80022e6:	2301      	movs	r3, #1
 80022e8:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0;
 80022ea:	2300      	movs	r3, #0
 80022ec:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 80022ee:	463b      	mov	r3, r7
 80022f0:	2200      	movs	r2, #0
 80022f2:	4619      	mov	r1, r3
 80022f4:	4805      	ldr	r0, [pc, #20]	; (800230c <MX_RTC_Init+0xac>)
 80022f6:	f004 fdca 	bl	8006e8e <HAL_RTC_SetDate>
 80022fa:	4603      	mov	r3, r0
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d001      	beq.n	8002304 <MX_RTC_Init+0xa4>
  {
    Error_Handler();
 8002300:	f000 fb84 	bl	8002a0c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8002304:	bf00      	nop
 8002306:	3718      	adds	r7, #24
 8002308:	46bd      	mov	sp, r7
 800230a:	bd80      	pop	{r7, pc}
 800230c:	20000238 	.word	0x20000238
 8002310:	40002800 	.word	0x40002800

08002314 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002314:	b580      	push	{r7, lr}
 8002316:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002318:	4b1b      	ldr	r3, [pc, #108]	; (8002388 <MX_SPI1_Init+0x74>)
 800231a:	4a1c      	ldr	r2, [pc, #112]	; (800238c <MX_SPI1_Init+0x78>)
 800231c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800231e:	4b1a      	ldr	r3, [pc, #104]	; (8002388 <MX_SPI1_Init+0x74>)
 8002320:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002324:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002326:	4b18      	ldr	r3, [pc, #96]	; (8002388 <MX_SPI1_Init+0x74>)
 8002328:	2200      	movs	r2, #0
 800232a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 800232c:	4b16      	ldr	r3, [pc, #88]	; (8002388 <MX_SPI1_Init+0x74>)
 800232e:	f44f 7240 	mov.w	r2, #768	; 0x300
 8002332:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002334:	4b14      	ldr	r3, [pc, #80]	; (8002388 <MX_SPI1_Init+0x74>)
 8002336:	2200      	movs	r2, #0
 8002338:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800233a:	4b13      	ldr	r3, [pc, #76]	; (8002388 <MX_SPI1_Init+0x74>)
 800233c:	2200      	movs	r2, #0
 800233e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002340:	4b11      	ldr	r3, [pc, #68]	; (8002388 <MX_SPI1_Init+0x74>)
 8002342:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002346:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8002348:	4b0f      	ldr	r3, [pc, #60]	; (8002388 <MX_SPI1_Init+0x74>)
 800234a:	2208      	movs	r2, #8
 800234c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800234e:	4b0e      	ldr	r3, [pc, #56]	; (8002388 <MX_SPI1_Init+0x74>)
 8002350:	2200      	movs	r2, #0
 8002352:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002354:	4b0c      	ldr	r3, [pc, #48]	; (8002388 <MX_SPI1_Init+0x74>)
 8002356:	2200      	movs	r2, #0
 8002358:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800235a:	4b0b      	ldr	r3, [pc, #44]	; (8002388 <MX_SPI1_Init+0x74>)
 800235c:	2200      	movs	r2, #0
 800235e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8002360:	4b09      	ldr	r3, [pc, #36]	; (8002388 <MX_SPI1_Init+0x74>)
 8002362:	2207      	movs	r2, #7
 8002364:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002366:	4b08      	ldr	r3, [pc, #32]	; (8002388 <MX_SPI1_Init+0x74>)
 8002368:	2200      	movs	r2, #0
 800236a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800236c:	4b06      	ldr	r3, [pc, #24]	; (8002388 <MX_SPI1_Init+0x74>)
 800236e:	2208      	movs	r2, #8
 8002370:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002372:	4805      	ldr	r0, [pc, #20]	; (8002388 <MX_SPI1_Init+0x74>)
 8002374:	f004 ff1c 	bl	80071b0 <HAL_SPI_Init>
 8002378:	4603      	mov	r3, r0
 800237a:	2b00      	cmp	r3, #0
 800237c:	d001      	beq.n	8002382 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800237e:	f000 fb45 	bl	8002a0c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002382:	bf00      	nop
 8002384:	bd80      	pop	{r7, pc}
 8002386:	bf00      	nop
 8002388:	20000258 	.word	0x20000258
 800238c:	40013000 	.word	0x40013000

08002390 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002390:	b580      	push	{r7, lr}
 8002392:	b09a      	sub	sp, #104	; 0x68
 8002394:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002396:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800239a:	2200      	movs	r2, #0
 800239c:	601a      	str	r2, [r3, #0]
 800239e:	605a      	str	r2, [r3, #4]
 80023a0:	609a      	str	r2, [r3, #8]
 80023a2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80023a4:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80023a8:	2200      	movs	r2, #0
 80023aa:	601a      	str	r2, [r3, #0]
 80023ac:	605a      	str	r2, [r3, #4]
 80023ae:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80023b0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80023b4:	2200      	movs	r2, #0
 80023b6:	601a      	str	r2, [r3, #0]
 80023b8:	605a      	str	r2, [r3, #4]
 80023ba:	609a      	str	r2, [r3, #8]
 80023bc:	60da      	str	r2, [r3, #12]
 80023be:	611a      	str	r2, [r3, #16]
 80023c0:	615a      	str	r2, [r3, #20]
 80023c2:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80023c4:	1d3b      	adds	r3, r7, #4
 80023c6:	222c      	movs	r2, #44	; 0x2c
 80023c8:	2100      	movs	r1, #0
 80023ca:	4618      	mov	r0, r3
 80023cc:	f007 fd3e 	bl	8009e4c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80023d0:	4b4f      	ldr	r3, [pc, #316]	; (8002510 <MX_TIM1_Init+0x180>)
 80023d2:	4a50      	ldr	r2, [pc, #320]	; (8002514 <MX_TIM1_Init+0x184>)
 80023d4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 47;
 80023d6:	4b4e      	ldr	r3, [pc, #312]	; (8002510 <MX_TIM1_Init+0x180>)
 80023d8:	222f      	movs	r2, #47	; 0x2f
 80023da:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80023dc:	4b4c      	ldr	r3, [pc, #304]	; (8002510 <MX_TIM1_Init+0x180>)
 80023de:	2200      	movs	r2, #0
 80023e0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 999;
 80023e2:	4b4b      	ldr	r3, [pc, #300]	; (8002510 <MX_TIM1_Init+0x180>)
 80023e4:	f240 32e7 	movw	r2, #999	; 0x3e7
 80023e8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80023ea:	4b49      	ldr	r3, [pc, #292]	; (8002510 <MX_TIM1_Init+0x180>)
 80023ec:	2200      	movs	r2, #0
 80023ee:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80023f0:	4b47      	ldr	r3, [pc, #284]	; (8002510 <MX_TIM1_Init+0x180>)
 80023f2:	2200      	movs	r2, #0
 80023f4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80023f6:	4b46      	ldr	r3, [pc, #280]	; (8002510 <MX_TIM1_Init+0x180>)
 80023f8:	2200      	movs	r2, #0
 80023fa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80023fc:	4844      	ldr	r0, [pc, #272]	; (8002510 <MX_TIM1_Init+0x180>)
 80023fe:	f004 ff82 	bl	8007306 <HAL_TIM_Base_Init>
 8002402:	4603      	mov	r3, r0
 8002404:	2b00      	cmp	r3, #0
 8002406:	d001      	beq.n	800240c <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8002408:	f000 fb00 	bl	8002a0c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800240c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002410:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002412:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002416:	4619      	mov	r1, r3
 8002418:	483d      	ldr	r0, [pc, #244]	; (8002510 <MX_TIM1_Init+0x180>)
 800241a:	f005 fbcb 	bl	8007bb4 <HAL_TIM_ConfigClockSource>
 800241e:	4603      	mov	r3, r0
 8002420:	2b00      	cmp	r3, #0
 8002422:	d001      	beq.n	8002428 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8002424:	f000 faf2 	bl	8002a0c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8002428:	4839      	ldr	r0, [pc, #228]	; (8002510 <MX_TIM1_Init+0x180>)
 800242a:	f005 f82d 	bl	8007488 <HAL_TIM_PWM_Init>
 800242e:	4603      	mov	r3, r0
 8002430:	2b00      	cmp	r3, #0
 8002432:	d001      	beq.n	8002438 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8002434:	f000 faea 	bl	8002a0c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002438:	2300      	movs	r3, #0
 800243a:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800243c:	2300      	movs	r3, #0
 800243e:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002440:	2300      	movs	r3, #0
 8002442:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002444:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002448:	4619      	mov	r1, r3
 800244a:	4831      	ldr	r0, [pc, #196]	; (8002510 <MX_TIM1_Init+0x180>)
 800244c:	f006 f8ca 	bl	80085e4 <HAL_TIMEx_MasterConfigSynchronization>
 8002450:	4603      	mov	r3, r0
 8002452:	2b00      	cmp	r3, #0
 8002454:	d001      	beq.n	800245a <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8002456:	f000 fad9 	bl	8002a0c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800245a:	2360      	movs	r3, #96	; 0x60
 800245c:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 800245e:	2300      	movs	r3, #0
 8002460:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002462:	2300      	movs	r3, #0
 8002464:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002466:	2300      	movs	r3, #0
 8002468:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800246a:	2300      	movs	r3, #0
 800246c:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800246e:	2300      	movs	r3, #0
 8002470:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002472:	2300      	movs	r3, #0
 8002474:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002476:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800247a:	2200      	movs	r2, #0
 800247c:	4619      	mov	r1, r3
 800247e:	4824      	ldr	r0, [pc, #144]	; (8002510 <MX_TIM1_Init+0x180>)
 8002480:	f005 fa84 	bl	800798c <HAL_TIM_PWM_ConfigChannel>
 8002484:	4603      	mov	r3, r0
 8002486:	2b00      	cmp	r3, #0
 8002488:	d001      	beq.n	800248e <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 800248a:	f000 fabf 	bl	8002a0c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800248e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002492:	2204      	movs	r2, #4
 8002494:	4619      	mov	r1, r3
 8002496:	481e      	ldr	r0, [pc, #120]	; (8002510 <MX_TIM1_Init+0x180>)
 8002498:	f005 fa78 	bl	800798c <HAL_TIM_PWM_ConfigChannel>
 800249c:	4603      	mov	r3, r0
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d001      	beq.n	80024a6 <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 80024a2:	f000 fab3 	bl	8002a0c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80024a6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80024aa:	2208      	movs	r2, #8
 80024ac:	4619      	mov	r1, r3
 80024ae:	4818      	ldr	r0, [pc, #96]	; (8002510 <MX_TIM1_Init+0x180>)
 80024b0:	f005 fa6c 	bl	800798c <HAL_TIM_PWM_ConfigChannel>
 80024b4:	4603      	mov	r3, r0
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d001      	beq.n	80024be <MX_TIM1_Init+0x12e>
  {
    Error_Handler();
 80024ba:	f000 faa7 	bl	8002a0c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80024be:	2300      	movs	r3, #0
 80024c0:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80024c2:	2300      	movs	r3, #0
 80024c4:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80024c6:	2300      	movs	r3, #0
 80024c8:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80024ca:	2300      	movs	r3, #0
 80024cc:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80024ce:	2300      	movs	r3, #0
 80024d0:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80024d2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80024d6:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80024d8:	2300      	movs	r3, #0
 80024da:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80024dc:	2300      	movs	r3, #0
 80024de:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80024e0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80024e4:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80024e6:	2300      	movs	r3, #0
 80024e8:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80024ea:	2300      	movs	r3, #0
 80024ec:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80024ee:	1d3b      	adds	r3, r7, #4
 80024f0:	4619      	mov	r1, r3
 80024f2:	4807      	ldr	r0, [pc, #28]	; (8002510 <MX_TIM1_Init+0x180>)
 80024f4:	f006 f8f6 	bl	80086e4 <HAL_TIMEx_ConfigBreakDeadTime>
 80024f8:	4603      	mov	r3, r0
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d001      	beq.n	8002502 <MX_TIM1_Init+0x172>
  {
    Error_Handler();
 80024fe:	f000 fa85 	bl	8002a0c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8002502:	4803      	ldr	r0, [pc, #12]	; (8002510 <MX_TIM1_Init+0x180>)
 8002504:	f000 fc44 	bl	8002d90 <HAL_TIM_MspPostInit>

}
 8002508:	bf00      	nop
 800250a:	3768      	adds	r7, #104	; 0x68
 800250c:	46bd      	mov	sp, r7
 800250e:	bd80      	pop	{r7, pc}
 8002510:	200002bc 	.word	0x200002bc
 8002514:	40012c00 	.word	0x40012c00

08002518 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002518:	b580      	push	{r7, lr}
 800251a:	b088      	sub	sp, #32
 800251c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800251e:	f107 0310 	add.w	r3, r7, #16
 8002522:	2200      	movs	r2, #0
 8002524:	601a      	str	r2, [r3, #0]
 8002526:	605a      	str	r2, [r3, #4]
 8002528:	609a      	str	r2, [r3, #8]
 800252a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800252c:	1d3b      	adds	r3, r7, #4
 800252e:	2200      	movs	r2, #0
 8002530:	601a      	str	r2, [r3, #0]
 8002532:	605a      	str	r2, [r3, #4]
 8002534:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002536:	4b1e      	ldr	r3, [pc, #120]	; (80025b0 <MX_TIM2_Init+0x98>)
 8002538:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800253c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 2400-1;
 800253e:	4b1c      	ldr	r3, [pc, #112]	; (80025b0 <MX_TIM2_Init+0x98>)
 8002540:	f640 125f 	movw	r2, #2399	; 0x95f
 8002544:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002546:	4b1a      	ldr	r3, [pc, #104]	; (80025b0 <MX_TIM2_Init+0x98>)
 8002548:	2200      	movs	r2, #0
 800254a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10000-1;
 800254c:	4b18      	ldr	r3, [pc, #96]	; (80025b0 <MX_TIM2_Init+0x98>)
 800254e:	f242 720f 	movw	r2, #9999	; 0x270f
 8002552:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002554:	4b16      	ldr	r3, [pc, #88]	; (80025b0 <MX_TIM2_Init+0x98>)
 8002556:	2200      	movs	r2, #0
 8002558:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800255a:	4b15      	ldr	r3, [pc, #84]	; (80025b0 <MX_TIM2_Init+0x98>)
 800255c:	2200      	movs	r2, #0
 800255e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002560:	4813      	ldr	r0, [pc, #76]	; (80025b0 <MX_TIM2_Init+0x98>)
 8002562:	f004 fed0 	bl	8007306 <HAL_TIM_Base_Init>
 8002566:	4603      	mov	r3, r0
 8002568:	2b00      	cmp	r3, #0
 800256a:	d001      	beq.n	8002570 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 800256c:	f000 fa4e 	bl	8002a0c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002570:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002574:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002576:	f107 0310 	add.w	r3, r7, #16
 800257a:	4619      	mov	r1, r3
 800257c:	480c      	ldr	r0, [pc, #48]	; (80025b0 <MX_TIM2_Init+0x98>)
 800257e:	f005 fb19 	bl	8007bb4 <HAL_TIM_ConfigClockSource>
 8002582:	4603      	mov	r3, r0
 8002584:	2b00      	cmp	r3, #0
 8002586:	d001      	beq.n	800258c <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 8002588:	f000 fa40 	bl	8002a0c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800258c:	2300      	movs	r3, #0
 800258e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002590:	2300      	movs	r3, #0
 8002592:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002594:	1d3b      	adds	r3, r7, #4
 8002596:	4619      	mov	r1, r3
 8002598:	4805      	ldr	r0, [pc, #20]	; (80025b0 <MX_TIM2_Init+0x98>)
 800259a:	f006 f823 	bl	80085e4 <HAL_TIMEx_MasterConfigSynchronization>
 800259e:	4603      	mov	r3, r0
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d001      	beq.n	80025a8 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 80025a4:	f000 fa32 	bl	8002a0c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80025a8:	bf00      	nop
 80025aa:	3720      	adds	r7, #32
 80025ac:	46bd      	mov	sp, r7
 80025ae:	bd80      	pop	{r7, pc}
 80025b0:	20000308 	.word	0x20000308

080025b4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80025b4:	b580      	push	{r7, lr}
 80025b6:	b08e      	sub	sp, #56	; 0x38
 80025b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80025ba:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80025be:	2200      	movs	r2, #0
 80025c0:	601a      	str	r2, [r3, #0]
 80025c2:	605a      	str	r2, [r3, #4]
 80025c4:	609a      	str	r2, [r3, #8]
 80025c6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80025c8:	f107 031c 	add.w	r3, r7, #28
 80025cc:	2200      	movs	r2, #0
 80025ce:	601a      	str	r2, [r3, #0]
 80025d0:	605a      	str	r2, [r3, #4]
 80025d2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80025d4:	463b      	mov	r3, r7
 80025d6:	2200      	movs	r2, #0
 80025d8:	601a      	str	r2, [r3, #0]
 80025da:	605a      	str	r2, [r3, #4]
 80025dc:	609a      	str	r2, [r3, #8]
 80025de:	60da      	str	r2, [r3, #12]
 80025e0:	611a      	str	r2, [r3, #16]
 80025e2:	615a      	str	r2, [r3, #20]
 80025e4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80025e6:	4b2d      	ldr	r3, [pc, #180]	; (800269c <MX_TIM3_Init+0xe8>)
 80025e8:	4a2d      	ldr	r2, [pc, #180]	; (80026a0 <MX_TIM3_Init+0xec>)
 80025ea:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80025ec:	4b2b      	ldr	r3, [pc, #172]	; (800269c <MX_TIM3_Init+0xe8>)
 80025ee:	2200      	movs	r2, #0
 80025f0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80025f2:	4b2a      	ldr	r3, [pc, #168]	; (800269c <MX_TIM3_Init+0xe8>)
 80025f4:	2200      	movs	r2, #0
 80025f6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80025f8:	4b28      	ldr	r3, [pc, #160]	; (800269c <MX_TIM3_Init+0xe8>)
 80025fa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80025fe:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002600:	4b26      	ldr	r3, [pc, #152]	; (800269c <MX_TIM3_Init+0xe8>)
 8002602:	2200      	movs	r2, #0
 8002604:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002606:	4b25      	ldr	r3, [pc, #148]	; (800269c <MX_TIM3_Init+0xe8>)
 8002608:	2200      	movs	r2, #0
 800260a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800260c:	4823      	ldr	r0, [pc, #140]	; (800269c <MX_TIM3_Init+0xe8>)
 800260e:	f004 fe7a 	bl	8007306 <HAL_TIM_Base_Init>
 8002612:	4603      	mov	r3, r0
 8002614:	2b00      	cmp	r3, #0
 8002616:	d001      	beq.n	800261c <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8002618:	f000 f9f8 	bl	8002a0c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800261c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002620:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002622:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002626:	4619      	mov	r1, r3
 8002628:	481c      	ldr	r0, [pc, #112]	; (800269c <MX_TIM3_Init+0xe8>)
 800262a:	f005 fac3 	bl	8007bb4 <HAL_TIM_ConfigClockSource>
 800262e:	4603      	mov	r3, r0
 8002630:	2b00      	cmp	r3, #0
 8002632:	d001      	beq.n	8002638 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8002634:	f000 f9ea 	bl	8002a0c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002638:	4818      	ldr	r0, [pc, #96]	; (800269c <MX_TIM3_Init+0xe8>)
 800263a:	f004 ff25 	bl	8007488 <HAL_TIM_PWM_Init>
 800263e:	4603      	mov	r3, r0
 8002640:	2b00      	cmp	r3, #0
 8002642:	d001      	beq.n	8002648 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8002644:	f000 f9e2 	bl	8002a0c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002648:	2300      	movs	r3, #0
 800264a:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800264c:	2300      	movs	r3, #0
 800264e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002650:	f107 031c 	add.w	r3, r7, #28
 8002654:	4619      	mov	r1, r3
 8002656:	4811      	ldr	r0, [pc, #68]	; (800269c <MX_TIM3_Init+0xe8>)
 8002658:	f005 ffc4 	bl	80085e4 <HAL_TIMEx_MasterConfigSynchronization>
 800265c:	4603      	mov	r3, r0
 800265e:	2b00      	cmp	r3, #0
 8002660:	d001      	beq.n	8002666 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8002662:	f000 f9d3 	bl	8002a0c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002666:	2360      	movs	r3, #96	; 0x60
 8002668:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800266a:	2300      	movs	r3, #0
 800266c:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800266e:	2300      	movs	r3, #0
 8002670:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002672:	2300      	movs	r3, #0
 8002674:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002676:	463b      	mov	r3, r7
 8002678:	2204      	movs	r2, #4
 800267a:	4619      	mov	r1, r3
 800267c:	4807      	ldr	r0, [pc, #28]	; (800269c <MX_TIM3_Init+0xe8>)
 800267e:	f005 f985 	bl	800798c <HAL_TIM_PWM_ConfigChannel>
 8002682:	4603      	mov	r3, r0
 8002684:	2b00      	cmp	r3, #0
 8002686:	d001      	beq.n	800268c <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8002688:	f000 f9c0 	bl	8002a0c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800268c:	4803      	ldr	r0, [pc, #12]	; (800269c <MX_TIM3_Init+0xe8>)
 800268e:	f000 fb7f 	bl	8002d90 <HAL_TIM_MspPostInit>

}
 8002692:	bf00      	nop
 8002694:	3738      	adds	r7, #56	; 0x38
 8002696:	46bd      	mov	sp, r7
 8002698:	bd80      	pop	{r7, pc}
 800269a:	bf00      	nop
 800269c:	20000354 	.word	0x20000354
 80026a0:	40000400 	.word	0x40000400

080026a4 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80026a4:	b580      	push	{r7, lr}
 80026a6:	b08e      	sub	sp, #56	; 0x38
 80026a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80026aa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80026ae:	2200      	movs	r2, #0
 80026b0:	601a      	str	r2, [r3, #0]
 80026b2:	605a      	str	r2, [r3, #4]
 80026b4:	609a      	str	r2, [r3, #8]
 80026b6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80026b8:	f107 031c 	add.w	r3, r7, #28
 80026bc:	2200      	movs	r2, #0
 80026be:	601a      	str	r2, [r3, #0]
 80026c0:	605a      	str	r2, [r3, #4]
 80026c2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80026c4:	463b      	mov	r3, r7
 80026c6:	2200      	movs	r2, #0
 80026c8:	601a      	str	r2, [r3, #0]
 80026ca:	605a      	str	r2, [r3, #4]
 80026cc:	609a      	str	r2, [r3, #8]
 80026ce:	60da      	str	r2, [r3, #12]
 80026d0:	611a      	str	r2, [r3, #16]
 80026d2:	615a      	str	r2, [r3, #20]
 80026d4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80026d6:	4b2d      	ldr	r3, [pc, #180]	; (800278c <MX_TIM4_Init+0xe8>)
 80026d8:	4a2d      	ldr	r2, [pc, #180]	; (8002790 <MX_TIM4_Init+0xec>)
 80026da:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 47;
 80026dc:	4b2b      	ldr	r3, [pc, #172]	; (800278c <MX_TIM4_Init+0xe8>)
 80026de:	222f      	movs	r2, #47	; 0x2f
 80026e0:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80026e2:	4b2a      	ldr	r3, [pc, #168]	; (800278c <MX_TIM4_Init+0xe8>)
 80026e4:	2200      	movs	r2, #0
 80026e6:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 999;
 80026e8:	4b28      	ldr	r3, [pc, #160]	; (800278c <MX_TIM4_Init+0xe8>)
 80026ea:	f240 32e7 	movw	r2, #999	; 0x3e7
 80026ee:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80026f0:	4b26      	ldr	r3, [pc, #152]	; (800278c <MX_TIM4_Init+0xe8>)
 80026f2:	2200      	movs	r2, #0
 80026f4:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80026f6:	4b25      	ldr	r3, [pc, #148]	; (800278c <MX_TIM4_Init+0xe8>)
 80026f8:	2200      	movs	r2, #0
 80026fa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80026fc:	4823      	ldr	r0, [pc, #140]	; (800278c <MX_TIM4_Init+0xe8>)
 80026fe:	f004 fe02 	bl	8007306 <HAL_TIM_Base_Init>
 8002702:	4603      	mov	r3, r0
 8002704:	2b00      	cmp	r3, #0
 8002706:	d001      	beq.n	800270c <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 8002708:	f000 f980 	bl	8002a0c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800270c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002710:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002712:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002716:	4619      	mov	r1, r3
 8002718:	481c      	ldr	r0, [pc, #112]	; (800278c <MX_TIM4_Init+0xe8>)
 800271a:	f005 fa4b 	bl	8007bb4 <HAL_TIM_ConfigClockSource>
 800271e:	4603      	mov	r3, r0
 8002720:	2b00      	cmp	r3, #0
 8002722:	d001      	beq.n	8002728 <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 8002724:	f000 f972 	bl	8002a0c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8002728:	4818      	ldr	r0, [pc, #96]	; (800278c <MX_TIM4_Init+0xe8>)
 800272a:	f004 fead 	bl	8007488 <HAL_TIM_PWM_Init>
 800272e:	4603      	mov	r3, r0
 8002730:	2b00      	cmp	r3, #0
 8002732:	d001      	beq.n	8002738 <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 8002734:	f000 f96a 	bl	8002a0c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002738:	2300      	movs	r3, #0
 800273a:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800273c:	2300      	movs	r3, #0
 800273e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002740:	f107 031c 	add.w	r3, r7, #28
 8002744:	4619      	mov	r1, r3
 8002746:	4811      	ldr	r0, [pc, #68]	; (800278c <MX_TIM4_Init+0xe8>)
 8002748:	f005 ff4c 	bl	80085e4 <HAL_TIMEx_MasterConfigSynchronization>
 800274c:	4603      	mov	r3, r0
 800274e:	2b00      	cmp	r3, #0
 8002750:	d001      	beq.n	8002756 <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 8002752:	f000 f95b 	bl	8002a0c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002756:	2360      	movs	r3, #96	; 0x60
 8002758:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800275a:	2300      	movs	r3, #0
 800275c:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800275e:	2300      	movs	r3, #0
 8002760:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002762:	2300      	movs	r3, #0
 8002764:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002766:	463b      	mov	r3, r7
 8002768:	2200      	movs	r2, #0
 800276a:	4619      	mov	r1, r3
 800276c:	4807      	ldr	r0, [pc, #28]	; (800278c <MX_TIM4_Init+0xe8>)
 800276e:	f005 f90d 	bl	800798c <HAL_TIM_PWM_ConfigChannel>
 8002772:	4603      	mov	r3, r0
 8002774:	2b00      	cmp	r3, #0
 8002776:	d001      	beq.n	800277c <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 8002778:	f000 f948 	bl	8002a0c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 800277c:	4803      	ldr	r0, [pc, #12]	; (800278c <MX_TIM4_Init+0xe8>)
 800277e:	f000 fb07 	bl	8002d90 <HAL_TIM_MspPostInit>

}
 8002782:	bf00      	nop
 8002784:	3738      	adds	r7, #56	; 0x38
 8002786:	46bd      	mov	sp, r7
 8002788:	bd80      	pop	{r7, pc}
 800278a:	bf00      	nop
 800278c:	200003a0 	.word	0x200003a0
 8002790:	40000800 	.word	0x40000800

08002794 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002794:	b580      	push	{r7, lr}
 8002796:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002798:	4b14      	ldr	r3, [pc, #80]	; (80027ec <MX_USART1_UART_Init+0x58>)
 800279a:	4a15      	ldr	r2, [pc, #84]	; (80027f0 <MX_USART1_UART_Init+0x5c>)
 800279c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 38400;
 800279e:	4b13      	ldr	r3, [pc, #76]	; (80027ec <MX_USART1_UART_Init+0x58>)
 80027a0:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 80027a4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80027a6:	4b11      	ldr	r3, [pc, #68]	; (80027ec <MX_USART1_UART_Init+0x58>)
 80027a8:	2200      	movs	r2, #0
 80027aa:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80027ac:	4b0f      	ldr	r3, [pc, #60]	; (80027ec <MX_USART1_UART_Init+0x58>)
 80027ae:	2200      	movs	r2, #0
 80027b0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80027b2:	4b0e      	ldr	r3, [pc, #56]	; (80027ec <MX_USART1_UART_Init+0x58>)
 80027b4:	2200      	movs	r2, #0
 80027b6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80027b8:	4b0c      	ldr	r3, [pc, #48]	; (80027ec <MX_USART1_UART_Init+0x58>)
 80027ba:	220c      	movs	r2, #12
 80027bc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80027be:	4b0b      	ldr	r3, [pc, #44]	; (80027ec <MX_USART1_UART_Init+0x58>)
 80027c0:	2200      	movs	r2, #0
 80027c2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80027c4:	4b09      	ldr	r3, [pc, #36]	; (80027ec <MX_USART1_UART_Init+0x58>)
 80027c6:	2200      	movs	r2, #0
 80027c8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80027ca:	4b08      	ldr	r3, [pc, #32]	; (80027ec <MX_USART1_UART_Init+0x58>)
 80027cc:	2200      	movs	r2, #0
 80027ce:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80027d0:	4b06      	ldr	r3, [pc, #24]	; (80027ec <MX_USART1_UART_Init+0x58>)
 80027d2:	2200      	movs	r2, #0
 80027d4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80027d6:	4805      	ldr	r0, [pc, #20]	; (80027ec <MX_USART1_UART_Init+0x58>)
 80027d8:	f006 f820 	bl	800881c <HAL_UART_Init>
 80027dc:	4603      	mov	r3, r0
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d001      	beq.n	80027e6 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80027e2:	f000 f913 	bl	8002a0c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80027e6:	bf00      	nop
 80027e8:	bd80      	pop	{r7, pc}
 80027ea:	bf00      	nop
 80027ec:	200003ec 	.word	0x200003ec
 80027f0:	40013800 	.word	0x40013800

080027f4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80027f4:	b580      	push	{r7, lr}
 80027f6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80027f8:	4b14      	ldr	r3, [pc, #80]	; (800284c <MX_USART2_UART_Init+0x58>)
 80027fa:	4a15      	ldr	r2, [pc, #84]	; (8002850 <MX_USART2_UART_Init+0x5c>)
 80027fc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 80027fe:	4b13      	ldr	r3, [pc, #76]	; (800284c <MX_USART2_UART_Init+0x58>)
 8002800:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8002804:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002806:	4b11      	ldr	r3, [pc, #68]	; (800284c <MX_USART2_UART_Init+0x58>)
 8002808:	2200      	movs	r2, #0
 800280a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800280c:	4b0f      	ldr	r3, [pc, #60]	; (800284c <MX_USART2_UART_Init+0x58>)
 800280e:	2200      	movs	r2, #0
 8002810:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002812:	4b0e      	ldr	r3, [pc, #56]	; (800284c <MX_USART2_UART_Init+0x58>)
 8002814:	2200      	movs	r2, #0
 8002816:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002818:	4b0c      	ldr	r3, [pc, #48]	; (800284c <MX_USART2_UART_Init+0x58>)
 800281a:	220c      	movs	r2, #12
 800281c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800281e:	4b0b      	ldr	r3, [pc, #44]	; (800284c <MX_USART2_UART_Init+0x58>)
 8002820:	2200      	movs	r2, #0
 8002822:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002824:	4b09      	ldr	r3, [pc, #36]	; (800284c <MX_USART2_UART_Init+0x58>)
 8002826:	2200      	movs	r2, #0
 8002828:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800282a:	4b08      	ldr	r3, [pc, #32]	; (800284c <MX_USART2_UART_Init+0x58>)
 800282c:	2200      	movs	r2, #0
 800282e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002830:	4b06      	ldr	r3, [pc, #24]	; (800284c <MX_USART2_UART_Init+0x58>)
 8002832:	2200      	movs	r2, #0
 8002834:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002836:	4805      	ldr	r0, [pc, #20]	; (800284c <MX_USART2_UART_Init+0x58>)
 8002838:	f005 fff0 	bl	800881c <HAL_UART_Init>
 800283c:	4603      	mov	r3, r0
 800283e:	2b00      	cmp	r3, #0
 8002840:	d001      	beq.n	8002846 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8002842:	f000 f8e3 	bl	8002a0c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002846:	bf00      	nop
 8002848:	bd80      	pop	{r7, pc}
 800284a:	bf00      	nop
 800284c:	20000474 	.word	0x20000474
 8002850:	40004400 	.word	0x40004400

08002854 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 8002854:	b580      	push	{r7, lr}
 8002856:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 8002858:	4b0d      	ldr	r3, [pc, #52]	; (8002890 <MX_USB_PCD_Init+0x3c>)
 800285a:	4a0e      	ldr	r2, [pc, #56]	; (8002894 <MX_USB_PCD_Init+0x40>)
 800285c:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800285e:	4b0c      	ldr	r3, [pc, #48]	; (8002890 <MX_USB_PCD_Init+0x3c>)
 8002860:	2208      	movs	r2, #8
 8002862:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8002864:	4b0a      	ldr	r3, [pc, #40]	; (8002890 <MX_USB_PCD_Init+0x3c>)
 8002866:	2202      	movs	r2, #2
 8002868:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800286a:	4b09      	ldr	r3, [pc, #36]	; (8002890 <MX_USB_PCD_Init+0x3c>)
 800286c:	2202      	movs	r2, #2
 800286e:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8002870:	4b07      	ldr	r3, [pc, #28]	; (8002890 <MX_USB_PCD_Init+0x3c>)
 8002872:	2200      	movs	r2, #0
 8002874:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8002876:	4b06      	ldr	r3, [pc, #24]	; (8002890 <MX_USB_PCD_Init+0x3c>)
 8002878:	2200      	movs	r2, #0
 800287a:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800287c:	4804      	ldr	r0, [pc, #16]	; (8002890 <MX_USB_PCD_Init+0x3c>)
 800287e:	f002 fc95 	bl	80051ac <HAL_PCD_Init>
 8002882:	4603      	mov	r3, r0
 8002884:	2b00      	cmp	r3, #0
 8002886:	d001      	beq.n	800288c <MX_USB_PCD_Init+0x38>
  {
    Error_Handler();
 8002888:	f000 f8c0 	bl	8002a0c <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 800288c:	bf00      	nop
 800288e:	bd80      	pop	{r7, pc}
 8002890:	200004fc 	.word	0x200004fc
 8002894:	40005c00 	.word	0x40005c00

08002898 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002898:	b580      	push	{r7, lr}
 800289a:	b08c      	sub	sp, #48	; 0x30
 800289c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800289e:	f107 031c 	add.w	r3, r7, #28
 80028a2:	2200      	movs	r2, #0
 80028a4:	601a      	str	r2, [r3, #0]
 80028a6:	605a      	str	r2, [r3, #4]
 80028a8:	609a      	str	r2, [r3, #8]
 80028aa:	60da      	str	r2, [r3, #12]
 80028ac:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80028ae:	4b53      	ldr	r3, [pc, #332]	; (80029fc <MX_GPIO_Init+0x164>)
 80028b0:	695b      	ldr	r3, [r3, #20]
 80028b2:	4a52      	ldr	r2, [pc, #328]	; (80029fc <MX_GPIO_Init+0x164>)
 80028b4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80028b8:	6153      	str	r3, [r2, #20]
 80028ba:	4b50      	ldr	r3, [pc, #320]	; (80029fc <MX_GPIO_Init+0x164>)
 80028bc:	695b      	ldr	r3, [r3, #20]
 80028be:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80028c2:	61bb      	str	r3, [r7, #24]
 80028c4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80028c6:	4b4d      	ldr	r3, [pc, #308]	; (80029fc <MX_GPIO_Init+0x164>)
 80028c8:	695b      	ldr	r3, [r3, #20]
 80028ca:	4a4c      	ldr	r2, [pc, #304]	; (80029fc <MX_GPIO_Init+0x164>)
 80028cc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80028d0:	6153      	str	r3, [r2, #20]
 80028d2:	4b4a      	ldr	r3, [pc, #296]	; (80029fc <MX_GPIO_Init+0x164>)
 80028d4:	695b      	ldr	r3, [r3, #20]
 80028d6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80028da:	617b      	str	r3, [r7, #20]
 80028dc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80028de:	4b47      	ldr	r3, [pc, #284]	; (80029fc <MX_GPIO_Init+0x164>)
 80028e0:	695b      	ldr	r3, [r3, #20]
 80028e2:	4a46      	ldr	r2, [pc, #280]	; (80029fc <MX_GPIO_Init+0x164>)
 80028e4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80028e8:	6153      	str	r3, [r2, #20]
 80028ea:	4b44      	ldr	r3, [pc, #272]	; (80029fc <MX_GPIO_Init+0x164>)
 80028ec:	695b      	ldr	r3, [r3, #20]
 80028ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80028f2:	613b      	str	r3, [r7, #16]
 80028f4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80028f6:	4b41      	ldr	r3, [pc, #260]	; (80029fc <MX_GPIO_Init+0x164>)
 80028f8:	695b      	ldr	r3, [r3, #20]
 80028fa:	4a40      	ldr	r2, [pc, #256]	; (80029fc <MX_GPIO_Init+0x164>)
 80028fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002900:	6153      	str	r3, [r2, #20]
 8002902:	4b3e      	ldr	r3, [pc, #248]	; (80029fc <MX_GPIO_Init+0x164>)
 8002904:	695b      	ldr	r3, [r3, #20]
 8002906:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800290a:	60fb      	str	r3, [r7, #12]
 800290c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800290e:	4b3b      	ldr	r3, [pc, #236]	; (80029fc <MX_GPIO_Init+0x164>)
 8002910:	695b      	ldr	r3, [r3, #20]
 8002912:	4a3a      	ldr	r2, [pc, #232]	; (80029fc <MX_GPIO_Init+0x164>)
 8002914:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002918:	6153      	str	r3, [r2, #20]
 800291a:	4b38      	ldr	r3, [pc, #224]	; (80029fc <MX_GPIO_Init+0x164>)
 800291c:	695b      	ldr	r3, [r3, #20]
 800291e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002922:	60bb      	str	r3, [r7, #8]
 8002924:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002926:	4b35      	ldr	r3, [pc, #212]	; (80029fc <MX_GPIO_Init+0x164>)
 8002928:	695b      	ldr	r3, [r3, #20]
 800292a:	4a34      	ldr	r2, [pc, #208]	; (80029fc <MX_GPIO_Init+0x164>)
 800292c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002930:	6153      	str	r3, [r2, #20]
 8002932:	4b32      	ldr	r3, [pc, #200]	; (80029fc <MX_GPIO_Init+0x164>)
 8002934:	695b      	ldr	r3, [r3, #20]
 8002936:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800293a:	607b      	str	r3, [r7, #4]
 800293c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 800293e:	2200      	movs	r2, #0
 8002940:	f64f 7108 	movw	r1, #65288	; 0xff08
 8002944:	482e      	ldr	r0, [pc, #184]	; (8002a00 <MX_GPIO_Init+0x168>)
 8002946:	f002 fac1 	bl	8004ecc <HAL_GPIO_WritePin>
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 800294a:	2200      	movs	r2, #0
 800294c:	f240 31cf 	movw	r1, #975	; 0x3cf
 8002950:	482c      	ldr	r0, [pc, #176]	; (8002a04 <MX_GPIO_Init+0x16c>)
 8002952:	f002 fabb 	bl	8004ecc <HAL_GPIO_WritePin>
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pins : DRDY_Pin MEMS_INT3_Pin MEMS_INT4_Pin MEMS_INT1_Pin
                           MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = DRDY_Pin|MEMS_INT3_Pin|MEMS_INT4_Pin|MEMS_INT1_Pin
 8002956:	2337      	movs	r3, #55	; 0x37
 8002958:	61fb      	str	r3, [r7, #28]
                          |MEMS_INT2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800295a:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 800295e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002960:	2300      	movs	r3, #0
 8002962:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002964:	f107 031c 	add.w	r3, r7, #28
 8002968:	4619      	mov	r1, r3
 800296a:	4825      	ldr	r0, [pc, #148]	; (8002a00 <MX_GPIO_Init+0x168>)
 800296c:	f002 f934 	bl	8004bd8 <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_I2C_SPI_Pin LD4_Pin LD3_Pin LD5_Pin
                           LD7_Pin LD9_Pin LD10_Pin LD8_Pin
                           LD6_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 8002970:	f64f 7308 	movw	r3, #65288	; 0xff08
 8002974:	61fb      	str	r3, [r7, #28]
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002976:	2301      	movs	r3, #1
 8002978:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800297a:	2300      	movs	r3, #0
 800297c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800297e:	2300      	movs	r3, #0
 8002980:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002982:	f107 031c 	add.w	r3, r7, #28
 8002986:	4619      	mov	r1, r3
 8002988:	481d      	ldr	r0, [pc, #116]	; (8002a00 <MX_GPIO_Init+0x168>)
 800298a:	f002 f925 	bl	8004bd8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 PC2 PC3
                           PC6 PC7 PC8 PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 800298e:	f240 33cf 	movw	r3, #975	; 0x3cf
 8002992:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002994:	2301      	movs	r3, #1
 8002996:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002998:	2300      	movs	r3, #0
 800299a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800299c:	2300      	movs	r3, #0
 800299e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80029a0:	f107 031c 	add.w	r3, r7, #28
 80029a4:	4619      	mov	r1, r3
 80029a6:	4817      	ldr	r0, [pc, #92]	; (8002a04 <MX_GPIO_Init+0x16c>)
 80029a8:	f002 f916 	bl	8004bd8 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80029ac:	2301      	movs	r3, #1
 80029ae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80029b0:	2300      	movs	r3, #0
 80029b2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029b4:	2300      	movs	r3, #0
 80029b6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80029b8:	f107 031c 	add.w	r3, r7, #28
 80029bc:	4619      	mov	r1, r3
 80029be:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80029c2:	f002 f909 	bl	8004bd8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80029c6:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80029ca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80029cc:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80029d0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80029d2:	2301      	movs	r3, #1
 80029d4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80029d6:	f107 031c 	add.w	r3, r7, #28
 80029da:	4619      	mov	r1, r3
 80029dc:	480a      	ldr	r0, [pc, #40]	; (8002a08 <MX_GPIO_Init+0x170>)
 80029de:	f002 f8fb 	bl	8004bd8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80029e2:	2200      	movs	r2, #0
 80029e4:	2100      	movs	r1, #0
 80029e6:	2028      	movs	r0, #40	; 0x28
 80029e8:	f002 f849 	bl	8004a7e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80029ec:	2028      	movs	r0, #40	; 0x28
 80029ee:	f002 f862 	bl	8004ab6 <HAL_NVIC_EnableIRQ>

}
 80029f2:	bf00      	nop
 80029f4:	3730      	adds	r7, #48	; 0x30
 80029f6:	46bd      	mov	sp, r7
 80029f8:	bd80      	pop	{r7, pc}
 80029fa:	bf00      	nop
 80029fc:	40021000 	.word	0x40021000
 8002a00:	48001000 	.word	0x48001000
 8002a04:	48000800 	.word	0x48000800
 8002a08:	48000c00 	.word	0x48000c00

08002a0c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002a0c:	b480      	push	{r7}
 8002a0e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002a10:	b672      	cpsid	i
}
 8002a12:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8002a14:	e7fe      	b.n	8002a14 <Error_Handler+0x8>
	...

08002a18 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002a18:	b580      	push	{r7, lr}
 8002a1a:	b082      	sub	sp, #8
 8002a1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a1e:	4b0f      	ldr	r3, [pc, #60]	; (8002a5c <HAL_MspInit+0x44>)
 8002a20:	699b      	ldr	r3, [r3, #24]
 8002a22:	4a0e      	ldr	r2, [pc, #56]	; (8002a5c <HAL_MspInit+0x44>)
 8002a24:	f043 0301 	orr.w	r3, r3, #1
 8002a28:	6193      	str	r3, [r2, #24]
 8002a2a:	4b0c      	ldr	r3, [pc, #48]	; (8002a5c <HAL_MspInit+0x44>)
 8002a2c:	699b      	ldr	r3, [r3, #24]
 8002a2e:	f003 0301 	and.w	r3, r3, #1
 8002a32:	607b      	str	r3, [r7, #4]
 8002a34:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002a36:	4b09      	ldr	r3, [pc, #36]	; (8002a5c <HAL_MspInit+0x44>)
 8002a38:	69db      	ldr	r3, [r3, #28]
 8002a3a:	4a08      	ldr	r2, [pc, #32]	; (8002a5c <HAL_MspInit+0x44>)
 8002a3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a40:	61d3      	str	r3, [r2, #28]
 8002a42:	4b06      	ldr	r3, [pc, #24]	; (8002a5c <HAL_MspInit+0x44>)
 8002a44:	69db      	ldr	r3, [r3, #28]
 8002a46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a4a:	603b      	str	r3, [r7, #0]
 8002a4c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_1);
 8002a4e:	2006      	movs	r0, #6
 8002a50:	f002 f80a 	bl	8004a68 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002a54:	bf00      	nop
 8002a56:	3708      	adds	r7, #8
 8002a58:	46bd      	mov	sp, r7
 8002a5a:	bd80      	pop	{r7, pc}
 8002a5c:	40021000 	.word	0x40021000

08002a60 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002a60:	b580      	push	{r7, lr}
 8002a62:	b08c      	sub	sp, #48	; 0x30
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a68:	f107 031c 	add.w	r3, r7, #28
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	601a      	str	r2, [r3, #0]
 8002a70:	605a      	str	r2, [r3, #4]
 8002a72:	609a      	str	r2, [r3, #8]
 8002a74:	60da      	str	r2, [r3, #12]
 8002a76:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002a80:	d12d      	bne.n	8002ade <HAL_ADC_MspInit+0x7e>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8002a82:	4b32      	ldr	r3, [pc, #200]	; (8002b4c <HAL_ADC_MspInit+0xec>)
 8002a84:	695b      	ldr	r3, [r3, #20]
 8002a86:	4a31      	ldr	r2, [pc, #196]	; (8002b4c <HAL_ADC_MspInit+0xec>)
 8002a88:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a8c:	6153      	str	r3, [r2, #20]
 8002a8e:	4b2f      	ldr	r3, [pc, #188]	; (8002b4c <HAL_ADC_MspInit+0xec>)
 8002a90:	695b      	ldr	r3, [r3, #20]
 8002a92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a96:	61bb      	str	r3, [r7, #24]
 8002a98:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a9a:	4b2c      	ldr	r3, [pc, #176]	; (8002b4c <HAL_ADC_MspInit+0xec>)
 8002a9c:	695b      	ldr	r3, [r3, #20]
 8002a9e:	4a2b      	ldr	r2, [pc, #172]	; (8002b4c <HAL_ADC_MspInit+0xec>)
 8002aa0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002aa4:	6153      	str	r3, [r2, #20]
 8002aa6:	4b29      	ldr	r3, [pc, #164]	; (8002b4c <HAL_ADC_MspInit+0xec>)
 8002aa8:	695b      	ldr	r3, [r3, #20]
 8002aaa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002aae:	617b      	str	r3, [r7, #20]
 8002ab0:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8002ab2:	2302      	movs	r3, #2
 8002ab4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002ab6:	2303      	movs	r3, #3
 8002ab8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002aba:	2300      	movs	r3, #0
 8002abc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002abe:	f107 031c 	add.w	r3, r7, #28
 8002ac2:	4619      	mov	r1, r3
 8002ac4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002ac8:	f002 f886 	bl	8004bd8 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 1, 0);
 8002acc:	2200      	movs	r2, #0
 8002ace:	2101      	movs	r1, #1
 8002ad0:	2012      	movs	r0, #18
 8002ad2:	f001 ffd4 	bl	8004a7e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8002ad6:	2012      	movs	r0, #18
 8002ad8:	f001 ffed 	bl	8004ab6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8002adc:	e031      	b.n	8002b42 <HAL_ADC_MspInit+0xe2>
  else if(hadc->Instance==ADC3)
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	4a1b      	ldr	r2, [pc, #108]	; (8002b50 <HAL_ADC_MspInit+0xf0>)
 8002ae4:	4293      	cmp	r3, r2
 8002ae6:	d12c      	bne.n	8002b42 <HAL_ADC_MspInit+0xe2>
    __HAL_RCC_ADC34_CLK_ENABLE();
 8002ae8:	4b18      	ldr	r3, [pc, #96]	; (8002b4c <HAL_ADC_MspInit+0xec>)
 8002aea:	695b      	ldr	r3, [r3, #20]
 8002aec:	4a17      	ldr	r2, [pc, #92]	; (8002b4c <HAL_ADC_MspInit+0xec>)
 8002aee:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002af2:	6153      	str	r3, [r2, #20]
 8002af4:	4b15      	ldr	r3, [pc, #84]	; (8002b4c <HAL_ADC_MspInit+0xec>)
 8002af6:	695b      	ldr	r3, [r3, #20]
 8002af8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002afc:	613b      	str	r3, [r7, #16]
 8002afe:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002b00:	4b12      	ldr	r3, [pc, #72]	; (8002b4c <HAL_ADC_MspInit+0xec>)
 8002b02:	695b      	ldr	r3, [r3, #20]
 8002b04:	4a11      	ldr	r2, [pc, #68]	; (8002b4c <HAL_ADC_MspInit+0xec>)
 8002b06:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002b0a:	6153      	str	r3, [r2, #20]
 8002b0c:	4b0f      	ldr	r3, [pc, #60]	; (8002b4c <HAL_ADC_MspInit+0xec>)
 8002b0e:	695b      	ldr	r3, [r3, #20]
 8002b10:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002b14:	60fb      	str	r3, [r7, #12]
 8002b16:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002b18:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002b1c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002b1e:	2303      	movs	r3, #3
 8002b20:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b22:	2300      	movs	r3, #0
 8002b24:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002b26:	f107 031c 	add.w	r3, r7, #28
 8002b2a:	4619      	mov	r1, r3
 8002b2c:	4809      	ldr	r0, [pc, #36]	; (8002b54 <HAL_ADC_MspInit+0xf4>)
 8002b2e:	f002 f853 	bl	8004bd8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC3_IRQn, 1, 0);
 8002b32:	2200      	movs	r2, #0
 8002b34:	2101      	movs	r1, #1
 8002b36:	202f      	movs	r0, #47	; 0x2f
 8002b38:	f001 ffa1 	bl	8004a7e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC3_IRQn);
 8002b3c:	202f      	movs	r0, #47	; 0x2f
 8002b3e:	f001 ffba 	bl	8004ab6 <HAL_NVIC_EnableIRQ>
}
 8002b42:	bf00      	nop
 8002b44:	3730      	adds	r7, #48	; 0x30
 8002b46:	46bd      	mov	sp, r7
 8002b48:	bd80      	pop	{r7, pc}
 8002b4a:	bf00      	nop
 8002b4c:	40021000 	.word	0x40021000
 8002b50:	50000400 	.word	0x50000400
 8002b54:	48000c00 	.word	0x48000c00

08002b58 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	b08a      	sub	sp, #40	; 0x28
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b60:	f107 0314 	add.w	r3, r7, #20
 8002b64:	2200      	movs	r2, #0
 8002b66:	601a      	str	r2, [r3, #0]
 8002b68:	605a      	str	r2, [r3, #4]
 8002b6a:	609a      	str	r2, [r3, #8]
 8002b6c:	60da      	str	r2, [r3, #12]
 8002b6e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	4a17      	ldr	r2, [pc, #92]	; (8002bd4 <HAL_I2C_MspInit+0x7c>)
 8002b76:	4293      	cmp	r3, r2
 8002b78:	d127      	bne.n	8002bca <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b7a:	4b17      	ldr	r3, [pc, #92]	; (8002bd8 <HAL_I2C_MspInit+0x80>)
 8002b7c:	695b      	ldr	r3, [r3, #20]
 8002b7e:	4a16      	ldr	r2, [pc, #88]	; (8002bd8 <HAL_I2C_MspInit+0x80>)
 8002b80:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002b84:	6153      	str	r3, [r2, #20]
 8002b86:	4b14      	ldr	r3, [pc, #80]	; (8002bd8 <HAL_I2C_MspInit+0x80>)
 8002b88:	695b      	ldr	r3, [r3, #20]
 8002b8a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002b8e:	613b      	str	r3, [r7, #16]
 8002b90:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 8002b92:	23c0      	movs	r3, #192	; 0xc0
 8002b94:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002b96:	2312      	movs	r3, #18
 8002b98:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002b9a:	2301      	movs	r3, #1
 8002b9c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002b9e:	2303      	movs	r3, #3
 8002ba0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002ba2:	2304      	movs	r3, #4
 8002ba4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ba6:	f107 0314 	add.w	r3, r7, #20
 8002baa:	4619      	mov	r1, r3
 8002bac:	480b      	ldr	r0, [pc, #44]	; (8002bdc <HAL_I2C_MspInit+0x84>)
 8002bae:	f002 f813 	bl	8004bd8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002bb2:	4b09      	ldr	r3, [pc, #36]	; (8002bd8 <HAL_I2C_MspInit+0x80>)
 8002bb4:	69db      	ldr	r3, [r3, #28]
 8002bb6:	4a08      	ldr	r2, [pc, #32]	; (8002bd8 <HAL_I2C_MspInit+0x80>)
 8002bb8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002bbc:	61d3      	str	r3, [r2, #28]
 8002bbe:	4b06      	ldr	r3, [pc, #24]	; (8002bd8 <HAL_I2C_MspInit+0x80>)
 8002bc0:	69db      	ldr	r3, [r3, #28]
 8002bc2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002bc6:	60fb      	str	r3, [r7, #12]
 8002bc8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002bca:	bf00      	nop
 8002bcc:	3728      	adds	r7, #40	; 0x28
 8002bce:	46bd      	mov	sp, r7
 8002bd0:	bd80      	pop	{r7, pc}
 8002bd2:	bf00      	nop
 8002bd4:	40005400 	.word	0x40005400
 8002bd8:	40021000 	.word	0x40021000
 8002bdc:	48000400 	.word	0x48000400

08002be0 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8002be0:	b480      	push	{r7}
 8002be2:	b085      	sub	sp, #20
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	4a0d      	ldr	r2, [pc, #52]	; (8002c24 <HAL_RTC_MspInit+0x44>)
 8002bee:	4293      	cmp	r3, r2
 8002bf0:	d111      	bne.n	8002c16 <HAL_RTC_MspInit+0x36>
 8002bf2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002bf6:	60fb      	str	r3, [r7, #12]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	fa93 f3a3 	rbit	r3, r3
 8002bfe:	60bb      	str	r3, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002c00:	68bb      	ldr	r3, [r7, #8]
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002c02:	fab3 f383 	clz	r3, r3
 8002c06:	b2db      	uxtb	r3, r3
 8002c08:	461a      	mov	r2, r3
 8002c0a:	4b07      	ldr	r3, [pc, #28]	; (8002c28 <HAL_RTC_MspInit+0x48>)
 8002c0c:	4413      	add	r3, r2
 8002c0e:	009b      	lsls	r3, r3, #2
 8002c10:	461a      	mov	r2, r3
 8002c12:	2301      	movs	r3, #1
 8002c14:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8002c16:	bf00      	nop
 8002c18:	3714      	adds	r7, #20
 8002c1a:	46bd      	mov	sp, r7
 8002c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c20:	4770      	bx	lr
 8002c22:	bf00      	nop
 8002c24:	40002800 	.word	0x40002800
 8002c28:	10908100 	.word	0x10908100

08002c2c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002c2c:	b580      	push	{r7, lr}
 8002c2e:	b08a      	sub	sp, #40	; 0x28
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c34:	f107 0314 	add.w	r3, r7, #20
 8002c38:	2200      	movs	r2, #0
 8002c3a:	601a      	str	r2, [r3, #0]
 8002c3c:	605a      	str	r2, [r3, #4]
 8002c3e:	609a      	str	r2, [r3, #8]
 8002c40:	60da      	str	r2, [r3, #12]
 8002c42:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	4a17      	ldr	r2, [pc, #92]	; (8002ca8 <HAL_SPI_MspInit+0x7c>)
 8002c4a:	4293      	cmp	r3, r2
 8002c4c:	d128      	bne.n	8002ca0 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002c4e:	4b17      	ldr	r3, [pc, #92]	; (8002cac <HAL_SPI_MspInit+0x80>)
 8002c50:	699b      	ldr	r3, [r3, #24]
 8002c52:	4a16      	ldr	r2, [pc, #88]	; (8002cac <HAL_SPI_MspInit+0x80>)
 8002c54:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002c58:	6193      	str	r3, [r2, #24]
 8002c5a:	4b14      	ldr	r3, [pc, #80]	; (8002cac <HAL_SPI_MspInit+0x80>)
 8002c5c:	699b      	ldr	r3, [r3, #24]
 8002c5e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002c62:	613b      	str	r3, [r7, #16]
 8002c64:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c66:	4b11      	ldr	r3, [pc, #68]	; (8002cac <HAL_SPI_MspInit+0x80>)
 8002c68:	695b      	ldr	r3, [r3, #20]
 8002c6a:	4a10      	ldr	r2, [pc, #64]	; (8002cac <HAL_SPI_MspInit+0x80>)
 8002c6c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002c70:	6153      	str	r3, [r2, #20]
 8002c72:	4b0e      	ldr	r3, [pc, #56]	; (8002cac <HAL_SPI_MspInit+0x80>)
 8002c74:	695b      	ldr	r3, [r3, #20]
 8002c76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c7a:	60fb      	str	r3, [r7, #12]
 8002c7c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MISOA7_Pin;
 8002c7e:	23e0      	movs	r3, #224	; 0xe0
 8002c80:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c82:	2302      	movs	r3, #2
 8002c84:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c86:	2300      	movs	r3, #0
 8002c88:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002c8a:	2303      	movs	r3, #3
 8002c8c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002c8e:	2305      	movs	r3, #5
 8002c90:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c92:	f107 0314 	add.w	r3, r7, #20
 8002c96:	4619      	mov	r1, r3
 8002c98:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002c9c:	f001 ff9c 	bl	8004bd8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002ca0:	bf00      	nop
 8002ca2:	3728      	adds	r7, #40	; 0x28
 8002ca4:	46bd      	mov	sp, r7
 8002ca6:	bd80      	pop	{r7, pc}
 8002ca8:	40013000 	.word	0x40013000
 8002cac:	40021000 	.word	0x40021000

08002cb0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002cb0:	b580      	push	{r7, lr}
 8002cb2:	b086      	sub	sp, #24
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	4a30      	ldr	r2, [pc, #192]	; (8002d80 <HAL_TIM_Base_MspInit+0xd0>)
 8002cbe:	4293      	cmp	r3, r2
 8002cc0:	d10c      	bne.n	8002cdc <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002cc2:	4b30      	ldr	r3, [pc, #192]	; (8002d84 <HAL_TIM_Base_MspInit+0xd4>)
 8002cc4:	699b      	ldr	r3, [r3, #24]
 8002cc6:	4a2f      	ldr	r2, [pc, #188]	; (8002d84 <HAL_TIM_Base_MspInit+0xd4>)
 8002cc8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002ccc:	6193      	str	r3, [r2, #24]
 8002cce:	4b2d      	ldr	r3, [pc, #180]	; (8002d84 <HAL_TIM_Base_MspInit+0xd4>)
 8002cd0:	699b      	ldr	r3, [r3, #24]
 8002cd2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002cd6:	617b      	str	r3, [r7, #20]
 8002cd8:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8002cda:	e04c      	b.n	8002d76 <HAL_TIM_Base_MspInit+0xc6>
  else if(htim_base->Instance==TIM2)
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ce4:	d114      	bne.n	8002d10 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002ce6:	4b27      	ldr	r3, [pc, #156]	; (8002d84 <HAL_TIM_Base_MspInit+0xd4>)
 8002ce8:	69db      	ldr	r3, [r3, #28]
 8002cea:	4a26      	ldr	r2, [pc, #152]	; (8002d84 <HAL_TIM_Base_MspInit+0xd4>)
 8002cec:	f043 0301 	orr.w	r3, r3, #1
 8002cf0:	61d3      	str	r3, [r2, #28]
 8002cf2:	4b24      	ldr	r3, [pc, #144]	; (8002d84 <HAL_TIM_Base_MspInit+0xd4>)
 8002cf4:	69db      	ldr	r3, [r3, #28]
 8002cf6:	f003 0301 	and.w	r3, r3, #1
 8002cfa:	613b      	str	r3, [r7, #16]
 8002cfc:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002cfe:	2200      	movs	r2, #0
 8002d00:	2100      	movs	r1, #0
 8002d02:	201c      	movs	r0, #28
 8002d04:	f001 febb 	bl	8004a7e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002d08:	201c      	movs	r0, #28
 8002d0a:	f001 fed4 	bl	8004ab6 <HAL_NVIC_EnableIRQ>
}
 8002d0e:	e032      	b.n	8002d76 <HAL_TIM_Base_MspInit+0xc6>
  else if(htim_base->Instance==TIM3)
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	4a1c      	ldr	r2, [pc, #112]	; (8002d88 <HAL_TIM_Base_MspInit+0xd8>)
 8002d16:	4293      	cmp	r3, r2
 8002d18:	d114      	bne.n	8002d44 <HAL_TIM_Base_MspInit+0x94>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002d1a:	4b1a      	ldr	r3, [pc, #104]	; (8002d84 <HAL_TIM_Base_MspInit+0xd4>)
 8002d1c:	69db      	ldr	r3, [r3, #28]
 8002d1e:	4a19      	ldr	r2, [pc, #100]	; (8002d84 <HAL_TIM_Base_MspInit+0xd4>)
 8002d20:	f043 0302 	orr.w	r3, r3, #2
 8002d24:	61d3      	str	r3, [r2, #28]
 8002d26:	4b17      	ldr	r3, [pc, #92]	; (8002d84 <HAL_TIM_Base_MspInit+0xd4>)
 8002d28:	69db      	ldr	r3, [r3, #28]
 8002d2a:	f003 0302 	and.w	r3, r3, #2
 8002d2e:	60fb      	str	r3, [r7, #12]
 8002d30:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002d32:	2200      	movs	r2, #0
 8002d34:	2100      	movs	r1, #0
 8002d36:	201d      	movs	r0, #29
 8002d38:	f001 fea1 	bl	8004a7e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002d3c:	201d      	movs	r0, #29
 8002d3e:	f001 feba 	bl	8004ab6 <HAL_NVIC_EnableIRQ>
}
 8002d42:	e018      	b.n	8002d76 <HAL_TIM_Base_MspInit+0xc6>
  else if(htim_base->Instance==TIM4)
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	4a10      	ldr	r2, [pc, #64]	; (8002d8c <HAL_TIM_Base_MspInit+0xdc>)
 8002d4a:	4293      	cmp	r3, r2
 8002d4c:	d113      	bne.n	8002d76 <HAL_TIM_Base_MspInit+0xc6>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002d4e:	4b0d      	ldr	r3, [pc, #52]	; (8002d84 <HAL_TIM_Base_MspInit+0xd4>)
 8002d50:	69db      	ldr	r3, [r3, #28]
 8002d52:	4a0c      	ldr	r2, [pc, #48]	; (8002d84 <HAL_TIM_Base_MspInit+0xd4>)
 8002d54:	f043 0304 	orr.w	r3, r3, #4
 8002d58:	61d3      	str	r3, [r2, #28]
 8002d5a:	4b0a      	ldr	r3, [pc, #40]	; (8002d84 <HAL_TIM_Base_MspInit+0xd4>)
 8002d5c:	69db      	ldr	r3, [r3, #28]
 8002d5e:	f003 0304 	and.w	r3, r3, #4
 8002d62:	60bb      	str	r3, [r7, #8]
 8002d64:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8002d66:	2200      	movs	r2, #0
 8002d68:	2100      	movs	r1, #0
 8002d6a:	201e      	movs	r0, #30
 8002d6c:	f001 fe87 	bl	8004a7e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002d70:	201e      	movs	r0, #30
 8002d72:	f001 fea0 	bl	8004ab6 <HAL_NVIC_EnableIRQ>
}
 8002d76:	bf00      	nop
 8002d78:	3718      	adds	r7, #24
 8002d7a:	46bd      	mov	sp, r7
 8002d7c:	bd80      	pop	{r7, pc}
 8002d7e:	bf00      	nop
 8002d80:	40012c00 	.word	0x40012c00
 8002d84:	40021000 	.word	0x40021000
 8002d88:	40000400 	.word	0x40000400
 8002d8c:	40000800 	.word	0x40000800

08002d90 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002d90:	b580      	push	{r7, lr}
 8002d92:	b08a      	sub	sp, #40	; 0x28
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d98:	f107 0314 	add.w	r3, r7, #20
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	601a      	str	r2, [r3, #0]
 8002da0:	605a      	str	r2, [r3, #4]
 8002da2:	609a      	str	r2, [r3, #8]
 8002da4:	60da      	str	r2, [r3, #12]
 8002da6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	4a35      	ldr	r2, [pc, #212]	; (8002e84 <HAL_TIM_MspPostInit+0xf4>)
 8002dae:	4293      	cmp	r3, r2
 8002db0:	d11e      	bne.n	8002df0 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002db2:	4b35      	ldr	r3, [pc, #212]	; (8002e88 <HAL_TIM_MspPostInit+0xf8>)
 8002db4:	695b      	ldr	r3, [r3, #20]
 8002db6:	4a34      	ldr	r2, [pc, #208]	; (8002e88 <HAL_TIM_MspPostInit+0xf8>)
 8002db8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002dbc:	6153      	str	r3, [r2, #20]
 8002dbe:	4b32      	ldr	r3, [pc, #200]	; (8002e88 <HAL_TIM_MspPostInit+0xf8>)
 8002dc0:	695b      	ldr	r3, [r3, #20]
 8002dc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dc6:	613b      	str	r3, [r7, #16]
 8002dc8:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8002dca:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8002dce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002dd0:	2302      	movs	r3, #2
 8002dd2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dd4:	2300      	movs	r3, #0
 8002dd6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002dd8:	2300      	movs	r3, #0
 8002dda:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8002ddc:	2306      	movs	r3, #6
 8002dde:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002de0:	f107 0314 	add.w	r3, r7, #20
 8002de4:	4619      	mov	r1, r3
 8002de6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002dea:	f001 fef5 	bl	8004bd8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8002dee:	e044      	b.n	8002e7a <HAL_TIM_MspPostInit+0xea>
  else if(htim->Instance==TIM3)
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	4a25      	ldr	r2, [pc, #148]	; (8002e8c <HAL_TIM_MspPostInit+0xfc>)
 8002df6:	4293      	cmp	r3, r2
 8002df8:	d11d      	bne.n	8002e36 <HAL_TIM_MspPostInit+0xa6>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002dfa:	4b23      	ldr	r3, [pc, #140]	; (8002e88 <HAL_TIM_MspPostInit+0xf8>)
 8002dfc:	695b      	ldr	r3, [r3, #20]
 8002dfe:	4a22      	ldr	r2, [pc, #136]	; (8002e88 <HAL_TIM_MspPostInit+0xf8>)
 8002e00:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002e04:	6153      	str	r3, [r2, #20]
 8002e06:	4b20      	ldr	r3, [pc, #128]	; (8002e88 <HAL_TIM_MspPostInit+0xf8>)
 8002e08:	695b      	ldr	r3, [r3, #20]
 8002e0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e0e:	60fb      	str	r3, [r7, #12]
 8002e10:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002e12:	2310      	movs	r3, #16
 8002e14:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e16:	2302      	movs	r3, #2
 8002e18:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e1a:	2300      	movs	r3, #0
 8002e1c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e1e:	2300      	movs	r3, #0
 8002e20:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002e22:	2302      	movs	r3, #2
 8002e24:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e26:	f107 0314 	add.w	r3, r7, #20
 8002e2a:	4619      	mov	r1, r3
 8002e2c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002e30:	f001 fed2 	bl	8004bd8 <HAL_GPIO_Init>
}
 8002e34:	e021      	b.n	8002e7a <HAL_TIM_MspPostInit+0xea>
  else if(htim->Instance==TIM4)
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	4a15      	ldr	r2, [pc, #84]	; (8002e90 <HAL_TIM_MspPostInit+0x100>)
 8002e3c:	4293      	cmp	r3, r2
 8002e3e:	d11c      	bne.n	8002e7a <HAL_TIM_MspPostInit+0xea>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002e40:	4b11      	ldr	r3, [pc, #68]	; (8002e88 <HAL_TIM_MspPostInit+0xf8>)
 8002e42:	695b      	ldr	r3, [r3, #20]
 8002e44:	4a10      	ldr	r2, [pc, #64]	; (8002e88 <HAL_TIM_MspPostInit+0xf8>)
 8002e46:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002e4a:	6153      	str	r3, [r2, #20]
 8002e4c:	4b0e      	ldr	r3, [pc, #56]	; (8002e88 <HAL_TIM_MspPostInit+0xf8>)
 8002e4e:	695b      	ldr	r3, [r3, #20]
 8002e50:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002e54:	60bb      	str	r3, [r7, #8]
 8002e56:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8002e58:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002e5c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e5e:	2302      	movs	r3, #2
 8002e60:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e62:	2300      	movs	r3, #0
 8002e64:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e66:	2300      	movs	r3, #0
 8002e68:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002e6a:	2302      	movs	r3, #2
 8002e6c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002e6e:	f107 0314 	add.w	r3, r7, #20
 8002e72:	4619      	mov	r1, r3
 8002e74:	4807      	ldr	r0, [pc, #28]	; (8002e94 <HAL_TIM_MspPostInit+0x104>)
 8002e76:	f001 feaf 	bl	8004bd8 <HAL_GPIO_Init>
}
 8002e7a:	bf00      	nop
 8002e7c:	3728      	adds	r7, #40	; 0x28
 8002e7e:	46bd      	mov	sp, r7
 8002e80:	bd80      	pop	{r7, pc}
 8002e82:	bf00      	nop
 8002e84:	40012c00 	.word	0x40012c00
 8002e88:	40021000 	.word	0x40021000
 8002e8c:	40000400 	.word	0x40000400
 8002e90:	40000800 	.word	0x40000800
 8002e94:	48000c00 	.word	0x48000c00

08002e98 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002e98:	b580      	push	{r7, lr}
 8002e9a:	b08c      	sub	sp, #48	; 0x30
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ea0:	f107 031c 	add.w	r3, r7, #28
 8002ea4:	2200      	movs	r2, #0
 8002ea6:	601a      	str	r2, [r3, #0]
 8002ea8:	605a      	str	r2, [r3, #4]
 8002eaa:	609a      	str	r2, [r3, #8]
 8002eac:	60da      	str	r2, [r3, #12]
 8002eae:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	4a36      	ldr	r2, [pc, #216]	; (8002f90 <HAL_UART_MspInit+0xf8>)
 8002eb6:	4293      	cmp	r3, r2
 8002eb8:	d130      	bne.n	8002f1c <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002eba:	4b36      	ldr	r3, [pc, #216]	; (8002f94 <HAL_UART_MspInit+0xfc>)
 8002ebc:	699b      	ldr	r3, [r3, #24]
 8002ebe:	4a35      	ldr	r2, [pc, #212]	; (8002f94 <HAL_UART_MspInit+0xfc>)
 8002ec0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002ec4:	6193      	str	r3, [r2, #24]
 8002ec6:	4b33      	ldr	r3, [pc, #204]	; (8002f94 <HAL_UART_MspInit+0xfc>)
 8002ec8:	699b      	ldr	r3, [r3, #24]
 8002eca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ece:	61bb      	str	r3, [r7, #24]
 8002ed0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002ed2:	4b30      	ldr	r3, [pc, #192]	; (8002f94 <HAL_UART_MspInit+0xfc>)
 8002ed4:	695b      	ldr	r3, [r3, #20]
 8002ed6:	4a2f      	ldr	r2, [pc, #188]	; (8002f94 <HAL_UART_MspInit+0xfc>)
 8002ed8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8002edc:	6153      	str	r3, [r2, #20]
 8002ede:	4b2d      	ldr	r3, [pc, #180]	; (8002f94 <HAL_UART_MspInit+0xfc>)
 8002ee0:	695b      	ldr	r3, [r3, #20]
 8002ee2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002ee6:	617b      	str	r3, [r7, #20]
 8002ee8:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8002eea:	2330      	movs	r3, #48	; 0x30
 8002eec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002eee:	2302      	movs	r3, #2
 8002ef0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ef2:	2300      	movs	r3, #0
 8002ef4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002ef6:	2303      	movs	r3, #3
 8002ef8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002efa:	2307      	movs	r3, #7
 8002efc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002efe:	f107 031c 	add.w	r3, r7, #28
 8002f02:	4619      	mov	r1, r3
 8002f04:	4824      	ldr	r0, [pc, #144]	; (8002f98 <HAL_UART_MspInit+0x100>)
 8002f06:	f001 fe67 	bl	8004bd8 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002f0a:	2200      	movs	r2, #0
 8002f0c:	2100      	movs	r1, #0
 8002f0e:	2025      	movs	r0, #37	; 0x25
 8002f10:	f001 fdb5 	bl	8004a7e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002f14:	2025      	movs	r0, #37	; 0x25
 8002f16:	f001 fdce 	bl	8004ab6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002f1a:	e035      	b.n	8002f88 <HAL_UART_MspInit+0xf0>
  else if(huart->Instance==USART2)
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	4a1e      	ldr	r2, [pc, #120]	; (8002f9c <HAL_UART_MspInit+0x104>)
 8002f22:	4293      	cmp	r3, r2
 8002f24:	d130      	bne.n	8002f88 <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002f26:	4b1b      	ldr	r3, [pc, #108]	; (8002f94 <HAL_UART_MspInit+0xfc>)
 8002f28:	69db      	ldr	r3, [r3, #28]
 8002f2a:	4a1a      	ldr	r2, [pc, #104]	; (8002f94 <HAL_UART_MspInit+0xfc>)
 8002f2c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002f30:	61d3      	str	r3, [r2, #28]
 8002f32:	4b18      	ldr	r3, [pc, #96]	; (8002f94 <HAL_UART_MspInit+0xfc>)
 8002f34:	69db      	ldr	r3, [r3, #28]
 8002f36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f3a:	613b      	str	r3, [r7, #16]
 8002f3c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f3e:	4b15      	ldr	r3, [pc, #84]	; (8002f94 <HAL_UART_MspInit+0xfc>)
 8002f40:	695b      	ldr	r3, [r3, #20]
 8002f42:	4a14      	ldr	r2, [pc, #80]	; (8002f94 <HAL_UART_MspInit+0xfc>)
 8002f44:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002f48:	6153      	str	r3, [r2, #20]
 8002f4a:	4b12      	ldr	r3, [pc, #72]	; (8002f94 <HAL_UART_MspInit+0xfc>)
 8002f4c:	695b      	ldr	r3, [r3, #20]
 8002f4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f52:	60fb      	str	r3, [r7, #12]
 8002f54:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002f56:	230c      	movs	r3, #12
 8002f58:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f5a:	2302      	movs	r3, #2
 8002f5c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f5e:	2300      	movs	r3, #0
 8002f60:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002f62:	2303      	movs	r3, #3
 8002f64:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002f66:	2307      	movs	r3, #7
 8002f68:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f6a:	f107 031c 	add.w	r3, r7, #28
 8002f6e:	4619      	mov	r1, r3
 8002f70:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002f74:	f001 fe30 	bl	8004bd8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002f78:	2200      	movs	r2, #0
 8002f7a:	2100      	movs	r1, #0
 8002f7c:	2026      	movs	r0, #38	; 0x26
 8002f7e:	f001 fd7e 	bl	8004a7e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002f82:	2026      	movs	r0, #38	; 0x26
 8002f84:	f001 fd97 	bl	8004ab6 <HAL_NVIC_EnableIRQ>
}
 8002f88:	bf00      	nop
 8002f8a:	3730      	adds	r7, #48	; 0x30
 8002f8c:	46bd      	mov	sp, r7
 8002f8e:	bd80      	pop	{r7, pc}
 8002f90:	40013800 	.word	0x40013800
 8002f94:	40021000 	.word	0x40021000
 8002f98:	48000800 	.word	0x48000800
 8002f9c:	40004400 	.word	0x40004400

08002fa0 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8002fa0:	b580      	push	{r7, lr}
 8002fa2:	b08a      	sub	sp, #40	; 0x28
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002fa8:	f107 0314 	add.w	r3, r7, #20
 8002fac:	2200      	movs	r2, #0
 8002fae:	601a      	str	r2, [r3, #0]
 8002fb0:	605a      	str	r2, [r3, #4]
 8002fb2:	609a      	str	r2, [r3, #8]
 8002fb4:	60da      	str	r2, [r3, #12]
 8002fb6:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB)
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	4a18      	ldr	r2, [pc, #96]	; (8003020 <HAL_PCD_MspInit+0x80>)
 8002fbe:	4293      	cmp	r3, r2
 8002fc0:	d129      	bne.n	8003016 <HAL_PCD_MspInit+0x76>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002fc2:	4b18      	ldr	r3, [pc, #96]	; (8003024 <HAL_PCD_MspInit+0x84>)
 8002fc4:	695b      	ldr	r3, [r3, #20]
 8002fc6:	4a17      	ldr	r2, [pc, #92]	; (8003024 <HAL_PCD_MspInit+0x84>)
 8002fc8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002fcc:	6153      	str	r3, [r2, #20]
 8002fce:	4b15      	ldr	r3, [pc, #84]	; (8003024 <HAL_PCD_MspInit+0x84>)
 8002fd0:	695b      	ldr	r3, [r3, #20]
 8002fd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fd6:	613b      	str	r3, [r7, #16]
 8002fd8:	693b      	ldr	r3, [r7, #16]
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = DM_Pin|DP_Pin;
 8002fda:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8002fde:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fe0:	2302      	movs	r3, #2
 8002fe2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fe4:	2300      	movs	r3, #0
 8002fe6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002fe8:	2303      	movs	r3, #3
 8002fea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_USB;
 8002fec:	230e      	movs	r3, #14
 8002fee:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ff0:	f107 0314 	add.w	r3, r7, #20
 8002ff4:	4619      	mov	r1, r3
 8002ff6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002ffa:	f001 fded 	bl	8004bd8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8002ffe:	4b09      	ldr	r3, [pc, #36]	; (8003024 <HAL_PCD_MspInit+0x84>)
 8003000:	69db      	ldr	r3, [r3, #28]
 8003002:	4a08      	ldr	r2, [pc, #32]	; (8003024 <HAL_PCD_MspInit+0x84>)
 8003004:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003008:	61d3      	str	r3, [r2, #28]
 800300a:	4b06      	ldr	r3, [pc, #24]	; (8003024 <HAL_PCD_MspInit+0x84>)
 800300c:	69db      	ldr	r3, [r3, #28]
 800300e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003012:	60fb      	str	r3, [r7, #12]
 8003014:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 8003016:	bf00      	nop
 8003018:	3728      	adds	r7, #40	; 0x28
 800301a:	46bd      	mov	sp, r7
 800301c:	bd80      	pop	{r7, pc}
 800301e:	bf00      	nop
 8003020:	40005c00 	.word	0x40005c00
 8003024:	40021000 	.word	0x40021000

08003028 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003028:	b480      	push	{r7}
 800302a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800302c:	e7fe      	b.n	800302c <NMI_Handler+0x4>

0800302e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800302e:	b480      	push	{r7}
 8003030:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003032:	e7fe      	b.n	8003032 <HardFault_Handler+0x4>

08003034 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003034:	b480      	push	{r7}
 8003036:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003038:	e7fe      	b.n	8003038 <MemManage_Handler+0x4>

0800303a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800303a:	b480      	push	{r7}
 800303c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800303e:	e7fe      	b.n	800303e <BusFault_Handler+0x4>

08003040 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003040:	b480      	push	{r7}
 8003042:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003044:	e7fe      	b.n	8003044 <UsageFault_Handler+0x4>

08003046 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003046:	b480      	push	{r7}
 8003048:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800304a:	bf00      	nop
 800304c:	46bd      	mov	sp, r7
 800304e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003052:	4770      	bx	lr

08003054 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003054:	b480      	push	{r7}
 8003056:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003058:	bf00      	nop
 800305a:	46bd      	mov	sp, r7
 800305c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003060:	4770      	bx	lr

08003062 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003062:	b480      	push	{r7}
 8003064:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003066:	bf00      	nop
 8003068:	46bd      	mov	sp, r7
 800306a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800306e:	4770      	bx	lr

08003070 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003070:	b580      	push	{r7, lr}
 8003072:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003074:	f000 f910 	bl	8003298 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003078:	bf00      	nop
 800307a:	bd80      	pop	{r7, pc}

0800307c <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 800307c:	b580      	push	{r7, lr}
 800307e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8003080:	4802      	ldr	r0, [pc, #8]	; (800308c <ADC1_2_IRQHandler+0x10>)
 8003082:	f000 fc6b 	bl	800395c <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8003086:	bf00      	nop
 8003088:	bd80      	pop	{r7, pc}
 800308a:	bf00      	nop
 800308c:	20000144 	.word	0x20000144

08003090 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8003090:	b580      	push	{r7, lr}
 8003092:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003094:	4802      	ldr	r0, [pc, #8]	; (80030a0 <TIM2_IRQHandler+0x10>)
 8003096:	f004 fb59 	bl	800774c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800309a:	bf00      	nop
 800309c:	bd80      	pop	{r7, pc}
 800309e:	bf00      	nop
 80030a0:	20000308 	.word	0x20000308

080030a4 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80030a4:	b580      	push	{r7, lr}
 80030a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80030a8:	4802      	ldr	r0, [pc, #8]	; (80030b4 <TIM3_IRQHandler+0x10>)
 80030aa:	f004 fb4f 	bl	800774c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80030ae:	bf00      	nop
 80030b0:	bd80      	pop	{r7, pc}
 80030b2:	bf00      	nop
 80030b4:	20000354 	.word	0x20000354

080030b8 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80030b8:	b580      	push	{r7, lr}
 80030ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80030bc:	4802      	ldr	r0, [pc, #8]	; (80030c8 <TIM4_IRQHandler+0x10>)
 80030be:	f004 fb45 	bl	800774c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80030c2:	bf00      	nop
 80030c4:	bd80      	pop	{r7, pc}
 80030c6:	bf00      	nop
 80030c8:	200003a0 	.word	0x200003a0

080030cc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 80030cc:	b580      	push	{r7, lr}
 80030ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80030d0:	4802      	ldr	r0, [pc, #8]	; (80030dc <USART1_IRQHandler+0x10>)
 80030d2:	f005 fcbf 	bl	8008a54 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80030d6:	bf00      	nop
 80030d8:	bd80      	pop	{r7, pc}
 80030da:	bf00      	nop
 80030dc:	200003ec 	.word	0x200003ec

080030e0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 80030e0:	b580      	push	{r7, lr}
 80030e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80030e4:	4802      	ldr	r0, [pc, #8]	; (80030f0 <USART2_IRQHandler+0x10>)
 80030e6:	f005 fcb5 	bl	8008a54 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80030ea:	bf00      	nop
 80030ec:	bd80      	pop	{r7, pc}
 80030ee:	bf00      	nop
 80030f0:	20000474 	.word	0x20000474

080030f4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80030f4:	b580      	push	{r7, lr}
 80030f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80030f8:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80030fc:	f001 ff18 	bl	8004f30 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 8003100:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8003104:	f001 ff14 	bl	8004f30 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8003108:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800310c:	f001 ff10 	bl	8004f30 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8003110:	bf00      	nop
 8003112:	bd80      	pop	{r7, pc}

08003114 <ADC3_IRQHandler>:

/**
  * @brief This function handles ADC3 global interrupt.
  */
void ADC3_IRQHandler(void)
{
 8003114:	b580      	push	{r7, lr}
 8003116:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC3_IRQn 0 */

  /* USER CODE END ADC3_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc3);
 8003118:	4802      	ldr	r0, [pc, #8]	; (8003124 <ADC3_IRQHandler+0x10>)
 800311a:	f000 fc1f 	bl	800395c <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC3_IRQn 1 */

  /* USER CODE END ADC3_IRQn 1 */
}
 800311e:	bf00      	nop
 8003120:	bd80      	pop	{r7, pc}
 8003122:	bf00      	nop
 8003124:	20000194 	.word	0x20000194

08003128 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003128:	b580      	push	{r7, lr}
 800312a:	b086      	sub	sp, #24
 800312c:	af00      	add	r7, sp, #0
 800312e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003130:	4a14      	ldr	r2, [pc, #80]	; (8003184 <_sbrk+0x5c>)
 8003132:	4b15      	ldr	r3, [pc, #84]	; (8003188 <_sbrk+0x60>)
 8003134:	1ad3      	subs	r3, r2, r3
 8003136:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003138:	697b      	ldr	r3, [r7, #20]
 800313a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800313c:	4b13      	ldr	r3, [pc, #76]	; (800318c <_sbrk+0x64>)
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	2b00      	cmp	r3, #0
 8003142:	d102      	bne.n	800314a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003144:	4b11      	ldr	r3, [pc, #68]	; (800318c <_sbrk+0x64>)
 8003146:	4a12      	ldr	r2, [pc, #72]	; (8003190 <_sbrk+0x68>)
 8003148:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800314a:	4b10      	ldr	r3, [pc, #64]	; (800318c <_sbrk+0x64>)
 800314c:	681a      	ldr	r2, [r3, #0]
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	4413      	add	r3, r2
 8003152:	693a      	ldr	r2, [r7, #16]
 8003154:	429a      	cmp	r2, r3
 8003156:	d207      	bcs.n	8003168 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003158:	f006 fe4e 	bl	8009df8 <__errno>
 800315c:	4603      	mov	r3, r0
 800315e:	220c      	movs	r2, #12
 8003160:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003162:	f04f 33ff 	mov.w	r3, #4294967295
 8003166:	e009      	b.n	800317c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003168:	4b08      	ldr	r3, [pc, #32]	; (800318c <_sbrk+0x64>)
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800316e:	4b07      	ldr	r3, [pc, #28]	; (800318c <_sbrk+0x64>)
 8003170:	681a      	ldr	r2, [r3, #0]
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	4413      	add	r3, r2
 8003176:	4a05      	ldr	r2, [pc, #20]	; (800318c <_sbrk+0x64>)
 8003178:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800317a:	68fb      	ldr	r3, [r7, #12]
}
 800317c:	4618      	mov	r0, r3
 800317e:	3718      	adds	r7, #24
 8003180:	46bd      	mov	sp, r7
 8003182:	bd80      	pop	{r7, pc}
 8003184:	2000a000 	.word	0x2000a000
 8003188:	00000400 	.word	0x00000400
 800318c:	20000824 	.word	0x20000824
 8003190:	20000840 	.word	0x20000840

08003194 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003194:	b480      	push	{r7}
 8003196:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003198:	4b06      	ldr	r3, [pc, #24]	; (80031b4 <SystemInit+0x20>)
 800319a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800319e:	4a05      	ldr	r2, [pc, #20]	; (80031b4 <SystemInit+0x20>)
 80031a0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80031a4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80031a8:	bf00      	nop
 80031aa:	46bd      	mov	sp, r7
 80031ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b0:	4770      	bx	lr
 80031b2:	bf00      	nop
 80031b4:	e000ed00 	.word	0xe000ed00

080031b8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80031b8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80031f0 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80031bc:	f7ff ffea 	bl	8003194 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80031c0:	480c      	ldr	r0, [pc, #48]	; (80031f4 <LoopForever+0x6>)
  ldr r1, =_edata
 80031c2:	490d      	ldr	r1, [pc, #52]	; (80031f8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80031c4:	4a0d      	ldr	r2, [pc, #52]	; (80031fc <LoopForever+0xe>)
  movs r3, #0
 80031c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80031c8:	e002      	b.n	80031d0 <LoopCopyDataInit>

080031ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80031ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80031cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80031ce:	3304      	adds	r3, #4

080031d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80031d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80031d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80031d4:	d3f9      	bcc.n	80031ca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80031d6:	4a0a      	ldr	r2, [pc, #40]	; (8003200 <LoopForever+0x12>)
  ldr r4, =_ebss
 80031d8:	4c0a      	ldr	r4, [pc, #40]	; (8003204 <LoopForever+0x16>)
  movs r3, #0
 80031da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80031dc:	e001      	b.n	80031e2 <LoopFillZerobss>

080031de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80031de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80031e0:	3204      	adds	r2, #4

080031e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80031e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80031e4:	d3fb      	bcc.n	80031de <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80031e6:	f006 fe0d 	bl	8009e04 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80031ea:	f7fe fe23 	bl	8001e34 <main>

080031ee <LoopForever>:

LoopForever:
    b LoopForever
 80031ee:	e7fe      	b.n	80031ee <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80031f0:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 80031f4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80031f8:	200000dc 	.word	0x200000dc
  ldr r2, =_sidata
 80031fc:	0800aae0 	.word	0x0800aae0
  ldr r2, =_sbss
 8003200:	200000dc 	.word	0x200000dc
  ldr r4, =_ebss
 8003204:	2000083c 	.word	0x2000083c

08003208 <ADC4_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003208:	e7fe      	b.n	8003208 <ADC4_IRQHandler>
	...

0800320c <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800320c:	b580      	push	{r7, lr}
 800320e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003210:	4b08      	ldr	r3, [pc, #32]	; (8003234 <HAL_Init+0x28>)
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	4a07      	ldr	r2, [pc, #28]	; (8003234 <HAL_Init+0x28>)
 8003216:	f043 0310 	orr.w	r3, r3, #16
 800321a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800321c:	2003      	movs	r0, #3
 800321e:	f001 fc23 	bl	8004a68 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003222:	2000      	movs	r0, #0
 8003224:	f000 f808 	bl	8003238 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003228:	f7ff fbf6 	bl	8002a18 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800322c:	2300      	movs	r3, #0
}
 800322e:	4618      	mov	r0, r3
 8003230:	bd80      	pop	{r7, pc}
 8003232:	bf00      	nop
 8003234:	40022000 	.word	0x40022000

08003238 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003238:	b580      	push	{r7, lr}
 800323a:	b082      	sub	sp, #8
 800323c:	af00      	add	r7, sp, #0
 800323e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003240:	4b12      	ldr	r3, [pc, #72]	; (800328c <HAL_InitTick+0x54>)
 8003242:	681a      	ldr	r2, [r3, #0]
 8003244:	4b12      	ldr	r3, [pc, #72]	; (8003290 <HAL_InitTick+0x58>)
 8003246:	781b      	ldrb	r3, [r3, #0]
 8003248:	4619      	mov	r1, r3
 800324a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800324e:	fbb3 f3f1 	udiv	r3, r3, r1
 8003252:	fbb2 f3f3 	udiv	r3, r2, r3
 8003256:	4618      	mov	r0, r3
 8003258:	f001 fc3b 	bl	8004ad2 <HAL_SYSTICK_Config>
 800325c:	4603      	mov	r3, r0
 800325e:	2b00      	cmp	r3, #0
 8003260:	d001      	beq.n	8003266 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003262:	2301      	movs	r3, #1
 8003264:	e00e      	b.n	8003284 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	2b0f      	cmp	r3, #15
 800326a:	d80a      	bhi.n	8003282 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800326c:	2200      	movs	r2, #0
 800326e:	6879      	ldr	r1, [r7, #4]
 8003270:	f04f 30ff 	mov.w	r0, #4294967295
 8003274:	f001 fc03 	bl	8004a7e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003278:	4a06      	ldr	r2, [pc, #24]	; (8003294 <HAL_InitTick+0x5c>)
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 800327e:	2300      	movs	r3, #0
 8003280:	e000      	b.n	8003284 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003282:	2301      	movs	r3, #1
}
 8003284:	4618      	mov	r0, r3
 8003286:	3708      	adds	r7, #8
 8003288:	46bd      	mov	sp, r7
 800328a:	bd80      	pop	{r7, pc}
 800328c:	2000006c 	.word	0x2000006c
 8003290:	20000074 	.word	0x20000074
 8003294:	20000070 	.word	0x20000070

08003298 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003298:	b480      	push	{r7}
 800329a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800329c:	4b06      	ldr	r3, [pc, #24]	; (80032b8 <HAL_IncTick+0x20>)
 800329e:	781b      	ldrb	r3, [r3, #0]
 80032a0:	461a      	mov	r2, r3
 80032a2:	4b06      	ldr	r3, [pc, #24]	; (80032bc <HAL_IncTick+0x24>)
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	4413      	add	r3, r2
 80032a8:	4a04      	ldr	r2, [pc, #16]	; (80032bc <HAL_IncTick+0x24>)
 80032aa:	6013      	str	r3, [r2, #0]
}
 80032ac:	bf00      	nop
 80032ae:	46bd      	mov	sp, r7
 80032b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b4:	4770      	bx	lr
 80032b6:	bf00      	nop
 80032b8:	20000074 	.word	0x20000074
 80032bc:	20000828 	.word	0x20000828

080032c0 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80032c0:	b480      	push	{r7}
 80032c2:	af00      	add	r7, sp, #0
  return uwTick;  
 80032c4:	4b03      	ldr	r3, [pc, #12]	; (80032d4 <HAL_GetTick+0x14>)
 80032c6:	681b      	ldr	r3, [r3, #0]
}
 80032c8:	4618      	mov	r0, r3
 80032ca:	46bd      	mov	sp, r7
 80032cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d0:	4770      	bx	lr
 80032d2:	bf00      	nop
 80032d4:	20000828 	.word	0x20000828

080032d8 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 80032d8:	b480      	push	{r7}
 80032da:	b083      	sub	sp, #12
 80032dc:	af00      	add	r7, sp, #0
 80032de:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindowCallback must be implemented in the user file.
  */
}
 80032e0:	bf00      	nop
 80032e2:	370c      	adds	r7, #12
 80032e4:	46bd      	mov	sp, r7
 80032e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ea:	4770      	bx	lr

080032ec <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80032ec:	b480      	push	{r7}
 80032ee:	b083      	sub	sp, #12
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80032f4:	bf00      	nop
 80032f6:	370c      	adds	r7, #12
 80032f8:	46bd      	mov	sp, r7
 80032fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032fe:	4770      	bx	lr

08003300 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003300:	b580      	push	{r7, lr}
 8003302:	b09a      	sub	sp, #104	; 0x68
 8003304:	af00      	add	r7, sp, #0
 8003306:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003308:	2300      	movs	r3, #0
 800330a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 800330e:	2300      	movs	r3, #0
 8003310:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 8003312:	2300      	movs	r3, #0
 8003314:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	2b00      	cmp	r3, #0
 800331a:	d101      	bne.n	8003320 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 800331c:	2301      	movs	r3, #1
 800331e:	e1c9      	b.n	80036b4 <HAL_ADC_Init+0x3b4>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	691b      	ldr	r3, [r3, #16]
 8003324:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800332a:	f003 0310 	and.w	r3, r3, #16
 800332e:	2b00      	cmp	r3, #0
 8003330:	d176      	bne.n	8003420 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003336:	2b00      	cmp	r3, #0
 8003338:	d152      	bne.n	80033e0 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	2200      	movs	r2, #0
 800333e:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	2200      	movs	r2, #0
 8003344:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	2200      	movs	r2, #0
 800334a:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	2200      	movs	r2, #0
 8003350:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003354:	6878      	ldr	r0, [r7, #4]
 8003356:	f7ff fb83 	bl	8002a60 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	689b      	ldr	r3, [r3, #8]
 8003360:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003364:	2b00      	cmp	r3, #0
 8003366:	d13b      	bne.n	80033e0 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8003368:	6878      	ldr	r0, [r7, #4]
 800336a:	f001 fa47 	bl	80047fc <ADC_Disable>
 800336e:	4603      	mov	r3, r0
 8003370:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003378:	f003 0310 	and.w	r3, r3, #16
 800337c:	2b00      	cmp	r3, #0
 800337e:	d12f      	bne.n	80033e0 <HAL_ADC_Init+0xe0>
 8003380:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8003384:	2b00      	cmp	r3, #0
 8003386:	d12b      	bne.n	80033e0 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800338c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003390:	f023 0302 	bic.w	r3, r3, #2
 8003394:	f043 0202 	orr.w	r2, r3, #2
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	689a      	ldr	r2, [r3, #8]
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80033aa:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	689a      	ldr	r2, [r3, #8]
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80033ba:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80033bc:	4b86      	ldr	r3, [pc, #536]	; (80035d8 <HAL_ADC_Init+0x2d8>)
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	4a86      	ldr	r2, [pc, #536]	; (80035dc <HAL_ADC_Init+0x2dc>)
 80033c2:	fba2 2303 	umull	r2, r3, r2, r3
 80033c6:	0c9a      	lsrs	r2, r3, #18
 80033c8:	4613      	mov	r3, r2
 80033ca:	009b      	lsls	r3, r3, #2
 80033cc:	4413      	add	r3, r2
 80033ce:	005b      	lsls	r3, r3, #1
 80033d0:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80033d2:	e002      	b.n	80033da <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 80033d4:	68bb      	ldr	r3, [r7, #8]
 80033d6:	3b01      	subs	r3, #1
 80033d8:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80033da:	68bb      	ldr	r3, [r7, #8]
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d1f9      	bne.n	80033d4 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	689b      	ldr	r3, [r3, #8]
 80033e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d007      	beq.n	80033fe <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	689b      	ldr	r3, [r3, #8]
 80033f4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 80033f8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80033fc:	d110      	bne.n	8003420 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003402:	f023 0312 	bic.w	r3, r3, #18
 8003406:	f043 0210 	orr.w	r2, r3, #16
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003412:	f043 0201 	orr.w	r2, r3, #1
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 800341a:	2301      	movs	r3, #1
 800341c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003424:	f003 0310 	and.w	r3, r3, #16
 8003428:	2b00      	cmp	r3, #0
 800342a:	f040 8136 	bne.w	800369a <HAL_ADC_Init+0x39a>
 800342e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8003432:	2b00      	cmp	r3, #0
 8003434:	f040 8131 	bne.w	800369a <HAL_ADC_Init+0x39a>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	689b      	ldr	r3, [r3, #8]
 800343e:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 8003442:	2b00      	cmp	r3, #0
 8003444:	f040 8129 	bne.w	800369a <HAL_ADC_Init+0x39a>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800344c:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8003450:	f043 0202 	orr.w	r2, r3, #2
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003460:	d004      	beq.n	800346c <HAL_ADC_Init+0x16c>
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	4a5e      	ldr	r2, [pc, #376]	; (80035e0 <HAL_ADC_Init+0x2e0>)
 8003468:	4293      	cmp	r3, r2
 800346a:	d101      	bne.n	8003470 <HAL_ADC_Init+0x170>
 800346c:	4b5d      	ldr	r3, [pc, #372]	; (80035e4 <HAL_ADC_Init+0x2e4>)
 800346e:	e000      	b.n	8003472 <HAL_ADC_Init+0x172>
 8003470:	4b5d      	ldr	r3, [pc, #372]	; (80035e8 <HAL_ADC_Init+0x2e8>)
 8003472:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800347c:	d102      	bne.n	8003484 <HAL_ADC_Init+0x184>
 800347e:	4b58      	ldr	r3, [pc, #352]	; (80035e0 <HAL_ADC_Init+0x2e0>)
 8003480:	60fb      	str	r3, [r7, #12]
 8003482:	e01a      	b.n	80034ba <HAL_ADC_Init+0x1ba>
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	4a55      	ldr	r2, [pc, #340]	; (80035e0 <HAL_ADC_Init+0x2e0>)
 800348a:	4293      	cmp	r3, r2
 800348c:	d103      	bne.n	8003496 <HAL_ADC_Init+0x196>
 800348e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003492:	60fb      	str	r3, [r7, #12]
 8003494:	e011      	b.n	80034ba <HAL_ADC_Init+0x1ba>
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	4a54      	ldr	r2, [pc, #336]	; (80035ec <HAL_ADC_Init+0x2ec>)
 800349c:	4293      	cmp	r3, r2
 800349e:	d102      	bne.n	80034a6 <HAL_ADC_Init+0x1a6>
 80034a0:	4b53      	ldr	r3, [pc, #332]	; (80035f0 <HAL_ADC_Init+0x2f0>)
 80034a2:	60fb      	str	r3, [r7, #12]
 80034a4:	e009      	b.n	80034ba <HAL_ADC_Init+0x1ba>
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	4a51      	ldr	r2, [pc, #324]	; (80035f0 <HAL_ADC_Init+0x2f0>)
 80034ac:	4293      	cmp	r3, r2
 80034ae:	d102      	bne.n	80034b6 <HAL_ADC_Init+0x1b6>
 80034b0:	4b4e      	ldr	r3, [pc, #312]	; (80035ec <HAL_ADC_Init+0x2ec>)
 80034b2:	60fb      	str	r3, [r7, #12]
 80034b4:	e001      	b.n	80034ba <HAL_ADC_Init+0x1ba>
 80034b6:	2300      	movs	r3, #0
 80034b8:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	689b      	ldr	r3, [r3, #8]
 80034c0:	f003 0303 	and.w	r3, r3, #3
 80034c4:	2b01      	cmp	r3, #1
 80034c6:	d108      	bne.n	80034da <HAL_ADC_Init+0x1da>
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f003 0301 	and.w	r3, r3, #1
 80034d2:	2b01      	cmp	r3, #1
 80034d4:	d101      	bne.n	80034da <HAL_ADC_Init+0x1da>
 80034d6:	2301      	movs	r3, #1
 80034d8:	e000      	b.n	80034dc <HAL_ADC_Init+0x1dc>
 80034da:	2300      	movs	r3, #0
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d11c      	bne.n	800351a <HAL_ADC_Init+0x21a>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80034e0:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d010      	beq.n	8003508 <HAL_ADC_Init+0x208>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	689b      	ldr	r3, [r3, #8]
 80034ea:	f003 0303 	and.w	r3, r3, #3
 80034ee:	2b01      	cmp	r3, #1
 80034f0:	d107      	bne.n	8003502 <HAL_ADC_Init+0x202>
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f003 0301 	and.w	r3, r3, #1
 80034fa:	2b01      	cmp	r3, #1
 80034fc:	d101      	bne.n	8003502 <HAL_ADC_Init+0x202>
 80034fe:	2301      	movs	r3, #1
 8003500:	e000      	b.n	8003504 <HAL_ADC_Init+0x204>
 8003502:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8003504:	2b00      	cmp	r3, #0
 8003506:	d108      	bne.n	800351a <HAL_ADC_Init+0x21a>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8003508:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800350a:	689b      	ldr	r3, [r3, #8]
 800350c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	685b      	ldr	r3, [r3, #4]
 8003514:	431a      	orrs	r2, r3
 8003516:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003518:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	7e5b      	ldrb	r3, [r3, #25]
 800351e:	035b      	lsls	r3, r3, #13
 8003520:	687a      	ldr	r2, [r7, #4]
 8003522:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003524:	2a01      	cmp	r2, #1
 8003526:	d002      	beq.n	800352e <HAL_ADC_Init+0x22e>
 8003528:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800352c:	e000      	b.n	8003530 <HAL_ADC_Init+0x230>
 800352e:	2200      	movs	r2, #0
 8003530:	431a      	orrs	r2, r3
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	68db      	ldr	r3, [r3, #12]
 8003536:	431a      	orrs	r2, r3
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	689b      	ldr	r3, [r3, #8]
 800353c:	4313      	orrs	r3, r2
 800353e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003540:	4313      	orrs	r3, r2
 8003542:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	f893 3020 	ldrb.w	r3, [r3, #32]
 800354a:	2b01      	cmp	r3, #1
 800354c:	d11b      	bne.n	8003586 <HAL_ADC_Init+0x286>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	7e5b      	ldrb	r3, [r3, #25]
 8003552:	2b00      	cmp	r3, #0
 8003554:	d109      	bne.n	800356a <HAL_ADC_Init+0x26a>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800355a:	3b01      	subs	r3, #1
 800355c:	045a      	lsls	r2, r3, #17
 800355e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003560:	4313      	orrs	r3, r2
 8003562:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003566:	663b      	str	r3, [r7, #96]	; 0x60
 8003568:	e00d      	b.n	8003586 <HAL_ADC_Init+0x286>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800356e:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8003572:	f043 0220 	orr.w	r2, r3, #32
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800357e:	f043 0201 	orr.w	r2, r3, #1
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800358a:	2b01      	cmp	r3, #1
 800358c:	d03a      	beq.n	8003604 <HAL_ADC_Init+0x304>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	4a16      	ldr	r2, [pc, #88]	; (80035ec <HAL_ADC_Init+0x2ec>)
 8003594:	4293      	cmp	r3, r2
 8003596:	d004      	beq.n	80035a2 <HAL_ADC_Init+0x2a2>
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	4a14      	ldr	r2, [pc, #80]	; (80035f0 <HAL_ADC_Init+0x2f0>)
 800359e:	4293      	cmp	r3, r2
 80035a0:	d128      	bne.n	80035f4 <HAL_ADC_Init+0x2f4>
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035a6:	f5b3 7f30 	cmp.w	r3, #704	; 0x2c0
 80035aa:	d012      	beq.n	80035d2 <HAL_ADC_Init+0x2d2>
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035b0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80035b4:	d00a      	beq.n	80035cc <HAL_ADC_Init+0x2cc>
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035ba:	f5b3 7fe0 	cmp.w	r3, #448	; 0x1c0
 80035be:	d002      	beq.n	80035c6 <HAL_ADC_Init+0x2c6>
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035c4:	e018      	b.n	80035f8 <HAL_ADC_Init+0x2f8>
 80035c6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80035ca:	e015      	b.n	80035f8 <HAL_ADC_Init+0x2f8>
 80035cc:	f44f 7330 	mov.w	r3, #704	; 0x2c0
 80035d0:	e012      	b.n	80035f8 <HAL_ADC_Init+0x2f8>
 80035d2:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 80035d6:	e00f      	b.n	80035f8 <HAL_ADC_Init+0x2f8>
 80035d8:	2000006c 	.word	0x2000006c
 80035dc:	431bde83 	.word	0x431bde83
 80035e0:	50000100 	.word	0x50000100
 80035e4:	50000300 	.word	0x50000300
 80035e8:	50000700 	.word	0x50000700
 80035ec:	50000400 	.word	0x50000400
 80035f0:	50000500 	.word	0x50000500
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035f8:	687a      	ldr	r2, [r7, #4]
 80035fa:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80035fc:	4313      	orrs	r3, r2
 80035fe:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003600:	4313      	orrs	r3, r2
 8003602:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	689b      	ldr	r3, [r3, #8]
 800360a:	f003 030c 	and.w	r3, r3, #12
 800360e:	2b00      	cmp	r3, #0
 8003610:	d114      	bne.n	800363c <HAL_ADC_Init+0x33c>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	68db      	ldr	r3, [r3, #12]
 8003618:	687a      	ldr	r2, [r7, #4]
 800361a:	6812      	ldr	r2, [r2, #0]
 800361c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003620:	f023 0302 	bic.w	r3, r3, #2
 8003624:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	7e1b      	ldrb	r3, [r3, #24]
 800362a:	039a      	lsls	r2, r3, #14
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003632:	005b      	lsls	r3, r3, #1
 8003634:	4313      	orrs	r3, r2
 8003636:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003638:	4313      	orrs	r3, r2
 800363a:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	68da      	ldr	r2, [r3, #12]
 8003642:	4b1e      	ldr	r3, [pc, #120]	; (80036bc <HAL_ADC_Init+0x3bc>)
 8003644:	4013      	ands	r3, r2
 8003646:	687a      	ldr	r2, [r7, #4]
 8003648:	6812      	ldr	r2, [r2, #0]
 800364a:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800364c:	430b      	orrs	r3, r1
 800364e:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	691b      	ldr	r3, [r3, #16]
 8003654:	2b01      	cmp	r3, #1
 8003656:	d10c      	bne.n	8003672 <HAL_ADC_Init+0x372>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800365e:	f023 010f 	bic.w	r1, r3, #15
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	69db      	ldr	r3, [r3, #28]
 8003666:	1e5a      	subs	r2, r3, #1
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	430a      	orrs	r2, r1
 800366e:	631a      	str	r2, [r3, #48]	; 0x30
 8003670:	e007      	b.n	8003682 <HAL_ADC_Init+0x382>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	f022 020f 	bic.w	r2, r2, #15
 8003680:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	2200      	movs	r2, #0
 8003686:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800368c:	f023 0303 	bic.w	r3, r3, #3
 8003690:	f043 0201 	orr.w	r2, r3, #1
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	641a      	str	r2, [r3, #64]	; 0x40
 8003698:	e00a      	b.n	80036b0 <HAL_ADC_Init+0x3b0>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800369e:	f023 0312 	bic.w	r3, r3, #18
 80036a2:	f043 0210 	orr.w	r2, r3, #16
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 80036aa:	2301      	movs	r3, #1
 80036ac:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 80036b0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80036b4:	4618      	mov	r0, r3
 80036b6:	3768      	adds	r7, #104	; 0x68
 80036b8:	46bd      	mov	sp, r7
 80036ba:	bd80      	pop	{r7, pc}
 80036bc:	fff0c007 	.word	0xfff0c007

080036c0 <HAL_ADC_Start_IT>:
  *         For ADC master, ADC is enabled and multimode conversion is started.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 80036c0:	b580      	push	{r7, lr}
 80036c2:	b084      	sub	sp, #16
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80036c8:	2300      	movs	r3, #0
 80036ca:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	689b      	ldr	r3, [r3, #8]
 80036d2:	f003 0304 	and.w	r3, r3, #4
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	f040 8123 	bne.w	8003922 <HAL_ADC_Start_IT+0x262>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80036e2:	2b01      	cmp	r3, #1
 80036e4:	d101      	bne.n	80036ea <HAL_ADC_Start_IT+0x2a>
 80036e6:	2302      	movs	r3, #2
 80036e8:	e11e      	b.n	8003928 <HAL_ADC_Start_IT+0x268>
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	2201      	movs	r2, #1
 80036ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80036f2:	6878      	ldr	r0, [r7, #4]
 80036f4:	f001 f81e 	bl	8004734 <ADC_Enable>
 80036f8:	4603      	mov	r3, r0
 80036fa:	73fb      	strb	r3, [r7, #15]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80036fc:	7bfb      	ldrb	r3, [r7, #15]
 80036fe:	2b00      	cmp	r3, #0
 8003700:	f040 810a 	bne.w	8003918 <HAL_ADC_Start_IT+0x258>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003708:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800370c:	f023 0301 	bic.w	r3, r3, #1
 8003710:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Set group injected state (from auto-injection) and multimode state   */
      /* for all cases of multimode: independent mode, multimode ADC master   */
      /* or multimode ADC slave (for devices with several ADCs):              */
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003720:	d004      	beq.n	800372c <HAL_ADC_Start_IT+0x6c>
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	4a82      	ldr	r2, [pc, #520]	; (8003930 <HAL_ADC_Start_IT+0x270>)
 8003728:	4293      	cmp	r3, r2
 800372a:	d106      	bne.n	800373a <HAL_ADC_Start_IT+0x7a>
 800372c:	4b81      	ldr	r3, [pc, #516]	; (8003934 <HAL_ADC_Start_IT+0x274>)
 800372e:	689b      	ldr	r3, [r3, #8]
 8003730:	f003 031f 	and.w	r3, r3, #31
 8003734:	2b00      	cmp	r3, #0
 8003736:	d010      	beq.n	800375a <HAL_ADC_Start_IT+0x9a>
 8003738:	e005      	b.n	8003746 <HAL_ADC_Start_IT+0x86>
 800373a:	4b7f      	ldr	r3, [pc, #508]	; (8003938 <HAL_ADC_Start_IT+0x278>)
 800373c:	689b      	ldr	r3, [r3, #8]
 800373e:	f003 031f 	and.w	r3, r3, #31
 8003742:	2b00      	cmp	r3, #0
 8003744:	d009      	beq.n	800375a <HAL_ADC_Start_IT+0x9a>
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800374e:	d004      	beq.n	800375a <HAL_ADC_Start_IT+0x9a>
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	4a79      	ldr	r2, [pc, #484]	; (800393c <HAL_ADC_Start_IT+0x27c>)
 8003756:	4293      	cmp	r3, r2
 8003758:	d115      	bne.n	8003786 <HAL_ADC_Start_IT+0xc6>
      {
        /* Set ADC state (ADC independent or master) */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800375e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	68db      	ldr	r3, [r3, #12]
 800376c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003770:	2b00      	cmp	r3, #0
 8003772:	d036      	beq.n	80037e2 <HAL_ADC_Start_IT+0x122>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003778:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800377c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	641a      	str	r2, [r3, #64]	; 0x40
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8003784:	e02d      	b.n	80037e2 <HAL_ADC_Start_IT+0x122>
        }
      }
      else
      {
        /* Set ADC state (ADC slave) */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800378a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800379a:	d004      	beq.n	80037a6 <HAL_ADC_Start_IT+0xe6>
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	4a63      	ldr	r2, [pc, #396]	; (8003930 <HAL_ADC_Start_IT+0x270>)
 80037a2:	4293      	cmp	r3, r2
 80037a4:	d10a      	bne.n	80037bc <HAL_ADC_Start_IT+0xfc>
 80037a6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80037aa:	68db      	ldr	r3, [r3, #12]
 80037ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	bf14      	ite	ne
 80037b4:	2301      	movne	r3, #1
 80037b6:	2300      	moveq	r3, #0
 80037b8:	b2db      	uxtb	r3, r3
 80037ba:	e008      	b.n	80037ce <HAL_ADC_Start_IT+0x10e>
 80037bc:	4b5f      	ldr	r3, [pc, #380]	; (800393c <HAL_ADC_Start_IT+0x27c>)
 80037be:	68db      	ldr	r3, [r3, #12]
 80037c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	bf14      	ite	ne
 80037c8:	2301      	movne	r3, #1
 80037ca:	2300      	moveq	r3, #0
 80037cc:	b2db      	uxtb	r3, r3
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d007      	beq.n	80037e2 <HAL_ADC_Start_IT+0x122>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037d6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80037da:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	641a      	str	r2, [r3, #64]	; 0x40
        }
      }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037e6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80037ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80037ee:	d106      	bne.n	80037fe <HAL_ADC_Start_IT+0x13e>
      {
        /* Reset ADC error code fields related to conversions on group regular*/
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037f4:	f023 0206 	bic.w	r2, r3, #6
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	645a      	str	r2, [r3, #68]	; 0x44
 80037fc:	e002      	b.n	8003804 <HAL_ADC_Start_IT+0x144>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	2200      	movs	r2, #0
 8003802:	645a      	str	r2, [r3, #68]	; 0x44
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	2200      	movs	r2, #0
 8003808:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	221c      	movs	r2, #28
 8003812:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC end of conversion interrupt */
      /* Enable ADC overrun interrupt */  
      switch(hadc->Init.EOCSelection)
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	695b      	ldr	r3, [r3, #20]
 8003818:	2b08      	cmp	r3, #8
 800381a:	d110      	bne.n	800383e <HAL_ADC_Start_IT+0x17e>
      {
        case ADC_EOC_SEQ_CONV: 
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	685a      	ldr	r2, [r3, #4]
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f022 0204 	bic.w	r2, r2, #4
 800382a:	605a      	str	r2, [r3, #4]
          __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOS));
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	685a      	ldr	r2, [r3, #4]
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f042 0208 	orr.w	r2, r2, #8
 800383a:	605a      	str	r2, [r3, #4]
          break;
 800383c:	e008      	b.n	8003850 <HAL_ADC_Start_IT+0x190>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS));
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	685a      	ldr	r2, [r3, #4]
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	f042 020c 	orr.w	r2, r2, #12
 800384c:	605a      	str	r2, [r3, #4]
          break;
 800384e:	bf00      	nop
      /* If overrun is set to overwrite previous data (default setting),      */
      /* overrun interrupt is not activated (overrun event is not considered  */
      /* as an error).                                                        */
      /* (cf ref manual "Managing conversions without using the DMA and       */
      /* without overrun ")                                                   */
      if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003854:	2b01      	cmp	r3, #1
 8003856:	d107      	bne.n	8003868 <HAL_ADC_Start_IT+0x1a8>
      {
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	685a      	ldr	r2, [r3, #4]
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	f022 0210 	bic.w	r2, r2, #16
 8003866:	605a      	str	r2, [r3, #4]
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Case of multimode enabled (for devices with several ADCs):           */
      /*  - if ADC is slave, ADC is enabled only (conversion is not started). */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003870:	d004      	beq.n	800387c <HAL_ADC_Start_IT+0x1bc>
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	4a2e      	ldr	r2, [pc, #184]	; (8003930 <HAL_ADC_Start_IT+0x270>)
 8003878:	4293      	cmp	r3, r2
 800387a:	d106      	bne.n	800388a <HAL_ADC_Start_IT+0x1ca>
 800387c:	4b2d      	ldr	r3, [pc, #180]	; (8003934 <HAL_ADC_Start_IT+0x274>)
 800387e:	689b      	ldr	r3, [r3, #8]
 8003880:	f003 031f 	and.w	r3, r3, #31
 8003884:	2b00      	cmp	r3, #0
 8003886:	d03e      	beq.n	8003906 <HAL_ADC_Start_IT+0x246>
 8003888:	e005      	b.n	8003896 <HAL_ADC_Start_IT+0x1d6>
 800388a:	4b2b      	ldr	r3, [pc, #172]	; (8003938 <HAL_ADC_Start_IT+0x278>)
 800388c:	689b      	ldr	r3, [r3, #8]
 800388e:	f003 031f 	and.w	r3, r3, #31
 8003892:	2b00      	cmp	r3, #0
 8003894:	d037      	beq.n	8003906 <HAL_ADC_Start_IT+0x246>
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800389e:	d004      	beq.n	80038aa <HAL_ADC_Start_IT+0x1ea>
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	4a22      	ldr	r2, [pc, #136]	; (8003930 <HAL_ADC_Start_IT+0x270>)
 80038a6:	4293      	cmp	r3, r2
 80038a8:	d106      	bne.n	80038b8 <HAL_ADC_Start_IT+0x1f8>
 80038aa:	4b22      	ldr	r3, [pc, #136]	; (8003934 <HAL_ADC_Start_IT+0x274>)
 80038ac:	689b      	ldr	r3, [r3, #8]
 80038ae:	f003 031f 	and.w	r3, r3, #31
 80038b2:	2b05      	cmp	r3, #5
 80038b4:	d027      	beq.n	8003906 <HAL_ADC_Start_IT+0x246>
 80038b6:	e005      	b.n	80038c4 <HAL_ADC_Start_IT+0x204>
 80038b8:	4b1f      	ldr	r3, [pc, #124]	; (8003938 <HAL_ADC_Start_IT+0x278>)
 80038ba:	689b      	ldr	r3, [r3, #8]
 80038bc:	f003 031f 	and.w	r3, r3, #31
 80038c0:	2b05      	cmp	r3, #5
 80038c2:	d020      	beq.n	8003906 <HAL_ADC_Start_IT+0x246>
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80038cc:	d004      	beq.n	80038d8 <HAL_ADC_Start_IT+0x218>
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	4a17      	ldr	r2, [pc, #92]	; (8003930 <HAL_ADC_Start_IT+0x270>)
 80038d4:	4293      	cmp	r3, r2
 80038d6:	d106      	bne.n	80038e6 <HAL_ADC_Start_IT+0x226>
 80038d8:	4b16      	ldr	r3, [pc, #88]	; (8003934 <HAL_ADC_Start_IT+0x274>)
 80038da:	689b      	ldr	r3, [r3, #8]
 80038dc:	f003 031f 	and.w	r3, r3, #31
 80038e0:	2b09      	cmp	r3, #9
 80038e2:	d010      	beq.n	8003906 <HAL_ADC_Start_IT+0x246>
 80038e4:	e005      	b.n	80038f2 <HAL_ADC_Start_IT+0x232>
 80038e6:	4b14      	ldr	r3, [pc, #80]	; (8003938 <HAL_ADC_Start_IT+0x278>)
 80038e8:	689b      	ldr	r3, [r3, #8]
 80038ea:	f003 031f 	and.w	r3, r3, #31
 80038ee:	2b09      	cmp	r3, #9
 80038f0:	d009      	beq.n	8003906 <HAL_ADC_Start_IT+0x246>
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80038fa:	d004      	beq.n	8003906 <HAL_ADC_Start_IT+0x246>
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	4a0e      	ldr	r2, [pc, #56]	; (800393c <HAL_ADC_Start_IT+0x27c>)
 8003902:	4293      	cmp	r3, r2
 8003904:	d10f      	bne.n	8003926 <HAL_ADC_Start_IT+0x266>
      {
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	689a      	ldr	r2, [r3, #8]
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f042 0204 	orr.w	r2, r2, #4
 8003914:	609a      	str	r2, [r3, #8]
 8003916:	e006      	b.n	8003926 <HAL_ADC_Start_IT+0x266>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	2200      	movs	r2, #0
 800391c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8003920:	e001      	b.n	8003926 <HAL_ADC_Start_IT+0x266>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003922:	2302      	movs	r3, #2
 8003924:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8003926:	7bfb      	ldrb	r3, [r7, #15]
}
 8003928:	4618      	mov	r0, r3
 800392a:	3710      	adds	r7, #16
 800392c:	46bd      	mov	sp, r7
 800392e:	bd80      	pop	{r7, pc}
 8003930:	50000100 	.word	0x50000100
 8003934:	50000300 	.word	0x50000300
 8003938:	50000700 	.word	0x50000700
 800393c:	50000400 	.word	0x50000400

08003940 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8003940:	b480      	push	{r7}
 8003942:	b083      	sub	sp, #12
 8003944:	af00      	add	r7, sp, #0
 8003946:	6078      	str	r0, [r7, #4]

  /* Note: ADC flag EOC is not cleared here by software because               */
  /*       automatically cleared by hardware when reading register DR.        */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 800394e:	4618      	mov	r0, r3
 8003950:	370c      	adds	r7, #12
 8003952:	46bd      	mov	sp, r7
 8003954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003958:	4770      	bx	lr
	...

0800395c <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request.  
  * @param  hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 800395c:	b580      	push	{r7, lr}
 800395e:	b088      	sub	sp, #32
 8003960:	af00      	add	r7, sp, #0
 8003962:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0U; /* flag set if overrun occurrence has to be considered as an error */
 8003964:	2300      	movs	r3, #0
 8003966:	61fb      	str	r3, [r7, #28]
  ADC_Common_TypeDef *tmpADC_Common;
  uint32_t tmp_cfgr     = 0x0U;
 8003968:	2300      	movs	r3, #0
 800396a:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_cfgr_jqm = 0x0U;
 800396c:	2300      	movs	r3, #0
 800396e:	617b      	str	r3, [r7, #20]
  uint32_t tmp_isr = hadc->Instance->ISR;
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	613b      	str	r3, [r7, #16]
  uint32_t tmp_ier = hadc->Instance->IER;
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	685b      	ldr	r3, [r3, #4]
 800397e:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if( (((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8003980:	693b      	ldr	r3, [r7, #16]
 8003982:	f003 0304 	and.w	r3, r3, #4
 8003986:	2b00      	cmp	r3, #0
 8003988:	d004      	beq.n	8003994 <HAL_ADC_IRQHandler+0x38>
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	f003 0304 	and.w	r3, r3, #4
 8003990:	2b00      	cmp	r3, #0
 8003992:	d10b      	bne.n	80039ac <HAL_ADC_IRQHandler+0x50>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS))   )
 8003994:	693b      	ldr	r3, [r7, #16]
 8003996:	f003 0308 	and.w	r3, r3, #8
  if( (((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 800399a:	2b00      	cmp	r3, #0
 800399c:	f000 80bc 	beq.w	8003b18 <HAL_ADC_IRQHandler+0x1bc>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS))   )
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	f003 0308 	and.w	r3, r3, #8
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	f000 80b6 	beq.w	8003b18 <HAL_ADC_IRQHandler+0x1bc>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039b0:	f003 0310 	and.w	r3, r3, #16
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d105      	bne.n	80039c4 <HAL_ADC_IRQHandler+0x68>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039bc:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* Get relevant register CFGR in ADC instance of ADC master or slave    */
    /* in function of multimode state (for devices with multimode           */
    /* available).                                                          */
    if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80039cc:	d004      	beq.n	80039d8 <HAL_ADC_IRQHandler+0x7c>
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	4a90      	ldr	r2, [pc, #576]	; (8003c14 <HAL_ADC_IRQHandler+0x2b8>)
 80039d4:	4293      	cmp	r3, r2
 80039d6:	d106      	bne.n	80039e6 <HAL_ADC_IRQHandler+0x8a>
 80039d8:	4b8f      	ldr	r3, [pc, #572]	; (8003c18 <HAL_ADC_IRQHandler+0x2bc>)
 80039da:	689b      	ldr	r3, [r3, #8]
 80039dc:	f003 031f 	and.w	r3, r3, #31
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d03e      	beq.n	8003a62 <HAL_ADC_IRQHandler+0x106>
 80039e4:	e005      	b.n	80039f2 <HAL_ADC_IRQHandler+0x96>
 80039e6:	4b8d      	ldr	r3, [pc, #564]	; (8003c1c <HAL_ADC_IRQHandler+0x2c0>)
 80039e8:	689b      	ldr	r3, [r3, #8]
 80039ea:	f003 031f 	and.w	r3, r3, #31
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d037      	beq.n	8003a62 <HAL_ADC_IRQHandler+0x106>
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80039fa:	d004      	beq.n	8003a06 <HAL_ADC_IRQHandler+0xaa>
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	4a84      	ldr	r2, [pc, #528]	; (8003c14 <HAL_ADC_IRQHandler+0x2b8>)
 8003a02:	4293      	cmp	r3, r2
 8003a04:	d106      	bne.n	8003a14 <HAL_ADC_IRQHandler+0xb8>
 8003a06:	4b84      	ldr	r3, [pc, #528]	; (8003c18 <HAL_ADC_IRQHandler+0x2bc>)
 8003a08:	689b      	ldr	r3, [r3, #8]
 8003a0a:	f003 031f 	and.w	r3, r3, #31
 8003a0e:	2b05      	cmp	r3, #5
 8003a10:	d027      	beq.n	8003a62 <HAL_ADC_IRQHandler+0x106>
 8003a12:	e005      	b.n	8003a20 <HAL_ADC_IRQHandler+0xc4>
 8003a14:	4b81      	ldr	r3, [pc, #516]	; (8003c1c <HAL_ADC_IRQHandler+0x2c0>)
 8003a16:	689b      	ldr	r3, [r3, #8]
 8003a18:	f003 031f 	and.w	r3, r3, #31
 8003a1c:	2b05      	cmp	r3, #5
 8003a1e:	d020      	beq.n	8003a62 <HAL_ADC_IRQHandler+0x106>
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003a28:	d004      	beq.n	8003a34 <HAL_ADC_IRQHandler+0xd8>
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	4a79      	ldr	r2, [pc, #484]	; (8003c14 <HAL_ADC_IRQHandler+0x2b8>)
 8003a30:	4293      	cmp	r3, r2
 8003a32:	d106      	bne.n	8003a42 <HAL_ADC_IRQHandler+0xe6>
 8003a34:	4b78      	ldr	r3, [pc, #480]	; (8003c18 <HAL_ADC_IRQHandler+0x2bc>)
 8003a36:	689b      	ldr	r3, [r3, #8]
 8003a38:	f003 031f 	and.w	r3, r3, #31
 8003a3c:	2b09      	cmp	r3, #9
 8003a3e:	d010      	beq.n	8003a62 <HAL_ADC_IRQHandler+0x106>
 8003a40:	e005      	b.n	8003a4e <HAL_ADC_IRQHandler+0xf2>
 8003a42:	4b76      	ldr	r3, [pc, #472]	; (8003c1c <HAL_ADC_IRQHandler+0x2c0>)
 8003a44:	689b      	ldr	r3, [r3, #8]
 8003a46:	f003 031f 	and.w	r3, r3, #31
 8003a4a:	2b09      	cmp	r3, #9
 8003a4c:	d009      	beq.n	8003a62 <HAL_ADC_IRQHandler+0x106>
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003a56:	d004      	beq.n	8003a62 <HAL_ADC_IRQHandler+0x106>
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	4a70      	ldr	r2, [pc, #448]	; (8003c20 <HAL_ADC_IRQHandler+0x2c4>)
 8003a5e:	4293      	cmp	r3, r2
 8003a60:	d104      	bne.n	8003a6c <HAL_ADC_IRQHandler+0x110>
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	68db      	ldr	r3, [r3, #12]
 8003a68:	61bb      	str	r3, [r7, #24]
 8003a6a:	e00f      	b.n	8003a8c <HAL_ADC_IRQHandler+0x130>
    }
    else
    {
      tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003a74:	d004      	beq.n	8003a80 <HAL_ADC_IRQHandler+0x124>
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	4a66      	ldr	r2, [pc, #408]	; (8003c14 <HAL_ADC_IRQHandler+0x2b8>)
 8003a7c:	4293      	cmp	r3, r2
 8003a7e:	d102      	bne.n	8003a86 <HAL_ADC_IRQHandler+0x12a>
 8003a80:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003a84:	e000      	b.n	8003a88 <HAL_ADC_IRQHandler+0x12c>
 8003a86:	4b66      	ldr	r3, [pc, #408]	; (8003c20 <HAL_ADC_IRQHandler+0x2c4>)
 8003a88:	68db      	ldr	r3, [r3, #12]
 8003a8a:	61bb      	str	r3, [r7, #24]
    }
    
    /* Disable interruption if no further conversion upcoming by regular      */
    /* external trigger or by continuous mode,                                */
    /* and if scan sequence if completed.                                     */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)         && 
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	68db      	ldr	r3, [r3, #12]
 8003a92:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d137      	bne.n	8003b0a <HAL_ADC_IRQHandler+0x1ae>
       (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == RESET)  )
 8003a9a:	69bb      	ldr	r3, [r7, #24]
 8003a9c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)         && 
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d132      	bne.n	8003b0a <HAL_ADC_IRQHandler+0x1ae>
    {
      /* If End of Sequence is reached, disable interrupts */
      if((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS)
 8003aa4:	693b      	ldr	r3, [r7, #16]
 8003aa6:	f003 0308 	and.w	r3, r3, #8
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d02d      	beq.n	8003b0a <HAL_ADC_IRQHandler+0x1ae>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	689b      	ldr	r3, [r3, #8]
 8003ab4:	f003 0304 	and.w	r3, r3, #4
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d11a      	bne.n	8003af2 <HAL_ADC_IRQHandler+0x196>
        {
          /* Disable ADC end of sequence conversion interrupt */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	685a      	ldr	r2, [r3, #4]
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	f022 020c 	bic.w	r2, r2, #12
 8003aca:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ad0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	641a      	str	r2, [r3, #64]	; 0x40
          
          if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003adc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d112      	bne.n	8003b0a <HAL_ADC_IRQHandler+0x1ae>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ae8:	f043 0201 	orr.w	r2, r3, #1
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	641a      	str	r2, [r3, #64]	; 0x40
 8003af0:	e00b      	b.n	8003b0a <HAL_ADC_IRQHandler+0x1ae>
          }
        }
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003af6:	f043 0210 	orr.w	r2, r3, #16
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	641a      	str	r2, [r3, #64]	; 0x40
        
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b02:	f043 0201 	orr.w	r2, r3, #1
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	645a      	str	r2, [r3, #68]	; 0x44
    /*       from EOC or EOS, possibility to use:                             */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8003b0a:	6878      	ldr	r0, [r7, #4]
 8003b0c:	f7fe f904 	bl	8001d18 <HAL_ADC_ConvCpltCallback>
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved      */
    /*       data.                                                            */
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS) );
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	220c      	movs	r2, #12
 8003b16:	601a      	str	r2, [r3, #0]
  }
  
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if( (((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8003b18:	693b      	ldr	r3, [r7, #16]
 8003b1a:	f003 0320 	and.w	r3, r3, #32
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d004      	beq.n	8003b2c <HAL_ADC_IRQHandler+0x1d0>
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	f003 0320 	and.w	r3, r3, #32
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d10b      	bne.n	8003b44 <HAL_ADC_IRQHandler+0x1e8>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS))   )
 8003b2c:	693b      	ldr	r3, [r7, #16]
 8003b2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if( (((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	f000 8138 	beq.w	8003da8 <HAL_ADC_IRQHandler+0x44c>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS))   )
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	f000 8132 	beq.w	8003da8 <HAL_ADC_IRQHandler+0x44c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b48:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	641a      	str	r2, [r3, #64]	; 0x40
        
    /* Get relevant register CFGR in ADC instance of ADC master or slave      */
    /* in function of multimode state (for devices with multimode             */
    /* available).                                                            */
    if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003b58:	d004      	beq.n	8003b64 <HAL_ADC_IRQHandler+0x208>
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	4a2d      	ldr	r2, [pc, #180]	; (8003c14 <HAL_ADC_IRQHandler+0x2b8>)
 8003b60:	4293      	cmp	r3, r2
 8003b62:	d106      	bne.n	8003b72 <HAL_ADC_IRQHandler+0x216>
 8003b64:	4b2c      	ldr	r3, [pc, #176]	; (8003c18 <HAL_ADC_IRQHandler+0x2bc>)
 8003b66:	689b      	ldr	r3, [r3, #8]
 8003b68:	f003 031f 	and.w	r3, r3, #31
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d03e      	beq.n	8003bee <HAL_ADC_IRQHandler+0x292>
 8003b70:	e005      	b.n	8003b7e <HAL_ADC_IRQHandler+0x222>
 8003b72:	4b2a      	ldr	r3, [pc, #168]	; (8003c1c <HAL_ADC_IRQHandler+0x2c0>)
 8003b74:	689b      	ldr	r3, [r3, #8]
 8003b76:	f003 031f 	and.w	r3, r3, #31
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d037      	beq.n	8003bee <HAL_ADC_IRQHandler+0x292>
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003b86:	d004      	beq.n	8003b92 <HAL_ADC_IRQHandler+0x236>
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	4a21      	ldr	r2, [pc, #132]	; (8003c14 <HAL_ADC_IRQHandler+0x2b8>)
 8003b8e:	4293      	cmp	r3, r2
 8003b90:	d106      	bne.n	8003ba0 <HAL_ADC_IRQHandler+0x244>
 8003b92:	4b21      	ldr	r3, [pc, #132]	; (8003c18 <HAL_ADC_IRQHandler+0x2bc>)
 8003b94:	689b      	ldr	r3, [r3, #8]
 8003b96:	f003 031f 	and.w	r3, r3, #31
 8003b9a:	2b05      	cmp	r3, #5
 8003b9c:	d027      	beq.n	8003bee <HAL_ADC_IRQHandler+0x292>
 8003b9e:	e005      	b.n	8003bac <HAL_ADC_IRQHandler+0x250>
 8003ba0:	4b1e      	ldr	r3, [pc, #120]	; (8003c1c <HAL_ADC_IRQHandler+0x2c0>)
 8003ba2:	689b      	ldr	r3, [r3, #8]
 8003ba4:	f003 031f 	and.w	r3, r3, #31
 8003ba8:	2b05      	cmp	r3, #5
 8003baa:	d020      	beq.n	8003bee <HAL_ADC_IRQHandler+0x292>
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003bb4:	d004      	beq.n	8003bc0 <HAL_ADC_IRQHandler+0x264>
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	4a16      	ldr	r2, [pc, #88]	; (8003c14 <HAL_ADC_IRQHandler+0x2b8>)
 8003bbc:	4293      	cmp	r3, r2
 8003bbe:	d106      	bne.n	8003bce <HAL_ADC_IRQHandler+0x272>
 8003bc0:	4b15      	ldr	r3, [pc, #84]	; (8003c18 <HAL_ADC_IRQHandler+0x2bc>)
 8003bc2:	689b      	ldr	r3, [r3, #8]
 8003bc4:	f003 031f 	and.w	r3, r3, #31
 8003bc8:	2b09      	cmp	r3, #9
 8003bca:	d010      	beq.n	8003bee <HAL_ADC_IRQHandler+0x292>
 8003bcc:	e005      	b.n	8003bda <HAL_ADC_IRQHandler+0x27e>
 8003bce:	4b13      	ldr	r3, [pc, #76]	; (8003c1c <HAL_ADC_IRQHandler+0x2c0>)
 8003bd0:	689b      	ldr	r3, [r3, #8]
 8003bd2:	f003 031f 	and.w	r3, r3, #31
 8003bd6:	2b09      	cmp	r3, #9
 8003bd8:	d009      	beq.n	8003bee <HAL_ADC_IRQHandler+0x292>
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003be2:	d004      	beq.n	8003bee <HAL_ADC_IRQHandler+0x292>
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	4a0d      	ldr	r2, [pc, #52]	; (8003c20 <HAL_ADC_IRQHandler+0x2c4>)
 8003bea:	4293      	cmp	r3, r2
 8003bec:	d104      	bne.n	8003bf8 <HAL_ADC_IRQHandler+0x29c>
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	68db      	ldr	r3, [r3, #12]
 8003bf4:	61bb      	str	r3, [r7, #24]
 8003bf6:	e018      	b.n	8003c2a <HAL_ADC_IRQHandler+0x2ce>
    }
    else
    {
      tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003c00:	d004      	beq.n	8003c0c <HAL_ADC_IRQHandler+0x2b0>
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	4a03      	ldr	r2, [pc, #12]	; (8003c14 <HAL_ADC_IRQHandler+0x2b8>)
 8003c08:	4293      	cmp	r3, r2
 8003c0a:	d10b      	bne.n	8003c24 <HAL_ADC_IRQHandler+0x2c8>
 8003c0c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003c10:	e009      	b.n	8003c26 <HAL_ADC_IRQHandler+0x2ca>
 8003c12:	bf00      	nop
 8003c14:	50000100 	.word	0x50000100
 8003c18:	50000300 	.word	0x50000300
 8003c1c:	50000700 	.word	0x50000700
 8003c20:	50000400 	.word	0x50000400
 8003c24:	4b92      	ldr	r3, [pc, #584]	; (8003e70 <HAL_ADC_IRQHandler+0x514>)
 8003c26:	68db      	ldr	r3, [r3, #12]
 8003c28:	61bb      	str	r3, [r7, #24]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc))
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c30:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	f040 80b0 	bne.w	8003d9a <HAL_ADC_IRQHandler+0x43e>
    {
      if((READ_BIT (tmp_cfgr, ADC_CFGR_JAUTO) == RESET)    ||
 8003c3a:	69bb      	ldr	r3, [r7, #24]
 8003c3c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d00d      	beq.n	8003c60 <HAL_ADC_IRQHandler+0x304>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)          &&
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	68db      	ldr	r3, [r3, #12]
 8003c4a:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
      if((READ_BIT (tmp_cfgr, ADC_CFGR_JAUTO) == RESET)    ||
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	f040 80a3 	bne.w	8003d9a <HAL_ADC_IRQHandler+0x43e>
          (READ_BIT (tmp_cfgr, ADC_CFGR_CONT) == RESET)   )   )
 8003c54:	69bb      	ldr	r3, [r7, #24]
 8003c56:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)          &&
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	f040 809d 	bne.w	8003d9a <HAL_ADC_IRQHandler+0x43e>
      {
        /* If End of Sequence is reached, disable interrupts */
        if((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS)
 8003c60:	693b      	ldr	r3, [r7, #16]
 8003c62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	f000 8097 	beq.w	8003d9a <HAL_ADC_IRQHandler+0x43e>
        {
          
          /* Get relevant register CFGR in ADC instance of ADC master or slave  */
          /* in function of multimode state (for devices with multimode         */
          /* available).                                                        */
          if (ADC_NONMULTIMODE_INJ_OR_MULTIMODEMASTER(hadc))
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003c74:	d004      	beq.n	8003c80 <HAL_ADC_IRQHandler+0x324>
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	4a7e      	ldr	r2, [pc, #504]	; (8003e74 <HAL_ADC_IRQHandler+0x518>)
 8003c7c:	4293      	cmp	r3, r2
 8003c7e:	d106      	bne.n	8003c8e <HAL_ADC_IRQHandler+0x332>
 8003c80:	4b7d      	ldr	r3, [pc, #500]	; (8003e78 <HAL_ADC_IRQHandler+0x51c>)
 8003c82:	689b      	ldr	r3, [r3, #8]
 8003c84:	f003 031f 	and.w	r3, r3, #31
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d03e      	beq.n	8003d0a <HAL_ADC_IRQHandler+0x3ae>
 8003c8c:	e005      	b.n	8003c9a <HAL_ADC_IRQHandler+0x33e>
 8003c8e:	4b7b      	ldr	r3, [pc, #492]	; (8003e7c <HAL_ADC_IRQHandler+0x520>)
 8003c90:	689b      	ldr	r3, [r3, #8]
 8003c92:	f003 031f 	and.w	r3, r3, #31
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d037      	beq.n	8003d0a <HAL_ADC_IRQHandler+0x3ae>
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003ca2:	d004      	beq.n	8003cae <HAL_ADC_IRQHandler+0x352>
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	4a72      	ldr	r2, [pc, #456]	; (8003e74 <HAL_ADC_IRQHandler+0x518>)
 8003caa:	4293      	cmp	r3, r2
 8003cac:	d106      	bne.n	8003cbc <HAL_ADC_IRQHandler+0x360>
 8003cae:	4b72      	ldr	r3, [pc, #456]	; (8003e78 <HAL_ADC_IRQHandler+0x51c>)
 8003cb0:	689b      	ldr	r3, [r3, #8]
 8003cb2:	f003 031f 	and.w	r3, r3, #31
 8003cb6:	2b06      	cmp	r3, #6
 8003cb8:	d027      	beq.n	8003d0a <HAL_ADC_IRQHandler+0x3ae>
 8003cba:	e005      	b.n	8003cc8 <HAL_ADC_IRQHandler+0x36c>
 8003cbc:	4b6f      	ldr	r3, [pc, #444]	; (8003e7c <HAL_ADC_IRQHandler+0x520>)
 8003cbe:	689b      	ldr	r3, [r3, #8]
 8003cc0:	f003 031f 	and.w	r3, r3, #31
 8003cc4:	2b06      	cmp	r3, #6
 8003cc6:	d020      	beq.n	8003d0a <HAL_ADC_IRQHandler+0x3ae>
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003cd0:	d004      	beq.n	8003cdc <HAL_ADC_IRQHandler+0x380>
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	4a67      	ldr	r2, [pc, #412]	; (8003e74 <HAL_ADC_IRQHandler+0x518>)
 8003cd8:	4293      	cmp	r3, r2
 8003cda:	d106      	bne.n	8003cea <HAL_ADC_IRQHandler+0x38e>
 8003cdc:	4b66      	ldr	r3, [pc, #408]	; (8003e78 <HAL_ADC_IRQHandler+0x51c>)
 8003cde:	689b      	ldr	r3, [r3, #8]
 8003ce0:	f003 031f 	and.w	r3, r3, #31
 8003ce4:	2b07      	cmp	r3, #7
 8003ce6:	d010      	beq.n	8003d0a <HAL_ADC_IRQHandler+0x3ae>
 8003ce8:	e005      	b.n	8003cf6 <HAL_ADC_IRQHandler+0x39a>
 8003cea:	4b64      	ldr	r3, [pc, #400]	; (8003e7c <HAL_ADC_IRQHandler+0x520>)
 8003cec:	689b      	ldr	r3, [r3, #8]
 8003cee:	f003 031f 	and.w	r3, r3, #31
 8003cf2:	2b07      	cmp	r3, #7
 8003cf4:	d009      	beq.n	8003d0a <HAL_ADC_IRQHandler+0x3ae>
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003cfe:	d004      	beq.n	8003d0a <HAL_ADC_IRQHandler+0x3ae>
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	4a5a      	ldr	r2, [pc, #360]	; (8003e70 <HAL_ADC_IRQHandler+0x514>)
 8003d06:	4293      	cmp	r3, r2
 8003d08:	d104      	bne.n	8003d14 <HAL_ADC_IRQHandler+0x3b8>
          {
            tmp_cfgr_jqm = READ_REG(hadc->Instance->CFGR); 
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	68db      	ldr	r3, [r3, #12]
 8003d10:	617b      	str	r3, [r7, #20]
 8003d12:	e00f      	b.n	8003d34 <HAL_ADC_IRQHandler+0x3d8>
          }
          else
          {
            tmp_cfgr_jqm = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003d1c:	d004      	beq.n	8003d28 <HAL_ADC_IRQHandler+0x3cc>
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	4a54      	ldr	r2, [pc, #336]	; (8003e74 <HAL_ADC_IRQHandler+0x518>)
 8003d24:	4293      	cmp	r3, r2
 8003d26:	d102      	bne.n	8003d2e <HAL_ADC_IRQHandler+0x3d2>
 8003d28:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003d2c:	e000      	b.n	8003d30 <HAL_ADC_IRQHandler+0x3d4>
 8003d2e:	4b50      	ldr	r3, [pc, #320]	; (8003e70 <HAL_ADC_IRQHandler+0x514>)
 8003d30:	68db      	ldr	r3, [r3, #12]
 8003d32:	617b      	str	r3, [r7, #20]
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if(READ_BIT(tmp_cfgr_jqm, ADC_CFGR_JQM) == RESET)
 8003d34:	697b      	ldr	r3, [r7, #20]
 8003d36:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d12d      	bne.n	8003d9a <HAL_ADC_IRQHandler+0x43e>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (ADC_IS_CONVERSION_ONGOING_INJECTED(hadc) == RESET)
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	689b      	ldr	r3, [r3, #8]
 8003d44:	f003 0308 	and.w	r3, r3, #8
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d11a      	bne.n	8003d82 <HAL_ADC_IRQHandler+0x426>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	685a      	ldr	r2, [r3, #4]
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003d5a:	605a      	str	r2, [r3, #4]
              
              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d60:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	641a      	str	r2, [r3, #64]	; 0x40
              
              if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d112      	bne.n	8003d9a <HAL_ADC_IRQHandler+0x43e>
              { 
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d78:	f043 0201 	orr.w	r2, r3, #1
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	641a      	str	r2, [r3, #64]	; 0x40
 8003d80:	e00b      	b.n	8003d9a <HAL_ADC_IRQHandler+0x43e>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d86:	f043 0210 	orr.w	r2, r3, #16
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	641a      	str	r2, [r3, #64]	; 0x40
              
              /* Set ADC error code to ADC IP internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d92:	f043 0201 	orr.w	r2, r3, #1
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	645a      	str	r2, [r3, #68]	; 0x44
    /*       from JEOC or JEOS, possibility to use:                           */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_JEOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8003d9a:	6878      	ldr	r0, [r7, #4]
 8003d9c:	f000 f8c4 	bl	8003f28 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	2260      	movs	r2, #96	; 0x60
 8003da6:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check analog watchdog 1 flag ========== */
  if(((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8003da8:	693b      	ldr	r3, [r7, #16]
 8003daa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d011      	beq.n	8003dd6 <HAL_ADC_IRQHandler+0x47a>
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d00c      	beq.n	8003dd6 <HAL_ADC_IRQHandler+0x47a>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dc0:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8003dc8:	6878      	ldr	r0, [r7, #4]
 8003dca:	f7ff fa85 	bl	80032d8 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	2280      	movs	r2, #128	; 0x80
 8003dd4:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check analog watchdog 2 flag ========== */
  if(((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8003dd6:	693b      	ldr	r3, [r7, #16]
 8003dd8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d012      	beq.n	8003e06 <HAL_ADC_IRQHandler+0x4aa>
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d00d      	beq.n	8003e06 <HAL_ADC_IRQHandler+0x4aa>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dee:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 2 callback */
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8003df6:	6878      	ldr	r0, [r7, #4]
 8003df8:	f000 f8aa 	bl	8003f50 <HAL_ADCEx_LevelOutOfWindow2Callback>
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003e04:	601a      	str	r2, [r3, #0]
  } 
  
  /* ========== Check analog watchdog 3 flag ========== */
  if(((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8003e06:	693b      	ldr	r3, [r7, #16]
 8003e08:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d012      	beq.n	8003e36 <HAL_ADC_IRQHandler+0x4da>
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d00d      	beq.n	8003e36 <HAL_ADC_IRQHandler+0x4da>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e1e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 3 callback */
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8003e26:	6878      	ldr	r0, [r7, #4]
 8003e28:	f000 f89c 	bl	8003f64 <HAL_ADCEx_LevelOutOfWindow3Callback>
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003e34:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check Overrun flag ========== */
  if(((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8003e36:	693b      	ldr	r3, [r7, #16]
 8003e38:	f003 0310 	and.w	r3, r3, #16
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d04f      	beq.n	8003ee0 <HAL_ADC_IRQHandler+0x584>
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	f003 0310 	and.w	r3, r3, #16
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d04a      	beq.n	8003ee0 <HAL_ADC_IRQHandler+0x584>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and         */
    /* without overrun ")                                                     */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e4e:	2b01      	cmp	r3, #1
 8003e50:	d102      	bne.n	8003e58 <HAL_ADC_IRQHandler+0x4fc>
    {
      overrun_error = 1U;
 8003e52:	2301      	movs	r3, #1
 8003e54:	61fb      	str	r3, [r7, #28]
 8003e56:	e02d      	b.n	8003eb4 <HAL_ADC_IRQHandler+0x558>
    else
    {
      /* Pointer to the common control register to which is belonging hadc    */
      /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common */
      /* control registers)                                                   */
      tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003e60:	d004      	beq.n	8003e6c <HAL_ADC_IRQHandler+0x510>
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	4a03      	ldr	r2, [pc, #12]	; (8003e74 <HAL_ADC_IRQHandler+0x518>)
 8003e68:	4293      	cmp	r3, r2
 8003e6a:	d109      	bne.n	8003e80 <HAL_ADC_IRQHandler+0x524>
 8003e6c:	4b02      	ldr	r3, [pc, #8]	; (8003e78 <HAL_ADC_IRQHandler+0x51c>)
 8003e6e:	e008      	b.n	8003e82 <HAL_ADC_IRQHandler+0x526>
 8003e70:	50000400 	.word	0x50000400
 8003e74:	50000100 	.word	0x50000100
 8003e78:	50000300 	.word	0x50000300
 8003e7c:	50000700 	.word	0x50000700
 8003e80:	4b28      	ldr	r3, [pc, #160]	; (8003f24 <HAL_ADC_IRQHandler+0x5c8>)
 8003e82:	60bb      	str	r3, [r7, #8]
      
      /* Check DMA configuration, depending on MultiMode set or not */
      if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
 8003e84:	68bb      	ldr	r3, [r7, #8]
 8003e86:	689b      	ldr	r3, [r3, #8]
 8003e88:	f003 031f 	and.w	r3, r3, #31
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d109      	bne.n	8003ea4 <HAL_ADC_IRQHandler+0x548>
      {
        if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	68db      	ldr	r3, [r3, #12]
 8003e96:	f003 0301 	and.w	r3, r3, #1
 8003e9a:	2b01      	cmp	r3, #1
 8003e9c:	d10a      	bne.n	8003eb4 <HAL_ADC_IRQHandler+0x558>
        {
          overrun_error = 1U;  
 8003e9e:	2301      	movs	r3, #1
 8003ea0:	61fb      	str	r3, [r7, #28]
 8003ea2:	e007      	b.n	8003eb4 <HAL_ADC_IRQHandler+0x558>
        }
      }
      else
      {
        /* MultiMode is enabled, Common Control Register MDMA bits must be checked */
        if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 8003ea4:	68bb      	ldr	r3, [r7, #8]
 8003ea6:	689b      	ldr	r3, [r3, #8]
 8003ea8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d001      	beq.n	8003eb4 <HAL_ADC_IRQHandler+0x558>
        {
          overrun_error = 1U;  
 8003eb0:	2301      	movs	r3, #1
 8003eb2:	61fb      	str	r3, [r7, #28]
        }
      }
    }
    
    if (overrun_error == 1U)
 8003eb4:	69fb      	ldr	r3, [r7, #28]
 8003eb6:	2b01      	cmp	r3, #1
 8003eb8:	d10e      	bne.n	8003ed8 <HAL_ADC_IRQHandler+0x57c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ebe:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	641a      	str	r2, [r3, #64]	; 0x40
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003eca:	f043 0202 	orr.w	r2, r3, #2
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8003ed2:	6878      	ldr	r0, [r7, #4]
 8003ed4:	f7ff fa0a 	bl	80032ec <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	2210      	movs	r2, #16
 8003ede:	601a      	str	r2, [r3, #0]

  }
  
  
  /* ========== Check Injected context queue overflow flag ========== */
  if(((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8003ee0:	693b      	ldr	r3, [r7, #16]
 8003ee2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d018      	beq.n	8003f1c <HAL_ADC_IRQHandler+0x5c0>
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d013      	beq.n	8003f1c <HAL_ADC_IRQHandler+0x5c0>
  {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ef8:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	641a      	str	r2, [r3, #64]	; 0x40
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f04:	f043 0208 	orr.w	r2, r3, #8
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003f14:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8003f16:	6878      	ldr	r0, [r7, #4]
 8003f18:	f000 f810 	bl	8003f3c <HAL_ADCEx_InjectedQueueOverflowCallback>
  }
  
}
 8003f1c:	bf00      	nop
 8003f1e:	3720      	adds	r7, #32
 8003f20:	46bd      	mov	sp, r7
 8003f22:	bd80      	pop	{r7, pc}
 8003f24:	50000700 	.word	0x50000700

08003f28 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003f28:	b480      	push	{r7}
 8003f2a:	b083      	sub	sp, #12
 8003f2c:	af00      	add	r7, sp, #0
 8003f2e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 8003f30:	bf00      	nop
 8003f32:	370c      	adds	r7, #12
 8003f34:	46bd      	mov	sp, r7
 8003f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f3a:	4770      	bx	lr

08003f3c <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef* hadc)
{
 8003f3c:	b480      	push	{r7}
 8003f3e:	b083      	sub	sp, #12
 8003f40:	af00      	add	r7, sp, #0
 8003f42:	6078      	str	r0, [r7, #4]

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented 
            in the user file.
  */
}
 8003f44:	bf00      	nop
 8003f46:	370c      	adds	r7, #12
 8003f48:	46bd      	mov	sp, r7
 8003f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f4e:	4770      	bx	lr

08003f50 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef* hadc)
{
 8003f50:	b480      	push	{r7}
 8003f52:	b083      	sub	sp, #12
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindow2Callback must be implemented in the user file.
  */
}
 8003f58:	bf00      	nop
 8003f5a:	370c      	adds	r7, #12
 8003f5c:	46bd      	mov	sp, r7
 8003f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f62:	4770      	bx	lr

08003f64 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef* hadc)
{
 8003f64:	b480      	push	{r7}
 8003f66:	b083      	sub	sp, #12
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindow3Callback must be implemented in the user file.
  */
}
 8003f6c:	bf00      	nop
 8003f6e:	370c      	adds	r7, #12
 8003f70:	46bd      	mov	sp, r7
 8003f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f76:	4770      	bx	lr

08003f78 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003f78:	b480      	push	{r7}
 8003f7a:	b09b      	sub	sp, #108	; 0x6c
 8003f7c:	af00      	add	r7, sp, #0
 8003f7e:	6078      	str	r0, [r7, #4]
 8003f80:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003f82:	2300      	movs	r3, #0
 8003f84:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8003f88:	2300      	movs	r3, #0
 8003f8a:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003f92:	2b01      	cmp	r3, #1
 8003f94:	d101      	bne.n	8003f9a <HAL_ADC_ConfigChannel+0x22>
 8003f96:	2302      	movs	r3, #2
 8003f98:	e2ca      	b.n	8004530 <HAL_ADC_ConfigChannel+0x5b8>
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	2201      	movs	r2, #1
 8003f9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	689b      	ldr	r3, [r3, #8]
 8003fa8:	f003 0304 	and.w	r3, r3, #4
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	f040 82ae 	bne.w	800450e <HAL_ADC_ConfigChannel+0x596>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 8003fb2:	683b      	ldr	r3, [r7, #0]
 8003fb4:	685b      	ldr	r3, [r3, #4]
 8003fb6:	2b04      	cmp	r3, #4
 8003fb8:	d81c      	bhi.n	8003ff4 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003fc0:	683b      	ldr	r3, [r7, #0]
 8003fc2:	685a      	ldr	r2, [r3, #4]
 8003fc4:	4613      	mov	r3, r2
 8003fc6:	005b      	lsls	r3, r3, #1
 8003fc8:	4413      	add	r3, r2
 8003fca:	005b      	lsls	r3, r3, #1
 8003fcc:	461a      	mov	r2, r3
 8003fce:	231f      	movs	r3, #31
 8003fd0:	4093      	lsls	r3, r2
 8003fd2:	43db      	mvns	r3, r3
 8003fd4:	4019      	ands	r1, r3
 8003fd6:	683b      	ldr	r3, [r7, #0]
 8003fd8:	6818      	ldr	r0, [r3, #0]
 8003fda:	683b      	ldr	r3, [r7, #0]
 8003fdc:	685a      	ldr	r2, [r3, #4]
 8003fde:	4613      	mov	r3, r2
 8003fe0:	005b      	lsls	r3, r3, #1
 8003fe2:	4413      	add	r3, r2
 8003fe4:	005b      	lsls	r3, r3, #1
 8003fe6:	fa00 f203 	lsl.w	r2, r0, r3
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	430a      	orrs	r2, r1
 8003ff0:	631a      	str	r2, [r3, #48]	; 0x30
 8003ff2:	e063      	b.n	80040bc <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8003ff4:	683b      	ldr	r3, [r7, #0]
 8003ff6:	685b      	ldr	r3, [r3, #4]
 8003ff8:	2b09      	cmp	r3, #9
 8003ffa:	d81e      	bhi.n	800403a <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004002:	683b      	ldr	r3, [r7, #0]
 8004004:	685a      	ldr	r2, [r3, #4]
 8004006:	4613      	mov	r3, r2
 8004008:	005b      	lsls	r3, r3, #1
 800400a:	4413      	add	r3, r2
 800400c:	005b      	lsls	r3, r3, #1
 800400e:	3b1e      	subs	r3, #30
 8004010:	221f      	movs	r2, #31
 8004012:	fa02 f303 	lsl.w	r3, r2, r3
 8004016:	43db      	mvns	r3, r3
 8004018:	4019      	ands	r1, r3
 800401a:	683b      	ldr	r3, [r7, #0]
 800401c:	6818      	ldr	r0, [r3, #0]
 800401e:	683b      	ldr	r3, [r7, #0]
 8004020:	685a      	ldr	r2, [r3, #4]
 8004022:	4613      	mov	r3, r2
 8004024:	005b      	lsls	r3, r3, #1
 8004026:	4413      	add	r3, r2
 8004028:	005b      	lsls	r3, r3, #1
 800402a:	3b1e      	subs	r3, #30
 800402c:	fa00 f203 	lsl.w	r2, r0, r3
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	430a      	orrs	r2, r1
 8004036:	635a      	str	r2, [r3, #52]	; 0x34
 8004038:	e040      	b.n	80040bc <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 800403a:	683b      	ldr	r3, [r7, #0]
 800403c:	685b      	ldr	r3, [r3, #4]
 800403e:	2b0e      	cmp	r3, #14
 8004040:	d81e      	bhi.n	8004080 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8004048:	683b      	ldr	r3, [r7, #0]
 800404a:	685a      	ldr	r2, [r3, #4]
 800404c:	4613      	mov	r3, r2
 800404e:	005b      	lsls	r3, r3, #1
 8004050:	4413      	add	r3, r2
 8004052:	005b      	lsls	r3, r3, #1
 8004054:	3b3c      	subs	r3, #60	; 0x3c
 8004056:	221f      	movs	r2, #31
 8004058:	fa02 f303 	lsl.w	r3, r2, r3
 800405c:	43db      	mvns	r3, r3
 800405e:	4019      	ands	r1, r3
 8004060:	683b      	ldr	r3, [r7, #0]
 8004062:	6818      	ldr	r0, [r3, #0]
 8004064:	683b      	ldr	r3, [r7, #0]
 8004066:	685a      	ldr	r2, [r3, #4]
 8004068:	4613      	mov	r3, r2
 800406a:	005b      	lsls	r3, r3, #1
 800406c:	4413      	add	r3, r2
 800406e:	005b      	lsls	r3, r3, #1
 8004070:	3b3c      	subs	r3, #60	; 0x3c
 8004072:	fa00 f203 	lsl.w	r2, r0, r3
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	430a      	orrs	r2, r1
 800407c:	639a      	str	r2, [r3, #56]	; 0x38
 800407e:	e01d      	b.n	80040bc <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8004086:	683b      	ldr	r3, [r7, #0]
 8004088:	685a      	ldr	r2, [r3, #4]
 800408a:	4613      	mov	r3, r2
 800408c:	005b      	lsls	r3, r3, #1
 800408e:	4413      	add	r3, r2
 8004090:	005b      	lsls	r3, r3, #1
 8004092:	3b5a      	subs	r3, #90	; 0x5a
 8004094:	221f      	movs	r2, #31
 8004096:	fa02 f303 	lsl.w	r3, r2, r3
 800409a:	43db      	mvns	r3, r3
 800409c:	4019      	ands	r1, r3
 800409e:	683b      	ldr	r3, [r7, #0]
 80040a0:	6818      	ldr	r0, [r3, #0]
 80040a2:	683b      	ldr	r3, [r7, #0]
 80040a4:	685a      	ldr	r2, [r3, #4]
 80040a6:	4613      	mov	r3, r2
 80040a8:	005b      	lsls	r3, r3, #1
 80040aa:	4413      	add	r3, r2
 80040ac:	005b      	lsls	r3, r3, #1
 80040ae:	3b5a      	subs	r3, #90	; 0x5a
 80040b0:	fa00 f203 	lsl.w	r2, r0, r3
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	430a      	orrs	r2, r1
 80040ba:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	689b      	ldr	r3, [r3, #8]
 80040c2:	f003 030c 	and.w	r3, r3, #12
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	f040 80e5 	bne.w	8004296 <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 80040cc:	683b      	ldr	r3, [r7, #0]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	2b09      	cmp	r3, #9
 80040d2:	d91c      	bls.n	800410e <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	6999      	ldr	r1, [r3, #24]
 80040da:	683b      	ldr	r3, [r7, #0]
 80040dc:	681a      	ldr	r2, [r3, #0]
 80040de:	4613      	mov	r3, r2
 80040e0:	005b      	lsls	r3, r3, #1
 80040e2:	4413      	add	r3, r2
 80040e4:	3b1e      	subs	r3, #30
 80040e6:	2207      	movs	r2, #7
 80040e8:	fa02 f303 	lsl.w	r3, r2, r3
 80040ec:	43db      	mvns	r3, r3
 80040ee:	4019      	ands	r1, r3
 80040f0:	683b      	ldr	r3, [r7, #0]
 80040f2:	6898      	ldr	r0, [r3, #8]
 80040f4:	683b      	ldr	r3, [r7, #0]
 80040f6:	681a      	ldr	r2, [r3, #0]
 80040f8:	4613      	mov	r3, r2
 80040fa:	005b      	lsls	r3, r3, #1
 80040fc:	4413      	add	r3, r2
 80040fe:	3b1e      	subs	r3, #30
 8004100:	fa00 f203 	lsl.w	r2, r0, r3
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	430a      	orrs	r2, r1
 800410a:	619a      	str	r2, [r3, #24]
 800410c:	e019      	b.n	8004142 <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	6959      	ldr	r1, [r3, #20]
 8004114:	683b      	ldr	r3, [r7, #0]
 8004116:	681a      	ldr	r2, [r3, #0]
 8004118:	4613      	mov	r3, r2
 800411a:	005b      	lsls	r3, r3, #1
 800411c:	4413      	add	r3, r2
 800411e:	2207      	movs	r2, #7
 8004120:	fa02 f303 	lsl.w	r3, r2, r3
 8004124:	43db      	mvns	r3, r3
 8004126:	4019      	ands	r1, r3
 8004128:	683b      	ldr	r3, [r7, #0]
 800412a:	6898      	ldr	r0, [r3, #8]
 800412c:	683b      	ldr	r3, [r7, #0]
 800412e:	681a      	ldr	r2, [r3, #0]
 8004130:	4613      	mov	r3, r2
 8004132:	005b      	lsls	r3, r3, #1
 8004134:	4413      	add	r3, r2
 8004136:	fa00 f203 	lsl.w	r2, r0, r3
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	430a      	orrs	r2, r1
 8004140:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8004142:	683b      	ldr	r3, [r7, #0]
 8004144:	695a      	ldr	r2, [r3, #20]
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	68db      	ldr	r3, [r3, #12]
 800414c:	08db      	lsrs	r3, r3, #3
 800414e:	f003 0303 	and.w	r3, r3, #3
 8004152:	005b      	lsls	r3, r3, #1
 8004154:	fa02 f303 	lsl.w	r3, r2, r3
 8004158:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 800415a:	683b      	ldr	r3, [r7, #0]
 800415c:	691b      	ldr	r3, [r3, #16]
 800415e:	3b01      	subs	r3, #1
 8004160:	2b03      	cmp	r3, #3
 8004162:	d84f      	bhi.n	8004204 <HAL_ADC_ConfigChannel+0x28c>
 8004164:	a201      	add	r2, pc, #4	; (adr r2, 800416c <HAL_ADC_ConfigChannel+0x1f4>)
 8004166:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800416a:	bf00      	nop
 800416c:	0800417d 	.word	0x0800417d
 8004170:	0800419f 	.word	0x0800419f
 8004174:	080041c1 	.word	0x080041c1
 8004178:	080041e3 	.word	0x080041e3
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004182:	4b9a      	ldr	r3, [pc, #616]	; (80043ec <HAL_ADC_ConfigChannel+0x474>)
 8004184:	4013      	ands	r3, r2
 8004186:	683a      	ldr	r2, [r7, #0]
 8004188:	6812      	ldr	r2, [r2, #0]
 800418a:	0691      	lsls	r1, r2, #26
 800418c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800418e:	430a      	orrs	r2, r1
 8004190:	431a      	orrs	r2, r3
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800419a:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 800419c:	e07e      	b.n	800429c <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80041a4:	4b91      	ldr	r3, [pc, #580]	; (80043ec <HAL_ADC_ConfigChannel+0x474>)
 80041a6:	4013      	ands	r3, r2
 80041a8:	683a      	ldr	r2, [r7, #0]
 80041aa:	6812      	ldr	r2, [r2, #0]
 80041ac:	0691      	lsls	r1, r2, #26
 80041ae:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80041b0:	430a      	orrs	r2, r1
 80041b2:	431a      	orrs	r2, r3
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80041bc:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80041be:	e06d      	b.n	800429c <HAL_ADC_ConfigChannel+0x324>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80041c6:	4b89      	ldr	r3, [pc, #548]	; (80043ec <HAL_ADC_ConfigChannel+0x474>)
 80041c8:	4013      	ands	r3, r2
 80041ca:	683a      	ldr	r2, [r7, #0]
 80041cc:	6812      	ldr	r2, [r2, #0]
 80041ce:	0691      	lsls	r1, r2, #26
 80041d0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80041d2:	430a      	orrs	r2, r1
 80041d4:	431a      	orrs	r2, r3
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80041de:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80041e0:	e05c      	b.n	800429c <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80041e8:	4b80      	ldr	r3, [pc, #512]	; (80043ec <HAL_ADC_ConfigChannel+0x474>)
 80041ea:	4013      	ands	r3, r2
 80041ec:	683a      	ldr	r2, [r7, #0]
 80041ee:	6812      	ldr	r2, [r2, #0]
 80041f0:	0691      	lsls	r1, r2, #26
 80041f2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80041f4:	430a      	orrs	r2, r1
 80041f6:	431a      	orrs	r2, r3
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8004200:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8004202:	e04b      	b.n	800429c <HAL_ADC_ConfigChannel+0x324>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800420a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800420e:	683b      	ldr	r3, [r7, #0]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	069b      	lsls	r3, r3, #26
 8004214:	429a      	cmp	r2, r3
 8004216:	d107      	bne.n	8004228 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004226:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800422e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004232:	683b      	ldr	r3, [r7, #0]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	069b      	lsls	r3, r3, #26
 8004238:	429a      	cmp	r2, r3
 800423a:	d107      	bne.n	800424c <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800424a:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004252:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004256:	683b      	ldr	r3, [r7, #0]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	069b      	lsls	r3, r3, #26
 800425c:	429a      	cmp	r2, r3
 800425e:	d107      	bne.n	8004270 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800426e:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004276:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800427a:	683b      	ldr	r3, [r7, #0]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	069b      	lsls	r3, r3, #26
 8004280:	429a      	cmp	r2, r3
 8004282:	d10a      	bne.n	800429a <HAL_ADC_ConfigChannel+0x322>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004292:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 8004294:	e001      	b.n	800429a <HAL_ADC_ConfigChannel+0x322>
    }

  }
 8004296:	bf00      	nop
 8004298:	e000      	b.n	800429c <HAL_ADC_ConfigChannel+0x324>
      break;
 800429a:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	689b      	ldr	r3, [r3, #8]
 80042a2:	f003 0303 	and.w	r3, r3, #3
 80042a6:	2b01      	cmp	r3, #1
 80042a8:	d108      	bne.n	80042bc <HAL_ADC_ConfigChannel+0x344>
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	f003 0301 	and.w	r3, r3, #1
 80042b4:	2b01      	cmp	r3, #1
 80042b6:	d101      	bne.n	80042bc <HAL_ADC_ConfigChannel+0x344>
 80042b8:	2301      	movs	r3, #1
 80042ba:	e000      	b.n	80042be <HAL_ADC_ConfigChannel+0x346>
 80042bc:	2300      	movs	r3, #0
 80042be:	2b00      	cmp	r3, #0
 80042c0:	f040 8130 	bne.w	8004524 <HAL_ADC_ConfigChannel+0x5ac>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80042c4:	683b      	ldr	r3, [r7, #0]
 80042c6:	68db      	ldr	r3, [r3, #12]
 80042c8:	2b01      	cmp	r3, #1
 80042ca:	d00f      	beq.n	80042ec <HAL_ADC_ConfigChannel+0x374>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 80042d4:	683b      	ldr	r3, [r7, #0]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	2201      	movs	r2, #1
 80042da:	fa02 f303 	lsl.w	r3, r2, r3
 80042de:	43da      	mvns	r2, r3
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	400a      	ands	r2, r1
 80042e6:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 80042ea:	e049      	b.n	8004380 <HAL_ADC_ConfigChannel+0x408>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 80042f4:	683b      	ldr	r3, [r7, #0]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	2201      	movs	r2, #1
 80042fa:	409a      	lsls	r2, r3
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	430a      	orrs	r2, r1
 8004302:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8004306:	683b      	ldr	r3, [r7, #0]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	2b09      	cmp	r3, #9
 800430c:	d91c      	bls.n	8004348 <HAL_ADC_ConfigChannel+0x3d0>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	6999      	ldr	r1, [r3, #24]
 8004314:	683b      	ldr	r3, [r7, #0]
 8004316:	681a      	ldr	r2, [r3, #0]
 8004318:	4613      	mov	r3, r2
 800431a:	005b      	lsls	r3, r3, #1
 800431c:	4413      	add	r3, r2
 800431e:	3b1b      	subs	r3, #27
 8004320:	2207      	movs	r2, #7
 8004322:	fa02 f303 	lsl.w	r3, r2, r3
 8004326:	43db      	mvns	r3, r3
 8004328:	4019      	ands	r1, r3
 800432a:	683b      	ldr	r3, [r7, #0]
 800432c:	6898      	ldr	r0, [r3, #8]
 800432e:	683b      	ldr	r3, [r7, #0]
 8004330:	681a      	ldr	r2, [r3, #0]
 8004332:	4613      	mov	r3, r2
 8004334:	005b      	lsls	r3, r3, #1
 8004336:	4413      	add	r3, r2
 8004338:	3b1b      	subs	r3, #27
 800433a:	fa00 f203 	lsl.w	r2, r0, r3
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	430a      	orrs	r2, r1
 8004344:	619a      	str	r2, [r3, #24]
 8004346:	e01b      	b.n	8004380 <HAL_ADC_ConfigChannel+0x408>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	6959      	ldr	r1, [r3, #20]
 800434e:	683b      	ldr	r3, [r7, #0]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	1c5a      	adds	r2, r3, #1
 8004354:	4613      	mov	r3, r2
 8004356:	005b      	lsls	r3, r3, #1
 8004358:	4413      	add	r3, r2
 800435a:	2207      	movs	r2, #7
 800435c:	fa02 f303 	lsl.w	r3, r2, r3
 8004360:	43db      	mvns	r3, r3
 8004362:	4019      	ands	r1, r3
 8004364:	683b      	ldr	r3, [r7, #0]
 8004366:	6898      	ldr	r0, [r3, #8]
 8004368:	683b      	ldr	r3, [r7, #0]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	1c5a      	adds	r2, r3, #1
 800436e:	4613      	mov	r3, r2
 8004370:	005b      	lsls	r3, r3, #1
 8004372:	4413      	add	r3, r2
 8004374:	fa00 f203 	lsl.w	r2, r0, r3
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	430a      	orrs	r2, r1
 800437e:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004388:	d004      	beq.n	8004394 <HAL_ADC_ConfigChannel+0x41c>
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	4a18      	ldr	r2, [pc, #96]	; (80043f0 <HAL_ADC_ConfigChannel+0x478>)
 8004390:	4293      	cmp	r3, r2
 8004392:	d101      	bne.n	8004398 <HAL_ADC_ConfigChannel+0x420>
 8004394:	4b17      	ldr	r3, [pc, #92]	; (80043f4 <HAL_ADC_ConfigChannel+0x47c>)
 8004396:	e000      	b.n	800439a <HAL_ADC_ConfigChannel+0x422>
 8004398:	4b17      	ldr	r3, [pc, #92]	; (80043f8 <HAL_ADC_ConfigChannel+0x480>)
 800439a:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800439c:	683b      	ldr	r3, [r7, #0]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	2b10      	cmp	r3, #16
 80043a2:	d105      	bne.n	80043b0 <HAL_ADC_ConfigChannel+0x438>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 80043a4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80043a6:	689b      	ldr	r3, [r3, #8]
 80043a8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d015      	beq.n	80043dc <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 80043b0:	683b      	ldr	r3, [r7, #0]
 80043b2:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 80043b4:	2b11      	cmp	r3, #17
 80043b6:	d105      	bne.n	80043c4 <HAL_ADC_ConfigChannel+0x44c>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 80043b8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80043ba:	689b      	ldr	r3, [r3, #8]
 80043bc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d00b      	beq.n	80043dc <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 80043c4:	683b      	ldr	r3, [r7, #0]
 80043c6:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 80043c8:	2b12      	cmp	r3, #18
 80043ca:	f040 80ab 	bne.w	8004524 <HAL_ADC_ConfigChannel+0x5ac>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 80043ce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80043d0:	689b      	ldr	r3, [r3, #8]
 80043d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	f040 80a4 	bne.w	8004524 <HAL_ADC_ConfigChannel+0x5ac>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80043e4:	d10a      	bne.n	80043fc <HAL_ADC_ConfigChannel+0x484>
 80043e6:	4b02      	ldr	r3, [pc, #8]	; (80043f0 <HAL_ADC_ConfigChannel+0x478>)
 80043e8:	60fb      	str	r3, [r7, #12]
 80043ea:	e022      	b.n	8004432 <HAL_ADC_ConfigChannel+0x4ba>
 80043ec:	83fff000 	.word	0x83fff000
 80043f0:	50000100 	.word	0x50000100
 80043f4:	50000300 	.word	0x50000300
 80043f8:	50000700 	.word	0x50000700
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	4a4e      	ldr	r2, [pc, #312]	; (800453c <HAL_ADC_ConfigChannel+0x5c4>)
 8004402:	4293      	cmp	r3, r2
 8004404:	d103      	bne.n	800440e <HAL_ADC_ConfigChannel+0x496>
 8004406:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800440a:	60fb      	str	r3, [r7, #12]
 800440c:	e011      	b.n	8004432 <HAL_ADC_ConfigChannel+0x4ba>
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	4a4b      	ldr	r2, [pc, #300]	; (8004540 <HAL_ADC_ConfigChannel+0x5c8>)
 8004414:	4293      	cmp	r3, r2
 8004416:	d102      	bne.n	800441e <HAL_ADC_ConfigChannel+0x4a6>
 8004418:	4b4a      	ldr	r3, [pc, #296]	; (8004544 <HAL_ADC_ConfigChannel+0x5cc>)
 800441a:	60fb      	str	r3, [r7, #12]
 800441c:	e009      	b.n	8004432 <HAL_ADC_ConfigChannel+0x4ba>
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	4a48      	ldr	r2, [pc, #288]	; (8004544 <HAL_ADC_ConfigChannel+0x5cc>)
 8004424:	4293      	cmp	r3, r2
 8004426:	d102      	bne.n	800442e <HAL_ADC_ConfigChannel+0x4b6>
 8004428:	4b45      	ldr	r3, [pc, #276]	; (8004540 <HAL_ADC_ConfigChannel+0x5c8>)
 800442a:	60fb      	str	r3, [r7, #12]
 800442c:	e001      	b.n	8004432 <HAL_ADC_ConfigChannel+0x4ba>
 800442e:	2300      	movs	r3, #0
 8004430:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	689b      	ldr	r3, [r3, #8]
 8004438:	f003 0303 	and.w	r3, r3, #3
 800443c:	2b01      	cmp	r3, #1
 800443e:	d108      	bne.n	8004452 <HAL_ADC_ConfigChannel+0x4da>
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	f003 0301 	and.w	r3, r3, #1
 800444a:	2b01      	cmp	r3, #1
 800444c:	d101      	bne.n	8004452 <HAL_ADC_ConfigChannel+0x4da>
 800444e:	2301      	movs	r3, #1
 8004450:	e000      	b.n	8004454 <HAL_ADC_ConfigChannel+0x4dc>
 8004452:	2300      	movs	r3, #0
 8004454:	2b00      	cmp	r3, #0
 8004456:	d150      	bne.n	80044fa <HAL_ADC_ConfigChannel+0x582>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8004458:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 800445a:	2b00      	cmp	r3, #0
 800445c:	d010      	beq.n	8004480 <HAL_ADC_ConfigChannel+0x508>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	689b      	ldr	r3, [r3, #8]
 8004462:	f003 0303 	and.w	r3, r3, #3
 8004466:	2b01      	cmp	r3, #1
 8004468:	d107      	bne.n	800447a <HAL_ADC_ConfigChannel+0x502>
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	f003 0301 	and.w	r3, r3, #1
 8004472:	2b01      	cmp	r3, #1
 8004474:	d101      	bne.n	800447a <HAL_ADC_ConfigChannel+0x502>
 8004476:	2301      	movs	r3, #1
 8004478:	e000      	b.n	800447c <HAL_ADC_ConfigChannel+0x504>
 800447a:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 800447c:	2b00      	cmp	r3, #0
 800447e:	d13c      	bne.n	80044fa <HAL_ADC_ConfigChannel+0x582>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8004480:	683b      	ldr	r3, [r7, #0]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	2b10      	cmp	r3, #16
 8004486:	d11d      	bne.n	80044c4 <HAL_ADC_ConfigChannel+0x54c>
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004490:	d118      	bne.n	80044c4 <HAL_ADC_ConfigChannel+0x54c>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8004492:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004494:	689b      	ldr	r3, [r3, #8]
 8004496:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800449a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800449c:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800449e:	4b2a      	ldr	r3, [pc, #168]	; (8004548 <HAL_ADC_ConfigChannel+0x5d0>)
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	4a2a      	ldr	r2, [pc, #168]	; (800454c <HAL_ADC_ConfigChannel+0x5d4>)
 80044a4:	fba2 2303 	umull	r2, r3, r2, r3
 80044a8:	0c9a      	lsrs	r2, r3, #18
 80044aa:	4613      	mov	r3, r2
 80044ac:	009b      	lsls	r3, r3, #2
 80044ae:	4413      	add	r3, r2
 80044b0:	005b      	lsls	r3, r3, #1
 80044b2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80044b4:	e002      	b.n	80044bc <HAL_ADC_ConfigChannel+0x544>
          {
            wait_loop_index--;
 80044b6:	68bb      	ldr	r3, [r7, #8]
 80044b8:	3b01      	subs	r3, #1
 80044ba:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80044bc:	68bb      	ldr	r3, [r7, #8]
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d1f9      	bne.n	80044b6 <HAL_ADC_ConfigChannel+0x53e>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80044c2:	e02e      	b.n	8004522 <HAL_ADC_ConfigChannel+0x5aa>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 80044c4:	683b      	ldr	r3, [r7, #0]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	2b11      	cmp	r3, #17
 80044ca:	d10b      	bne.n	80044e4 <HAL_ADC_ConfigChannel+0x56c>
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80044d4:	d106      	bne.n	80044e4 <HAL_ADC_ConfigChannel+0x56c>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 80044d6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80044d8:	689b      	ldr	r3, [r3, #8]
 80044da:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 80044de:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80044e0:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80044e2:	e01e      	b.n	8004522 <HAL_ADC_ConfigChannel+0x5aa>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 80044e4:	683b      	ldr	r3, [r7, #0]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	2b12      	cmp	r3, #18
 80044ea:	d11a      	bne.n	8004522 <HAL_ADC_ConfigChannel+0x5aa>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 80044ec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80044ee:	689b      	ldr	r3, [r3, #8]
 80044f0:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80044f4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80044f6:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80044f8:	e013      	b.n	8004522 <HAL_ADC_ConfigChannel+0x5aa>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044fe:	f043 0220 	orr.w	r2, r3, #32
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 8004506:	2301      	movs	r3, #1
 8004508:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800450c:	e00a      	b.n	8004524 <HAL_ADC_ConfigChannel+0x5ac>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004512:	f043 0220 	orr.w	r2, r3, #32
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 800451a:	2301      	movs	r3, #1
 800451c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8004520:	e000      	b.n	8004524 <HAL_ADC_ConfigChannel+0x5ac>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8004522:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	2200      	movs	r2, #0
 8004528:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 800452c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8004530:	4618      	mov	r0, r3
 8004532:	376c      	adds	r7, #108	; 0x6c
 8004534:	46bd      	mov	sp, r7
 8004536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800453a:	4770      	bx	lr
 800453c:	50000100 	.word	0x50000100
 8004540:	50000400 	.word	0x50000400
 8004544:	50000500 	.word	0x50000500
 8004548:	2000006c 	.word	0x2000006c
 800454c:	431bde83 	.word	0x431bde83

08004550 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 8004550:	b480      	push	{r7}
 8004552:	b099      	sub	sp, #100	; 0x64
 8004554:	af00      	add	r7, sp, #0
 8004556:	6078      	str	r0, [r7, #4]
 8004558:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800455a:	2300      	movs	r3, #0
 800455c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004568:	d102      	bne.n	8004570 <HAL_ADCEx_MultiModeConfigChannel+0x20>
 800456a:	4b6d      	ldr	r3, [pc, #436]	; (8004720 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 800456c:	60bb      	str	r3, [r7, #8]
 800456e:	e01a      	b.n	80045a6 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	4a6a      	ldr	r2, [pc, #424]	; (8004720 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8004576:	4293      	cmp	r3, r2
 8004578:	d103      	bne.n	8004582 <HAL_ADCEx_MultiModeConfigChannel+0x32>
 800457a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800457e:	60bb      	str	r3, [r7, #8]
 8004580:	e011      	b.n	80045a6 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	4a67      	ldr	r2, [pc, #412]	; (8004724 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 8004588:	4293      	cmp	r3, r2
 800458a:	d102      	bne.n	8004592 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 800458c:	4b66      	ldr	r3, [pc, #408]	; (8004728 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 800458e:	60bb      	str	r3, [r7, #8]
 8004590:	e009      	b.n	80045a6 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	4a64      	ldr	r2, [pc, #400]	; (8004728 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 8004598:	4293      	cmp	r3, r2
 800459a:	d102      	bne.n	80045a2 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 800459c:	4b61      	ldr	r3, [pc, #388]	; (8004724 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 800459e:	60bb      	str	r3, [r7, #8]
 80045a0:	e001      	b.n	80045a6 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 80045a2:	2300      	movs	r3, #0
 80045a4:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 80045a6:	68bb      	ldr	r3, [r7, #8]
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d101      	bne.n	80045b0 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Return function status */
    return HAL_ERROR;
 80045ac:	2301      	movs	r3, #1
 80045ae:	e0b0      	b.n	8004712 <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80045b6:	2b01      	cmp	r3, #1
 80045b8:	d101      	bne.n	80045be <HAL_ADCEx_MultiModeConfigChannel+0x6e>
 80045ba:	2302      	movs	r3, #2
 80045bc:	e0a9      	b.n	8004712 <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	2201      	movs	r2, #1
 80045c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	689b      	ldr	r3, [r3, #8]
 80045cc:	f003 0304 	and.w	r3, r3, #4
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	f040 808d 	bne.w	80046f0 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 80045d6:	68bb      	ldr	r3, [r7, #8]
 80045d8:	689b      	ldr	r3, [r3, #8]
 80045da:	f003 0304 	and.w	r3, r3, #4
 80045de:	2b00      	cmp	r3, #0
 80045e0:	f040 8086 	bne.w	80046f0 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80045ec:	d004      	beq.n	80045f8 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	4a4b      	ldr	r2, [pc, #300]	; (8004720 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 80045f4:	4293      	cmp	r3, r2
 80045f6:	d101      	bne.n	80045fc <HAL_ADCEx_MultiModeConfigChannel+0xac>
 80045f8:	4b4c      	ldr	r3, [pc, #304]	; (800472c <HAL_ADCEx_MultiModeConfigChannel+0x1dc>)
 80045fa:	e000      	b.n	80045fe <HAL_ADCEx_MultiModeConfigChannel+0xae>
 80045fc:	4b4c      	ldr	r3, [pc, #304]	; (8004730 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>)
 80045fe:	65bb      	str	r3, [r7, #88]	; 0x58
    
    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8004600:	683b      	ldr	r3, [r7, #0]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	2b00      	cmp	r3, #0
 8004606:	d040      	beq.n	800468a <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 8004608:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800460a:	689b      	ldr	r3, [r3, #8]
 800460c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004610:	683b      	ldr	r3, [r7, #0]
 8004612:	6859      	ldr	r1, [r3, #4]
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800461a:	035b      	lsls	r3, r3, #13
 800461c:	430b      	orrs	r3, r1
 800461e:	431a      	orrs	r2, r3
 8004620:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004622:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	689b      	ldr	r3, [r3, #8]
 800462a:	f003 0303 	and.w	r3, r3, #3
 800462e:	2b01      	cmp	r3, #1
 8004630:	d108      	bne.n	8004644 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	f003 0301 	and.w	r3, r3, #1
 800463c:	2b01      	cmp	r3, #1
 800463e:	d101      	bne.n	8004644 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 8004640:	2301      	movs	r3, #1
 8004642:	e000      	b.n	8004646 <HAL_ADCEx_MultiModeConfigChannel+0xf6>
 8004644:	2300      	movs	r3, #0
 8004646:	2b00      	cmp	r3, #0
 8004648:	d15c      	bne.n	8004704 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 800464a:	68bb      	ldr	r3, [r7, #8]
 800464c:	689b      	ldr	r3, [r3, #8]
 800464e:	f003 0303 	and.w	r3, r3, #3
 8004652:	2b01      	cmp	r3, #1
 8004654:	d107      	bne.n	8004666 <HAL_ADCEx_MultiModeConfigChannel+0x116>
 8004656:	68bb      	ldr	r3, [r7, #8]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	f003 0301 	and.w	r3, r3, #1
 800465e:	2b01      	cmp	r3, #1
 8004660:	d101      	bne.n	8004666 <HAL_ADCEx_MultiModeConfigChannel+0x116>
 8004662:	2301      	movs	r3, #1
 8004664:	e000      	b.n	8004668 <HAL_ADCEx_MultiModeConfigChannel+0x118>
 8004666:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8004668:	2b00      	cmp	r3, #0
 800466a:	d14b      	bne.n	8004704 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 800466c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800466e:	689b      	ldr	r3, [r3, #8]
 8004670:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8004674:	f023 030f 	bic.w	r3, r3, #15
 8004678:	683a      	ldr	r2, [r7, #0]
 800467a:	6811      	ldr	r1, [r2, #0]
 800467c:	683a      	ldr	r2, [r7, #0]
 800467e:	6892      	ldr	r2, [r2, #8]
 8004680:	430a      	orrs	r2, r1
 8004682:	431a      	orrs	r2, r3
 8004684:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004686:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8004688:	e03c      	b.n	8004704 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 800468a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800468c:	689b      	ldr	r3, [r3, #8]
 800468e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004692:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004694:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	689b      	ldr	r3, [r3, #8]
 800469c:	f003 0303 	and.w	r3, r3, #3
 80046a0:	2b01      	cmp	r3, #1
 80046a2:	d108      	bne.n	80046b6 <HAL_ADCEx_MultiModeConfigChannel+0x166>
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	f003 0301 	and.w	r3, r3, #1
 80046ae:	2b01      	cmp	r3, #1
 80046b0:	d101      	bne.n	80046b6 <HAL_ADCEx_MultiModeConfigChannel+0x166>
 80046b2:	2301      	movs	r3, #1
 80046b4:	e000      	b.n	80046b8 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 80046b6:	2300      	movs	r3, #0
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d123      	bne.n	8004704 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 80046bc:	68bb      	ldr	r3, [r7, #8]
 80046be:	689b      	ldr	r3, [r3, #8]
 80046c0:	f003 0303 	and.w	r3, r3, #3
 80046c4:	2b01      	cmp	r3, #1
 80046c6:	d107      	bne.n	80046d8 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 80046c8:	68bb      	ldr	r3, [r7, #8]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	f003 0301 	and.w	r3, r3, #1
 80046d0:	2b01      	cmp	r3, #1
 80046d2:	d101      	bne.n	80046d8 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 80046d4:	2301      	movs	r3, #1
 80046d6:	e000      	b.n	80046da <HAL_ADCEx_MultiModeConfigChannel+0x18a>
 80046d8:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d112      	bne.n	8004704 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 80046de:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80046e0:	689b      	ldr	r3, [r3, #8]
 80046e2:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80046e6:	f023 030f 	bic.w	r3, r3, #15
 80046ea:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80046ec:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80046ee:	e009      	b.n	8004704 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046f4:	f043 0220 	orr.w	r2, r3, #32
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 80046fc:	2301      	movs	r3, #1
 80046fe:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8004702:	e000      	b.n	8004706 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8004704:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	2200      	movs	r2, #0
 800470a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 800470e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
} 
 8004712:	4618      	mov	r0, r3
 8004714:	3764      	adds	r7, #100	; 0x64
 8004716:	46bd      	mov	sp, r7
 8004718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800471c:	4770      	bx	lr
 800471e:	bf00      	nop
 8004720:	50000100 	.word	0x50000100
 8004724:	50000400 	.word	0x50000400
 8004728:	50000500 	.word	0x50000500
 800472c:	50000300 	.word	0x50000300
 8004730:	50000700 	.word	0x50000700

08004734 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8004734:	b580      	push	{r7, lr}
 8004736:	b084      	sub	sp, #16
 8004738:	af00      	add	r7, sp, #0
 800473a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800473c:	2300      	movs	r3, #0
 800473e:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	689b      	ldr	r3, [r3, #8]
 8004746:	f003 0303 	and.w	r3, r3, #3
 800474a:	2b01      	cmp	r3, #1
 800474c:	d108      	bne.n	8004760 <ADC_Enable+0x2c>
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	f003 0301 	and.w	r3, r3, #1
 8004758:	2b01      	cmp	r3, #1
 800475a:	d101      	bne.n	8004760 <ADC_Enable+0x2c>
 800475c:	2301      	movs	r3, #1
 800475e:	e000      	b.n	8004762 <ADC_Enable+0x2e>
 8004760:	2300      	movs	r3, #0
 8004762:	2b00      	cmp	r3, #0
 8004764:	d143      	bne.n	80047ee <ADC_Enable+0xba>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	689a      	ldr	r2, [r3, #8]
 800476c:	4b22      	ldr	r3, [pc, #136]	; (80047f8 <ADC_Enable+0xc4>)
 800476e:	4013      	ands	r3, r2
 8004770:	2b00      	cmp	r3, #0
 8004772:	d00d      	beq.n	8004790 <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004778:	f043 0210 	orr.w	r2, r3, #16
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004784:	f043 0201 	orr.w	r2, r3, #1
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	645a      	str	r2, [r3, #68]	; 0x44
      
      return HAL_ERROR;
 800478c:	2301      	movs	r3, #1
 800478e:	e02f      	b.n	80047f0 <ADC_Enable+0xbc>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	689a      	ldr	r2, [r3, #8]
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	f042 0201 	orr.w	r2, r2, #1
 800479e:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 80047a0:	f7fe fd8e 	bl	80032c0 <HAL_GetTick>
 80047a4:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80047a6:	e01b      	b.n	80047e0 <ADC_Enable+0xac>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80047a8:	f7fe fd8a 	bl	80032c0 <HAL_GetTick>
 80047ac:	4602      	mov	r2, r0
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	1ad3      	subs	r3, r2, r3
 80047b2:	2b02      	cmp	r3, #2
 80047b4:	d914      	bls.n	80047e0 <ADC_Enable+0xac>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	f003 0301 	and.w	r3, r3, #1
 80047c0:	2b01      	cmp	r3, #1
 80047c2:	d00d      	beq.n	80047e0 <ADC_Enable+0xac>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047c8:	f043 0210 	orr.w	r2, r3, #16
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047d4:	f043 0201 	orr.w	r2, r3, #1
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 80047dc:	2301      	movs	r3, #1
 80047de:	e007      	b.n	80047f0 <ADC_Enable+0xbc>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	f003 0301 	and.w	r3, r3, #1
 80047ea:	2b01      	cmp	r3, #1
 80047ec:	d1dc      	bne.n	80047a8 <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80047ee:	2300      	movs	r3, #0
}
 80047f0:	4618      	mov	r0, r3
 80047f2:	3710      	adds	r7, #16
 80047f4:	46bd      	mov	sp, r7
 80047f6:	bd80      	pop	{r7, pc}
 80047f8:	8000003f 	.word	0x8000003f

080047fc <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 80047fc:	b580      	push	{r7, lr}
 80047fe:	b084      	sub	sp, #16
 8004800:	af00      	add	r7, sp, #0
 8004802:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004804:	2300      	movs	r3, #0
 8004806:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	689b      	ldr	r3, [r3, #8]
 800480e:	f003 0303 	and.w	r3, r3, #3
 8004812:	2b01      	cmp	r3, #1
 8004814:	d108      	bne.n	8004828 <ADC_Disable+0x2c>
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	f003 0301 	and.w	r3, r3, #1
 8004820:	2b01      	cmp	r3, #1
 8004822:	d101      	bne.n	8004828 <ADC_Disable+0x2c>
 8004824:	2301      	movs	r3, #1
 8004826:	e000      	b.n	800482a <ADC_Disable+0x2e>
 8004828:	2300      	movs	r3, #0
 800482a:	2b00      	cmp	r3, #0
 800482c:	d047      	beq.n	80048be <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	689b      	ldr	r3, [r3, #8]
 8004834:	f003 030d 	and.w	r3, r3, #13
 8004838:	2b01      	cmp	r3, #1
 800483a:	d10f      	bne.n	800485c <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	689a      	ldr	r2, [r3, #8]
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	f042 0202 	orr.w	r2, r2, #2
 800484a:	609a      	str	r2, [r3, #8]
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	2203      	movs	r2, #3
 8004852:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8004854:	f7fe fd34 	bl	80032c0 <HAL_GetTick>
 8004858:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800485a:	e029      	b.n	80048b0 <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004860:	f043 0210 	orr.w	r2, r3, #16
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800486c:	f043 0201 	orr.w	r2, r3, #1
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 8004874:	2301      	movs	r3, #1
 8004876:	e023      	b.n	80048c0 <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8004878:	f7fe fd22 	bl	80032c0 <HAL_GetTick>
 800487c:	4602      	mov	r2, r0
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	1ad3      	subs	r3, r2, r3
 8004882:	2b02      	cmp	r3, #2
 8004884:	d914      	bls.n	80048b0 <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	689b      	ldr	r3, [r3, #8]
 800488c:	f003 0301 	and.w	r3, r3, #1
 8004890:	2b01      	cmp	r3, #1
 8004892:	d10d      	bne.n	80048b0 <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004898:	f043 0210 	orr.w	r2, r3, #16
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048a4:	f043 0201 	orr.w	r2, r3, #1
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 80048ac:	2301      	movs	r3, #1
 80048ae:	e007      	b.n	80048c0 <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	689b      	ldr	r3, [r3, #8]
 80048b6:	f003 0301 	and.w	r3, r3, #1
 80048ba:	2b01      	cmp	r3, #1
 80048bc:	d0dc      	beq.n	8004878 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80048be:	2300      	movs	r3, #0
}
 80048c0:	4618      	mov	r0, r3
 80048c2:	3710      	adds	r7, #16
 80048c4:	46bd      	mov	sp, r7
 80048c6:	bd80      	pop	{r7, pc}

080048c8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80048c8:	b480      	push	{r7}
 80048ca:	b085      	sub	sp, #20
 80048cc:	af00      	add	r7, sp, #0
 80048ce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	f003 0307 	and.w	r3, r3, #7
 80048d6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80048d8:	4b0c      	ldr	r3, [pc, #48]	; (800490c <__NVIC_SetPriorityGrouping+0x44>)
 80048da:	68db      	ldr	r3, [r3, #12]
 80048dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80048de:	68ba      	ldr	r2, [r7, #8]
 80048e0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80048e4:	4013      	ands	r3, r2
 80048e6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80048ec:	68bb      	ldr	r3, [r7, #8]
 80048ee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80048f0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80048f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80048f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80048fa:	4a04      	ldr	r2, [pc, #16]	; (800490c <__NVIC_SetPriorityGrouping+0x44>)
 80048fc:	68bb      	ldr	r3, [r7, #8]
 80048fe:	60d3      	str	r3, [r2, #12]
}
 8004900:	bf00      	nop
 8004902:	3714      	adds	r7, #20
 8004904:	46bd      	mov	sp, r7
 8004906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800490a:	4770      	bx	lr
 800490c:	e000ed00 	.word	0xe000ed00

08004910 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004910:	b480      	push	{r7}
 8004912:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004914:	4b04      	ldr	r3, [pc, #16]	; (8004928 <__NVIC_GetPriorityGrouping+0x18>)
 8004916:	68db      	ldr	r3, [r3, #12]
 8004918:	0a1b      	lsrs	r3, r3, #8
 800491a:	f003 0307 	and.w	r3, r3, #7
}
 800491e:	4618      	mov	r0, r3
 8004920:	46bd      	mov	sp, r7
 8004922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004926:	4770      	bx	lr
 8004928:	e000ed00 	.word	0xe000ed00

0800492c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800492c:	b480      	push	{r7}
 800492e:	b083      	sub	sp, #12
 8004930:	af00      	add	r7, sp, #0
 8004932:	4603      	mov	r3, r0
 8004934:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004936:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800493a:	2b00      	cmp	r3, #0
 800493c:	db0b      	blt.n	8004956 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800493e:	79fb      	ldrb	r3, [r7, #7]
 8004940:	f003 021f 	and.w	r2, r3, #31
 8004944:	4907      	ldr	r1, [pc, #28]	; (8004964 <__NVIC_EnableIRQ+0x38>)
 8004946:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800494a:	095b      	lsrs	r3, r3, #5
 800494c:	2001      	movs	r0, #1
 800494e:	fa00 f202 	lsl.w	r2, r0, r2
 8004952:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004956:	bf00      	nop
 8004958:	370c      	adds	r7, #12
 800495a:	46bd      	mov	sp, r7
 800495c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004960:	4770      	bx	lr
 8004962:	bf00      	nop
 8004964:	e000e100 	.word	0xe000e100

08004968 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004968:	b480      	push	{r7}
 800496a:	b083      	sub	sp, #12
 800496c:	af00      	add	r7, sp, #0
 800496e:	4603      	mov	r3, r0
 8004970:	6039      	str	r1, [r7, #0]
 8004972:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004974:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004978:	2b00      	cmp	r3, #0
 800497a:	db0a      	blt.n	8004992 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800497c:	683b      	ldr	r3, [r7, #0]
 800497e:	b2da      	uxtb	r2, r3
 8004980:	490c      	ldr	r1, [pc, #48]	; (80049b4 <__NVIC_SetPriority+0x4c>)
 8004982:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004986:	0112      	lsls	r2, r2, #4
 8004988:	b2d2      	uxtb	r2, r2
 800498a:	440b      	add	r3, r1
 800498c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004990:	e00a      	b.n	80049a8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004992:	683b      	ldr	r3, [r7, #0]
 8004994:	b2da      	uxtb	r2, r3
 8004996:	4908      	ldr	r1, [pc, #32]	; (80049b8 <__NVIC_SetPriority+0x50>)
 8004998:	79fb      	ldrb	r3, [r7, #7]
 800499a:	f003 030f 	and.w	r3, r3, #15
 800499e:	3b04      	subs	r3, #4
 80049a0:	0112      	lsls	r2, r2, #4
 80049a2:	b2d2      	uxtb	r2, r2
 80049a4:	440b      	add	r3, r1
 80049a6:	761a      	strb	r2, [r3, #24]
}
 80049a8:	bf00      	nop
 80049aa:	370c      	adds	r7, #12
 80049ac:	46bd      	mov	sp, r7
 80049ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b2:	4770      	bx	lr
 80049b4:	e000e100 	.word	0xe000e100
 80049b8:	e000ed00 	.word	0xe000ed00

080049bc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80049bc:	b480      	push	{r7}
 80049be:	b089      	sub	sp, #36	; 0x24
 80049c0:	af00      	add	r7, sp, #0
 80049c2:	60f8      	str	r0, [r7, #12]
 80049c4:	60b9      	str	r1, [r7, #8]
 80049c6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	f003 0307 	and.w	r3, r3, #7
 80049ce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80049d0:	69fb      	ldr	r3, [r7, #28]
 80049d2:	f1c3 0307 	rsb	r3, r3, #7
 80049d6:	2b04      	cmp	r3, #4
 80049d8:	bf28      	it	cs
 80049da:	2304      	movcs	r3, #4
 80049dc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80049de:	69fb      	ldr	r3, [r7, #28]
 80049e0:	3304      	adds	r3, #4
 80049e2:	2b06      	cmp	r3, #6
 80049e4:	d902      	bls.n	80049ec <NVIC_EncodePriority+0x30>
 80049e6:	69fb      	ldr	r3, [r7, #28]
 80049e8:	3b03      	subs	r3, #3
 80049ea:	e000      	b.n	80049ee <NVIC_EncodePriority+0x32>
 80049ec:	2300      	movs	r3, #0
 80049ee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80049f0:	f04f 32ff 	mov.w	r2, #4294967295
 80049f4:	69bb      	ldr	r3, [r7, #24]
 80049f6:	fa02 f303 	lsl.w	r3, r2, r3
 80049fa:	43da      	mvns	r2, r3
 80049fc:	68bb      	ldr	r3, [r7, #8]
 80049fe:	401a      	ands	r2, r3
 8004a00:	697b      	ldr	r3, [r7, #20]
 8004a02:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004a04:	f04f 31ff 	mov.w	r1, #4294967295
 8004a08:	697b      	ldr	r3, [r7, #20]
 8004a0a:	fa01 f303 	lsl.w	r3, r1, r3
 8004a0e:	43d9      	mvns	r1, r3
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004a14:	4313      	orrs	r3, r2
         );
}
 8004a16:	4618      	mov	r0, r3
 8004a18:	3724      	adds	r7, #36	; 0x24
 8004a1a:	46bd      	mov	sp, r7
 8004a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a20:	4770      	bx	lr
	...

08004a24 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004a24:	b580      	push	{r7, lr}
 8004a26:	b082      	sub	sp, #8
 8004a28:	af00      	add	r7, sp, #0
 8004a2a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	3b01      	subs	r3, #1
 8004a30:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004a34:	d301      	bcc.n	8004a3a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004a36:	2301      	movs	r3, #1
 8004a38:	e00f      	b.n	8004a5a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004a3a:	4a0a      	ldr	r2, [pc, #40]	; (8004a64 <SysTick_Config+0x40>)
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	3b01      	subs	r3, #1
 8004a40:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004a42:	210f      	movs	r1, #15
 8004a44:	f04f 30ff 	mov.w	r0, #4294967295
 8004a48:	f7ff ff8e 	bl	8004968 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004a4c:	4b05      	ldr	r3, [pc, #20]	; (8004a64 <SysTick_Config+0x40>)
 8004a4e:	2200      	movs	r2, #0
 8004a50:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004a52:	4b04      	ldr	r3, [pc, #16]	; (8004a64 <SysTick_Config+0x40>)
 8004a54:	2207      	movs	r2, #7
 8004a56:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004a58:	2300      	movs	r3, #0
}
 8004a5a:	4618      	mov	r0, r3
 8004a5c:	3708      	adds	r7, #8
 8004a5e:	46bd      	mov	sp, r7
 8004a60:	bd80      	pop	{r7, pc}
 8004a62:	bf00      	nop
 8004a64:	e000e010 	.word	0xe000e010

08004a68 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004a68:	b580      	push	{r7, lr}
 8004a6a:	b082      	sub	sp, #8
 8004a6c:	af00      	add	r7, sp, #0
 8004a6e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004a70:	6878      	ldr	r0, [r7, #4]
 8004a72:	f7ff ff29 	bl	80048c8 <__NVIC_SetPriorityGrouping>
}
 8004a76:	bf00      	nop
 8004a78:	3708      	adds	r7, #8
 8004a7a:	46bd      	mov	sp, r7
 8004a7c:	bd80      	pop	{r7, pc}

08004a7e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004a7e:	b580      	push	{r7, lr}
 8004a80:	b086      	sub	sp, #24
 8004a82:	af00      	add	r7, sp, #0
 8004a84:	4603      	mov	r3, r0
 8004a86:	60b9      	str	r1, [r7, #8]
 8004a88:	607a      	str	r2, [r7, #4]
 8004a8a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004a8c:	2300      	movs	r3, #0
 8004a8e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004a90:	f7ff ff3e 	bl	8004910 <__NVIC_GetPriorityGrouping>
 8004a94:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004a96:	687a      	ldr	r2, [r7, #4]
 8004a98:	68b9      	ldr	r1, [r7, #8]
 8004a9a:	6978      	ldr	r0, [r7, #20]
 8004a9c:	f7ff ff8e 	bl	80049bc <NVIC_EncodePriority>
 8004aa0:	4602      	mov	r2, r0
 8004aa2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004aa6:	4611      	mov	r1, r2
 8004aa8:	4618      	mov	r0, r3
 8004aaa:	f7ff ff5d 	bl	8004968 <__NVIC_SetPriority>
}
 8004aae:	bf00      	nop
 8004ab0:	3718      	adds	r7, #24
 8004ab2:	46bd      	mov	sp, r7
 8004ab4:	bd80      	pop	{r7, pc}

08004ab6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004ab6:	b580      	push	{r7, lr}
 8004ab8:	b082      	sub	sp, #8
 8004aba:	af00      	add	r7, sp, #0
 8004abc:	4603      	mov	r3, r0
 8004abe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004ac0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004ac4:	4618      	mov	r0, r3
 8004ac6:	f7ff ff31 	bl	800492c <__NVIC_EnableIRQ>
}
 8004aca:	bf00      	nop
 8004acc:	3708      	adds	r7, #8
 8004ace:	46bd      	mov	sp, r7
 8004ad0:	bd80      	pop	{r7, pc}

08004ad2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004ad2:	b580      	push	{r7, lr}
 8004ad4:	b082      	sub	sp, #8
 8004ad6:	af00      	add	r7, sp, #0
 8004ad8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004ada:	6878      	ldr	r0, [r7, #4]
 8004adc:	f7ff ffa2 	bl	8004a24 <SysTick_Config>
 8004ae0:	4603      	mov	r3, r0
}
 8004ae2:	4618      	mov	r0, r3
 8004ae4:	3708      	adds	r7, #8
 8004ae6:	46bd      	mov	sp, r7
 8004ae8:	bd80      	pop	{r7, pc}

08004aea <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004aea:	b480      	push	{r7}
 8004aec:	b083      	sub	sp, #12
 8004aee:	af00      	add	r7, sp, #0
 8004af0:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004af8:	2b02      	cmp	r3, #2
 8004afa:	d008      	beq.n	8004b0e <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	2204      	movs	r2, #4
 8004b00:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	2200      	movs	r2, #0
 8004b06:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8004b0a:	2301      	movs	r3, #1
 8004b0c:	e020      	b.n	8004b50 <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	681a      	ldr	r2, [r3, #0]
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	f022 020e 	bic.w	r2, r2, #14
 8004b1c:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	681a      	ldr	r2, [r3, #0]
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	f022 0201 	bic.w	r2, r2, #1
 8004b2c:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b36:	2101      	movs	r1, #1
 8004b38:	fa01 f202 	lsl.w	r2, r1, r2
 8004b3c:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	2201      	movs	r2, #1
 8004b42:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	2200      	movs	r2, #0
 8004b4a:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8004b4e:	2300      	movs	r3, #0
}
 8004b50:	4618      	mov	r0, r3
 8004b52:	370c      	adds	r7, #12
 8004b54:	46bd      	mov	sp, r7
 8004b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b5a:	4770      	bx	lr

08004b5c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8004b5c:	b580      	push	{r7, lr}
 8004b5e:	b084      	sub	sp, #16
 8004b60:	af00      	add	r7, sp, #0
 8004b62:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004b64:	2300      	movs	r3, #0
 8004b66:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004b6e:	2b02      	cmp	r3, #2
 8004b70:	d005      	beq.n	8004b7e <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	2204      	movs	r2, #4
 8004b76:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8004b78:	2301      	movs	r3, #1
 8004b7a:	73fb      	strb	r3, [r7, #15]
 8004b7c:	e027      	b.n	8004bce <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	681a      	ldr	r2, [r3, #0]
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	f022 020e 	bic.w	r2, r2, #14
 8004b8c:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	681a      	ldr	r2, [r3, #0]
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	f022 0201 	bic.w	r2, r2, #1
 8004b9c:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ba6:	2101      	movs	r1, #1
 8004ba8:	fa01 f202 	lsl.w	r2, r1, r2
 8004bac:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	2201      	movs	r2, #1
 8004bb2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	2200      	movs	r2, #0
 8004bba:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d003      	beq.n	8004bce <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004bca:	6878      	ldr	r0, [r7, #4]
 8004bcc:	4798      	blx	r3
    } 
  }
  return status;
 8004bce:	7bfb      	ldrb	r3, [r7, #15]
}
 8004bd0:	4618      	mov	r0, r3
 8004bd2:	3710      	adds	r7, #16
 8004bd4:	46bd      	mov	sp, r7
 8004bd6:	bd80      	pop	{r7, pc}

08004bd8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004bd8:	b480      	push	{r7}
 8004bda:	b087      	sub	sp, #28
 8004bdc:	af00      	add	r7, sp, #0
 8004bde:	6078      	str	r0, [r7, #4]
 8004be0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004be2:	2300      	movs	r3, #0
 8004be4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004be6:	e154      	b.n	8004e92 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004be8:	683b      	ldr	r3, [r7, #0]
 8004bea:	681a      	ldr	r2, [r3, #0]
 8004bec:	2101      	movs	r1, #1
 8004bee:	697b      	ldr	r3, [r7, #20]
 8004bf0:	fa01 f303 	lsl.w	r3, r1, r3
 8004bf4:	4013      	ands	r3, r2
 8004bf6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	f000 8146 	beq.w	8004e8c <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004c00:	683b      	ldr	r3, [r7, #0]
 8004c02:	685b      	ldr	r3, [r3, #4]
 8004c04:	f003 0303 	and.w	r3, r3, #3
 8004c08:	2b01      	cmp	r3, #1
 8004c0a:	d005      	beq.n	8004c18 <HAL_GPIO_Init+0x40>
 8004c0c:	683b      	ldr	r3, [r7, #0]
 8004c0e:	685b      	ldr	r3, [r3, #4]
 8004c10:	f003 0303 	and.w	r3, r3, #3
 8004c14:	2b02      	cmp	r3, #2
 8004c16:	d130      	bne.n	8004c7a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	689b      	ldr	r3, [r3, #8]
 8004c1c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8004c1e:	697b      	ldr	r3, [r7, #20]
 8004c20:	005b      	lsls	r3, r3, #1
 8004c22:	2203      	movs	r2, #3
 8004c24:	fa02 f303 	lsl.w	r3, r2, r3
 8004c28:	43db      	mvns	r3, r3
 8004c2a:	693a      	ldr	r2, [r7, #16]
 8004c2c:	4013      	ands	r3, r2
 8004c2e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004c30:	683b      	ldr	r3, [r7, #0]
 8004c32:	68da      	ldr	r2, [r3, #12]
 8004c34:	697b      	ldr	r3, [r7, #20]
 8004c36:	005b      	lsls	r3, r3, #1
 8004c38:	fa02 f303 	lsl.w	r3, r2, r3
 8004c3c:	693a      	ldr	r2, [r7, #16]
 8004c3e:	4313      	orrs	r3, r2
 8004c40:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	693a      	ldr	r2, [r7, #16]
 8004c46:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	685b      	ldr	r3, [r3, #4]
 8004c4c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004c4e:	2201      	movs	r2, #1
 8004c50:	697b      	ldr	r3, [r7, #20]
 8004c52:	fa02 f303 	lsl.w	r3, r2, r3
 8004c56:	43db      	mvns	r3, r3
 8004c58:	693a      	ldr	r2, [r7, #16]
 8004c5a:	4013      	ands	r3, r2
 8004c5c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004c5e:	683b      	ldr	r3, [r7, #0]
 8004c60:	685b      	ldr	r3, [r3, #4]
 8004c62:	091b      	lsrs	r3, r3, #4
 8004c64:	f003 0201 	and.w	r2, r3, #1
 8004c68:	697b      	ldr	r3, [r7, #20]
 8004c6a:	fa02 f303 	lsl.w	r3, r2, r3
 8004c6e:	693a      	ldr	r2, [r7, #16]
 8004c70:	4313      	orrs	r3, r2
 8004c72:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	693a      	ldr	r2, [r7, #16]
 8004c78:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004c7a:	683b      	ldr	r3, [r7, #0]
 8004c7c:	685b      	ldr	r3, [r3, #4]
 8004c7e:	f003 0303 	and.w	r3, r3, #3
 8004c82:	2b03      	cmp	r3, #3
 8004c84:	d017      	beq.n	8004cb6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	68db      	ldr	r3, [r3, #12]
 8004c8a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8004c8c:	697b      	ldr	r3, [r7, #20]
 8004c8e:	005b      	lsls	r3, r3, #1
 8004c90:	2203      	movs	r2, #3
 8004c92:	fa02 f303 	lsl.w	r3, r2, r3
 8004c96:	43db      	mvns	r3, r3
 8004c98:	693a      	ldr	r2, [r7, #16]
 8004c9a:	4013      	ands	r3, r2
 8004c9c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8004c9e:	683b      	ldr	r3, [r7, #0]
 8004ca0:	689a      	ldr	r2, [r3, #8]
 8004ca2:	697b      	ldr	r3, [r7, #20]
 8004ca4:	005b      	lsls	r3, r3, #1
 8004ca6:	fa02 f303 	lsl.w	r3, r2, r3
 8004caa:	693a      	ldr	r2, [r7, #16]
 8004cac:	4313      	orrs	r3, r2
 8004cae:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	693a      	ldr	r2, [r7, #16]
 8004cb4:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004cb6:	683b      	ldr	r3, [r7, #0]
 8004cb8:	685b      	ldr	r3, [r3, #4]
 8004cba:	f003 0303 	and.w	r3, r3, #3
 8004cbe:	2b02      	cmp	r3, #2
 8004cc0:	d123      	bne.n	8004d0a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8004cc2:	697b      	ldr	r3, [r7, #20]
 8004cc4:	08da      	lsrs	r2, r3, #3
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	3208      	adds	r2, #8
 8004cca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004cce:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004cd0:	697b      	ldr	r3, [r7, #20]
 8004cd2:	f003 0307 	and.w	r3, r3, #7
 8004cd6:	009b      	lsls	r3, r3, #2
 8004cd8:	220f      	movs	r2, #15
 8004cda:	fa02 f303 	lsl.w	r3, r2, r3
 8004cde:	43db      	mvns	r3, r3
 8004ce0:	693a      	ldr	r2, [r7, #16]
 8004ce2:	4013      	ands	r3, r2
 8004ce4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004ce6:	683b      	ldr	r3, [r7, #0]
 8004ce8:	691a      	ldr	r2, [r3, #16]
 8004cea:	697b      	ldr	r3, [r7, #20]
 8004cec:	f003 0307 	and.w	r3, r3, #7
 8004cf0:	009b      	lsls	r3, r3, #2
 8004cf2:	fa02 f303 	lsl.w	r3, r2, r3
 8004cf6:	693a      	ldr	r2, [r7, #16]
 8004cf8:	4313      	orrs	r3, r2
 8004cfa:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004cfc:	697b      	ldr	r3, [r7, #20]
 8004cfe:	08da      	lsrs	r2, r3, #3
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	3208      	adds	r2, #8
 8004d04:	6939      	ldr	r1, [r7, #16]
 8004d06:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8004d10:	697b      	ldr	r3, [r7, #20]
 8004d12:	005b      	lsls	r3, r3, #1
 8004d14:	2203      	movs	r2, #3
 8004d16:	fa02 f303 	lsl.w	r3, r2, r3
 8004d1a:	43db      	mvns	r3, r3
 8004d1c:	693a      	ldr	r2, [r7, #16]
 8004d1e:	4013      	ands	r3, r2
 8004d20:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004d22:	683b      	ldr	r3, [r7, #0]
 8004d24:	685b      	ldr	r3, [r3, #4]
 8004d26:	f003 0203 	and.w	r2, r3, #3
 8004d2a:	697b      	ldr	r3, [r7, #20]
 8004d2c:	005b      	lsls	r3, r3, #1
 8004d2e:	fa02 f303 	lsl.w	r3, r2, r3
 8004d32:	693a      	ldr	r2, [r7, #16]
 8004d34:	4313      	orrs	r3, r2
 8004d36:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	693a      	ldr	r2, [r7, #16]
 8004d3c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004d3e:	683b      	ldr	r3, [r7, #0]
 8004d40:	685b      	ldr	r3, [r3, #4]
 8004d42:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	f000 80a0 	beq.w	8004e8c <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004d4c:	4b58      	ldr	r3, [pc, #352]	; (8004eb0 <HAL_GPIO_Init+0x2d8>)
 8004d4e:	699b      	ldr	r3, [r3, #24]
 8004d50:	4a57      	ldr	r2, [pc, #348]	; (8004eb0 <HAL_GPIO_Init+0x2d8>)
 8004d52:	f043 0301 	orr.w	r3, r3, #1
 8004d56:	6193      	str	r3, [r2, #24]
 8004d58:	4b55      	ldr	r3, [pc, #340]	; (8004eb0 <HAL_GPIO_Init+0x2d8>)
 8004d5a:	699b      	ldr	r3, [r3, #24]
 8004d5c:	f003 0301 	and.w	r3, r3, #1
 8004d60:	60bb      	str	r3, [r7, #8]
 8004d62:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8004d64:	4a53      	ldr	r2, [pc, #332]	; (8004eb4 <HAL_GPIO_Init+0x2dc>)
 8004d66:	697b      	ldr	r3, [r7, #20]
 8004d68:	089b      	lsrs	r3, r3, #2
 8004d6a:	3302      	adds	r3, #2
 8004d6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004d70:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8004d72:	697b      	ldr	r3, [r7, #20]
 8004d74:	f003 0303 	and.w	r3, r3, #3
 8004d78:	009b      	lsls	r3, r3, #2
 8004d7a:	220f      	movs	r2, #15
 8004d7c:	fa02 f303 	lsl.w	r3, r2, r3
 8004d80:	43db      	mvns	r3, r3
 8004d82:	693a      	ldr	r2, [r7, #16]
 8004d84:	4013      	ands	r3, r2
 8004d86:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8004d8e:	d019      	beq.n	8004dc4 <HAL_GPIO_Init+0x1ec>
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	4a49      	ldr	r2, [pc, #292]	; (8004eb8 <HAL_GPIO_Init+0x2e0>)
 8004d94:	4293      	cmp	r3, r2
 8004d96:	d013      	beq.n	8004dc0 <HAL_GPIO_Init+0x1e8>
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	4a48      	ldr	r2, [pc, #288]	; (8004ebc <HAL_GPIO_Init+0x2e4>)
 8004d9c:	4293      	cmp	r3, r2
 8004d9e:	d00d      	beq.n	8004dbc <HAL_GPIO_Init+0x1e4>
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	4a47      	ldr	r2, [pc, #284]	; (8004ec0 <HAL_GPIO_Init+0x2e8>)
 8004da4:	4293      	cmp	r3, r2
 8004da6:	d007      	beq.n	8004db8 <HAL_GPIO_Init+0x1e0>
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	4a46      	ldr	r2, [pc, #280]	; (8004ec4 <HAL_GPIO_Init+0x2ec>)
 8004dac:	4293      	cmp	r3, r2
 8004dae:	d101      	bne.n	8004db4 <HAL_GPIO_Init+0x1dc>
 8004db0:	2304      	movs	r3, #4
 8004db2:	e008      	b.n	8004dc6 <HAL_GPIO_Init+0x1ee>
 8004db4:	2305      	movs	r3, #5
 8004db6:	e006      	b.n	8004dc6 <HAL_GPIO_Init+0x1ee>
 8004db8:	2303      	movs	r3, #3
 8004dba:	e004      	b.n	8004dc6 <HAL_GPIO_Init+0x1ee>
 8004dbc:	2302      	movs	r3, #2
 8004dbe:	e002      	b.n	8004dc6 <HAL_GPIO_Init+0x1ee>
 8004dc0:	2301      	movs	r3, #1
 8004dc2:	e000      	b.n	8004dc6 <HAL_GPIO_Init+0x1ee>
 8004dc4:	2300      	movs	r3, #0
 8004dc6:	697a      	ldr	r2, [r7, #20]
 8004dc8:	f002 0203 	and.w	r2, r2, #3
 8004dcc:	0092      	lsls	r2, r2, #2
 8004dce:	4093      	lsls	r3, r2
 8004dd0:	693a      	ldr	r2, [r7, #16]
 8004dd2:	4313      	orrs	r3, r2
 8004dd4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004dd6:	4937      	ldr	r1, [pc, #220]	; (8004eb4 <HAL_GPIO_Init+0x2dc>)
 8004dd8:	697b      	ldr	r3, [r7, #20]
 8004dda:	089b      	lsrs	r3, r3, #2
 8004ddc:	3302      	adds	r3, #2
 8004dde:	693a      	ldr	r2, [r7, #16]
 8004de0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004de4:	4b38      	ldr	r3, [pc, #224]	; (8004ec8 <HAL_GPIO_Init+0x2f0>)
 8004de6:	689b      	ldr	r3, [r3, #8]
 8004de8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	43db      	mvns	r3, r3
 8004dee:	693a      	ldr	r2, [r7, #16]
 8004df0:	4013      	ands	r3, r2
 8004df2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004df4:	683b      	ldr	r3, [r7, #0]
 8004df6:	685b      	ldr	r3, [r3, #4]
 8004df8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d003      	beq.n	8004e08 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8004e00:	693a      	ldr	r2, [r7, #16]
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	4313      	orrs	r3, r2
 8004e06:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8004e08:	4a2f      	ldr	r2, [pc, #188]	; (8004ec8 <HAL_GPIO_Init+0x2f0>)
 8004e0a:	693b      	ldr	r3, [r7, #16]
 8004e0c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004e0e:	4b2e      	ldr	r3, [pc, #184]	; (8004ec8 <HAL_GPIO_Init+0x2f0>)
 8004e10:	68db      	ldr	r3, [r3, #12]
 8004e12:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	43db      	mvns	r3, r3
 8004e18:	693a      	ldr	r2, [r7, #16]
 8004e1a:	4013      	ands	r3, r2
 8004e1c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004e1e:	683b      	ldr	r3, [r7, #0]
 8004e20:	685b      	ldr	r3, [r3, #4]
 8004e22:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d003      	beq.n	8004e32 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8004e2a:	693a      	ldr	r2, [r7, #16]
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	4313      	orrs	r3, r2
 8004e30:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8004e32:	4a25      	ldr	r2, [pc, #148]	; (8004ec8 <HAL_GPIO_Init+0x2f0>)
 8004e34:	693b      	ldr	r3, [r7, #16]
 8004e36:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004e38:	4b23      	ldr	r3, [pc, #140]	; (8004ec8 <HAL_GPIO_Init+0x2f0>)
 8004e3a:	685b      	ldr	r3, [r3, #4]
 8004e3c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	43db      	mvns	r3, r3
 8004e42:	693a      	ldr	r2, [r7, #16]
 8004e44:	4013      	ands	r3, r2
 8004e46:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004e48:	683b      	ldr	r3, [r7, #0]
 8004e4a:	685b      	ldr	r3, [r3, #4]
 8004e4c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d003      	beq.n	8004e5c <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8004e54:	693a      	ldr	r2, [r7, #16]
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	4313      	orrs	r3, r2
 8004e5a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8004e5c:	4a1a      	ldr	r2, [pc, #104]	; (8004ec8 <HAL_GPIO_Init+0x2f0>)
 8004e5e:	693b      	ldr	r3, [r7, #16]
 8004e60:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004e62:	4b19      	ldr	r3, [pc, #100]	; (8004ec8 <HAL_GPIO_Init+0x2f0>)
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	43db      	mvns	r3, r3
 8004e6c:	693a      	ldr	r2, [r7, #16]
 8004e6e:	4013      	ands	r3, r2
 8004e70:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004e72:	683b      	ldr	r3, [r7, #0]
 8004e74:	685b      	ldr	r3, [r3, #4]
 8004e76:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d003      	beq.n	8004e86 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8004e7e:	693a      	ldr	r2, [r7, #16]
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	4313      	orrs	r3, r2
 8004e84:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8004e86:	4a10      	ldr	r2, [pc, #64]	; (8004ec8 <HAL_GPIO_Init+0x2f0>)
 8004e88:	693b      	ldr	r3, [r7, #16]
 8004e8a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004e8c:	697b      	ldr	r3, [r7, #20]
 8004e8e:	3301      	adds	r3, #1
 8004e90:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004e92:	683b      	ldr	r3, [r7, #0]
 8004e94:	681a      	ldr	r2, [r3, #0]
 8004e96:	697b      	ldr	r3, [r7, #20]
 8004e98:	fa22 f303 	lsr.w	r3, r2, r3
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	f47f aea3 	bne.w	8004be8 <HAL_GPIO_Init+0x10>
  }
}
 8004ea2:	bf00      	nop
 8004ea4:	bf00      	nop
 8004ea6:	371c      	adds	r7, #28
 8004ea8:	46bd      	mov	sp, r7
 8004eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eae:	4770      	bx	lr
 8004eb0:	40021000 	.word	0x40021000
 8004eb4:	40010000 	.word	0x40010000
 8004eb8:	48000400 	.word	0x48000400
 8004ebc:	48000800 	.word	0x48000800
 8004ec0:	48000c00 	.word	0x48000c00
 8004ec4:	48001000 	.word	0x48001000
 8004ec8:	40010400 	.word	0x40010400

08004ecc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004ecc:	b480      	push	{r7}
 8004ece:	b083      	sub	sp, #12
 8004ed0:	af00      	add	r7, sp, #0
 8004ed2:	6078      	str	r0, [r7, #4]
 8004ed4:	460b      	mov	r3, r1
 8004ed6:	807b      	strh	r3, [r7, #2]
 8004ed8:	4613      	mov	r3, r2
 8004eda:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004edc:	787b      	ldrb	r3, [r7, #1]
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d003      	beq.n	8004eea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004ee2:	887a      	ldrh	r2, [r7, #2]
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004ee8:	e002      	b.n	8004ef0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004eea:	887a      	ldrh	r2, [r7, #2]
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004ef0:	bf00      	nop
 8004ef2:	370c      	adds	r7, #12
 8004ef4:	46bd      	mov	sp, r7
 8004ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004efa:	4770      	bx	lr

08004efc <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004efc:	b480      	push	{r7}
 8004efe:	b085      	sub	sp, #20
 8004f00:	af00      	add	r7, sp, #0
 8004f02:	6078      	str	r0, [r7, #4]
 8004f04:	460b      	mov	r3, r1
 8004f06:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	695b      	ldr	r3, [r3, #20]
 8004f0c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004f0e:	887a      	ldrh	r2, [r7, #2]
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	4013      	ands	r3, r2
 8004f14:	041a      	lsls	r2, r3, #16
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	43d9      	mvns	r1, r3
 8004f1a:	887b      	ldrh	r3, [r7, #2]
 8004f1c:	400b      	ands	r3, r1
 8004f1e:	431a      	orrs	r2, r3
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	619a      	str	r2, [r3, #24]
}
 8004f24:	bf00      	nop
 8004f26:	3714      	adds	r7, #20
 8004f28:	46bd      	mov	sp, r7
 8004f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f2e:	4770      	bx	lr

08004f30 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004f30:	b580      	push	{r7, lr}
 8004f32:	b082      	sub	sp, #8
 8004f34:	af00      	add	r7, sp, #0
 8004f36:	4603      	mov	r3, r0
 8004f38:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8004f3a:	4b08      	ldr	r3, [pc, #32]	; (8004f5c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004f3c:	695a      	ldr	r2, [r3, #20]
 8004f3e:	88fb      	ldrh	r3, [r7, #6]
 8004f40:	4013      	ands	r3, r2
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d006      	beq.n	8004f54 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004f46:	4a05      	ldr	r2, [pc, #20]	; (8004f5c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004f48:	88fb      	ldrh	r3, [r7, #6]
 8004f4a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004f4c:	88fb      	ldrh	r3, [r7, #6]
 8004f4e:	4618      	mov	r0, r3
 8004f50:	f7fc f8a0 	bl	8001094 <HAL_GPIO_EXTI_Callback>
  }
}
 8004f54:	bf00      	nop
 8004f56:	3708      	adds	r7, #8
 8004f58:	46bd      	mov	sp, r7
 8004f5a:	bd80      	pop	{r7, pc}
 8004f5c:	40010400 	.word	0x40010400

08004f60 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004f60:	b580      	push	{r7, lr}
 8004f62:	b082      	sub	sp, #8
 8004f64:	af00      	add	r7, sp, #0
 8004f66:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d101      	bne.n	8004f72 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004f6e:	2301      	movs	r3, #1
 8004f70:	e081      	b.n	8005076 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004f78:	b2db      	uxtb	r3, r3
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d106      	bne.n	8004f8c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	2200      	movs	r2, #0
 8004f82:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004f86:	6878      	ldr	r0, [r7, #4]
 8004f88:	f7fd fde6 	bl	8002b58 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	2224      	movs	r2, #36	; 0x24
 8004f90:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	681a      	ldr	r2, [r3, #0]
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	f022 0201 	bic.w	r2, r2, #1
 8004fa2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	685a      	ldr	r2, [r3, #4]
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004fb0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	689a      	ldr	r2, [r3, #8]
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004fc0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	68db      	ldr	r3, [r3, #12]
 8004fc6:	2b01      	cmp	r3, #1
 8004fc8:	d107      	bne.n	8004fda <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	689a      	ldr	r2, [r3, #8]
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004fd6:	609a      	str	r2, [r3, #8]
 8004fd8:	e006      	b.n	8004fe8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	689a      	ldr	r2, [r3, #8]
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8004fe6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	68db      	ldr	r3, [r3, #12]
 8004fec:	2b02      	cmp	r3, #2
 8004fee:	d104      	bne.n	8004ffa <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004ff8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	685b      	ldr	r3, [r3, #4]
 8005000:	687a      	ldr	r2, [r7, #4]
 8005002:	6812      	ldr	r2, [r2, #0]
 8005004:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8005008:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800500c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	68da      	ldr	r2, [r3, #12]
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800501c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	691a      	ldr	r2, [r3, #16]
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	695b      	ldr	r3, [r3, #20]
 8005026:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	699b      	ldr	r3, [r3, #24]
 800502e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	430a      	orrs	r2, r1
 8005036:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	69d9      	ldr	r1, [r3, #28]
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	6a1a      	ldr	r2, [r3, #32]
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	430a      	orrs	r2, r1
 8005046:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	681a      	ldr	r2, [r3, #0]
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	f042 0201 	orr.w	r2, r2, #1
 8005056:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	2200      	movs	r2, #0
 800505c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	2220      	movs	r2, #32
 8005062:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	2200      	movs	r2, #0
 800506a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	2200      	movs	r2, #0
 8005070:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8005074:	2300      	movs	r3, #0
}
 8005076:	4618      	mov	r0, r3
 8005078:	3708      	adds	r7, #8
 800507a:	46bd      	mov	sp, r7
 800507c:	bd80      	pop	{r7, pc}

0800507e <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800507e:	b480      	push	{r7}
 8005080:	b083      	sub	sp, #12
 8005082:	af00      	add	r7, sp, #0
 8005084:	6078      	str	r0, [r7, #4]
 8005086:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800508e:	b2db      	uxtb	r3, r3
 8005090:	2b20      	cmp	r3, #32
 8005092:	d138      	bne.n	8005106 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800509a:	2b01      	cmp	r3, #1
 800509c:	d101      	bne.n	80050a2 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800509e:	2302      	movs	r3, #2
 80050a0:	e032      	b.n	8005108 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	2201      	movs	r2, #1
 80050a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	2224      	movs	r2, #36	; 0x24
 80050ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	681a      	ldr	r2, [r3, #0]
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	f022 0201 	bic.w	r2, r2, #1
 80050c0:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	681a      	ldr	r2, [r3, #0]
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80050d0:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	6819      	ldr	r1, [r3, #0]
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	683a      	ldr	r2, [r7, #0]
 80050de:	430a      	orrs	r2, r1
 80050e0:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	681a      	ldr	r2, [r3, #0]
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	f042 0201 	orr.w	r2, r2, #1
 80050f0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	2220      	movs	r2, #32
 80050f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	2200      	movs	r2, #0
 80050fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005102:	2300      	movs	r3, #0
 8005104:	e000      	b.n	8005108 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005106:	2302      	movs	r3, #2
  }
}
 8005108:	4618      	mov	r0, r3
 800510a:	370c      	adds	r7, #12
 800510c:	46bd      	mov	sp, r7
 800510e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005112:	4770      	bx	lr

08005114 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005114:	b480      	push	{r7}
 8005116:	b085      	sub	sp, #20
 8005118:	af00      	add	r7, sp, #0
 800511a:	6078      	str	r0, [r7, #4]
 800511c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005124:	b2db      	uxtb	r3, r3
 8005126:	2b20      	cmp	r3, #32
 8005128:	d139      	bne.n	800519e <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005130:	2b01      	cmp	r3, #1
 8005132:	d101      	bne.n	8005138 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8005134:	2302      	movs	r3, #2
 8005136:	e033      	b.n	80051a0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	2201      	movs	r2, #1
 800513c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	2224      	movs	r2, #36	; 0x24
 8005144:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	681a      	ldr	r2, [r3, #0]
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	f022 0201 	bic.w	r2, r2, #1
 8005156:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8005166:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8005168:	683b      	ldr	r3, [r7, #0]
 800516a:	021b      	lsls	r3, r3, #8
 800516c:	68fa      	ldr	r2, [r7, #12]
 800516e:	4313      	orrs	r3, r2
 8005170:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	68fa      	ldr	r2, [r7, #12]
 8005178:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	681a      	ldr	r2, [r3, #0]
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	f042 0201 	orr.w	r2, r2, #1
 8005188:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	2220      	movs	r2, #32
 800518e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	2200      	movs	r2, #0
 8005196:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800519a:	2300      	movs	r3, #0
 800519c:	e000      	b.n	80051a0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800519e:	2302      	movs	r3, #2
  }
}
 80051a0:	4618      	mov	r0, r3
 80051a2:	3714      	adds	r7, #20
 80051a4:	46bd      	mov	sp, r7
 80051a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051aa:	4770      	bx	lr

080051ac <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80051ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80051ae:	b08b      	sub	sp, #44	; 0x2c
 80051b0:	af06      	add	r7, sp, #24
 80051b2:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d101      	bne.n	80051be <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80051ba:	2301      	movs	r3, #1
 80051bc:	e0c4      	b.n	8005348 <HAL_PCD_Init+0x19c>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 80051c4:	b2db      	uxtb	r3, r3
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d106      	bne.n	80051d8 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	2200      	movs	r2, #0
 80051ce:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80051d2:	6878      	ldr	r0, [r7, #4]
 80051d4:	f7fd fee4 	bl	8002fa0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	2203      	movs	r2, #3
 80051dc:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	4618      	mov	r0, r3
 80051e6:	f004 fdcb 	bl	8009d80 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80051ea:	2300      	movs	r3, #0
 80051ec:	73fb      	strb	r3, [r7, #15]
 80051ee:	e040      	b.n	8005272 <HAL_PCD_Init+0xc6>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80051f0:	7bfb      	ldrb	r3, [r7, #15]
 80051f2:	6879      	ldr	r1, [r7, #4]
 80051f4:	1c5a      	adds	r2, r3, #1
 80051f6:	4613      	mov	r3, r2
 80051f8:	009b      	lsls	r3, r3, #2
 80051fa:	4413      	add	r3, r2
 80051fc:	00db      	lsls	r3, r3, #3
 80051fe:	440b      	add	r3, r1
 8005200:	3301      	adds	r3, #1
 8005202:	2201      	movs	r2, #1
 8005204:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8005206:	7bfb      	ldrb	r3, [r7, #15]
 8005208:	6879      	ldr	r1, [r7, #4]
 800520a:	1c5a      	adds	r2, r3, #1
 800520c:	4613      	mov	r3, r2
 800520e:	009b      	lsls	r3, r3, #2
 8005210:	4413      	add	r3, r2
 8005212:	00db      	lsls	r3, r3, #3
 8005214:	440b      	add	r3, r1
 8005216:	7bfa      	ldrb	r2, [r7, #15]
 8005218:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800521a:	7bfb      	ldrb	r3, [r7, #15]
 800521c:	6879      	ldr	r1, [r7, #4]
 800521e:	1c5a      	adds	r2, r3, #1
 8005220:	4613      	mov	r3, r2
 8005222:	009b      	lsls	r3, r3, #2
 8005224:	4413      	add	r3, r2
 8005226:	00db      	lsls	r3, r3, #3
 8005228:	440b      	add	r3, r1
 800522a:	3303      	adds	r3, #3
 800522c:	2200      	movs	r2, #0
 800522e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8005230:	7bfa      	ldrb	r2, [r7, #15]
 8005232:	6879      	ldr	r1, [r7, #4]
 8005234:	4613      	mov	r3, r2
 8005236:	009b      	lsls	r3, r3, #2
 8005238:	4413      	add	r3, r2
 800523a:	00db      	lsls	r3, r3, #3
 800523c:	440b      	add	r3, r1
 800523e:	3338      	adds	r3, #56	; 0x38
 8005240:	2200      	movs	r2, #0
 8005242:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8005244:	7bfa      	ldrb	r2, [r7, #15]
 8005246:	6879      	ldr	r1, [r7, #4]
 8005248:	4613      	mov	r3, r2
 800524a:	009b      	lsls	r3, r3, #2
 800524c:	4413      	add	r3, r2
 800524e:	00db      	lsls	r3, r3, #3
 8005250:	440b      	add	r3, r1
 8005252:	333c      	adds	r3, #60	; 0x3c
 8005254:	2200      	movs	r2, #0
 8005256:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8005258:	7bfa      	ldrb	r2, [r7, #15]
 800525a:	6879      	ldr	r1, [r7, #4]
 800525c:	4613      	mov	r3, r2
 800525e:	009b      	lsls	r3, r3, #2
 8005260:	4413      	add	r3, r2
 8005262:	00db      	lsls	r3, r3, #3
 8005264:	440b      	add	r3, r1
 8005266:	3340      	adds	r3, #64	; 0x40
 8005268:	2200      	movs	r2, #0
 800526a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800526c:	7bfb      	ldrb	r3, [r7, #15]
 800526e:	3301      	adds	r3, #1
 8005270:	73fb      	strb	r3, [r7, #15]
 8005272:	7bfa      	ldrb	r2, [r7, #15]
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	685b      	ldr	r3, [r3, #4]
 8005278:	429a      	cmp	r2, r3
 800527a:	d3b9      	bcc.n	80051f0 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800527c:	2300      	movs	r3, #0
 800527e:	73fb      	strb	r3, [r7, #15]
 8005280:	e044      	b.n	800530c <HAL_PCD_Init+0x160>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8005282:	7bfa      	ldrb	r2, [r7, #15]
 8005284:	6879      	ldr	r1, [r7, #4]
 8005286:	4613      	mov	r3, r2
 8005288:	009b      	lsls	r3, r3, #2
 800528a:	4413      	add	r3, r2
 800528c:	00db      	lsls	r3, r3, #3
 800528e:	440b      	add	r3, r1
 8005290:	f203 1369 	addw	r3, r3, #361	; 0x169
 8005294:	2200      	movs	r2, #0
 8005296:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8005298:	7bfa      	ldrb	r2, [r7, #15]
 800529a:	6879      	ldr	r1, [r7, #4]
 800529c:	4613      	mov	r3, r2
 800529e:	009b      	lsls	r3, r3, #2
 80052a0:	4413      	add	r3, r2
 80052a2:	00db      	lsls	r3, r3, #3
 80052a4:	440b      	add	r3, r1
 80052a6:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80052aa:	7bfa      	ldrb	r2, [r7, #15]
 80052ac:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80052ae:	7bfa      	ldrb	r2, [r7, #15]
 80052b0:	6879      	ldr	r1, [r7, #4]
 80052b2:	4613      	mov	r3, r2
 80052b4:	009b      	lsls	r3, r3, #2
 80052b6:	4413      	add	r3, r2
 80052b8:	00db      	lsls	r3, r3, #3
 80052ba:	440b      	add	r3, r1
 80052bc:	f203 136b 	addw	r3, r3, #363	; 0x16b
 80052c0:	2200      	movs	r2, #0
 80052c2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80052c4:	7bfa      	ldrb	r2, [r7, #15]
 80052c6:	6879      	ldr	r1, [r7, #4]
 80052c8:	4613      	mov	r3, r2
 80052ca:	009b      	lsls	r3, r3, #2
 80052cc:	4413      	add	r3, r2
 80052ce:	00db      	lsls	r3, r3, #3
 80052d0:	440b      	add	r3, r1
 80052d2:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 80052d6:	2200      	movs	r2, #0
 80052d8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80052da:	7bfa      	ldrb	r2, [r7, #15]
 80052dc:	6879      	ldr	r1, [r7, #4]
 80052de:	4613      	mov	r3, r2
 80052e0:	009b      	lsls	r3, r3, #2
 80052e2:	4413      	add	r3, r2
 80052e4:	00db      	lsls	r3, r3, #3
 80052e6:	440b      	add	r3, r1
 80052e8:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80052ec:	2200      	movs	r2, #0
 80052ee:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80052f0:	7bfa      	ldrb	r2, [r7, #15]
 80052f2:	6879      	ldr	r1, [r7, #4]
 80052f4:	4613      	mov	r3, r2
 80052f6:	009b      	lsls	r3, r3, #2
 80052f8:	4413      	add	r3, r2
 80052fa:	00db      	lsls	r3, r3, #3
 80052fc:	440b      	add	r3, r1
 80052fe:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8005302:	2200      	movs	r2, #0
 8005304:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005306:	7bfb      	ldrb	r3, [r7, #15]
 8005308:	3301      	adds	r3, #1
 800530a:	73fb      	strb	r3, [r7, #15]
 800530c:	7bfa      	ldrb	r2, [r7, #15]
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	685b      	ldr	r3, [r3, #4]
 8005312:	429a      	cmp	r2, r3
 8005314:	d3b5      	bcc.n	8005282 <HAL_PCD_Init+0xd6>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	603b      	str	r3, [r7, #0]
 800531c:	687e      	ldr	r6, [r7, #4]
 800531e:	466d      	mov	r5, sp
 8005320:	f106 0410 	add.w	r4, r6, #16
 8005324:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005326:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005328:	6823      	ldr	r3, [r4, #0]
 800532a:	602b      	str	r3, [r5, #0]
 800532c:	1d33      	adds	r3, r6, #4
 800532e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005330:	6838      	ldr	r0, [r7, #0]
 8005332:	f004 fd40 	bl	8009db6 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	2200      	movs	r2, #0
 800533a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	2201      	movs	r2, #1
 8005342:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  return HAL_OK;
 8005346:	2300      	movs	r3, #0
}
 8005348:	4618      	mov	r0, r3
 800534a:	3714      	adds	r7, #20
 800534c:	46bd      	mov	sp, r7
 800534e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005350 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005350:	b580      	push	{r7, lr}
 8005352:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8005356:	af00      	add	r7, sp, #0
 8005358:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800535c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005360:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005362:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005366:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	2b00      	cmp	r3, #0
 800536e:	d102      	bne.n	8005376 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8005370:	2301      	movs	r3, #1
 8005372:	f001 b823 	b.w	80063bc <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005376:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800537a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	f003 0301 	and.w	r3, r3, #1
 8005386:	2b00      	cmp	r3, #0
 8005388:	f000 817d 	beq.w	8005686 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800538c:	4bbc      	ldr	r3, [pc, #752]	; (8005680 <HAL_RCC_OscConfig+0x330>)
 800538e:	685b      	ldr	r3, [r3, #4]
 8005390:	f003 030c 	and.w	r3, r3, #12
 8005394:	2b04      	cmp	r3, #4
 8005396:	d00c      	beq.n	80053b2 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8005398:	4bb9      	ldr	r3, [pc, #740]	; (8005680 <HAL_RCC_OscConfig+0x330>)
 800539a:	685b      	ldr	r3, [r3, #4]
 800539c:	f003 030c 	and.w	r3, r3, #12
 80053a0:	2b08      	cmp	r3, #8
 80053a2:	d15c      	bne.n	800545e <HAL_RCC_OscConfig+0x10e>
 80053a4:	4bb6      	ldr	r3, [pc, #728]	; (8005680 <HAL_RCC_OscConfig+0x330>)
 80053a6:	685b      	ldr	r3, [r3, #4]
 80053a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80053ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80053b0:	d155      	bne.n	800545e <HAL_RCC_OscConfig+0x10e>
 80053b2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80053b6:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80053ba:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 80053be:	fa93 f3a3 	rbit	r3, r3
 80053c2:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
  return result;
 80053c6:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80053ca:	fab3 f383 	clz	r3, r3
 80053ce:	b2db      	uxtb	r3, r3
 80053d0:	095b      	lsrs	r3, r3, #5
 80053d2:	b2db      	uxtb	r3, r3
 80053d4:	f043 0301 	orr.w	r3, r3, #1
 80053d8:	b2db      	uxtb	r3, r3
 80053da:	2b01      	cmp	r3, #1
 80053dc:	d102      	bne.n	80053e4 <HAL_RCC_OscConfig+0x94>
 80053de:	4ba8      	ldr	r3, [pc, #672]	; (8005680 <HAL_RCC_OscConfig+0x330>)
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	e015      	b.n	8005410 <HAL_RCC_OscConfig+0xc0>
 80053e4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80053e8:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80053ec:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 80053f0:	fa93 f3a3 	rbit	r3, r3
 80053f4:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 80053f8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80053fc:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8005400:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8005404:	fa93 f3a3 	rbit	r3, r3
 8005408:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 800540c:	4b9c      	ldr	r3, [pc, #624]	; (8005680 <HAL_RCC_OscConfig+0x330>)
 800540e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005410:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8005414:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8005418:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 800541c:	fa92 f2a2 	rbit	r2, r2
 8005420:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8005424:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8005428:	fab2 f282 	clz	r2, r2
 800542c:	b2d2      	uxtb	r2, r2
 800542e:	f042 0220 	orr.w	r2, r2, #32
 8005432:	b2d2      	uxtb	r2, r2
 8005434:	f002 021f 	and.w	r2, r2, #31
 8005438:	2101      	movs	r1, #1
 800543a:	fa01 f202 	lsl.w	r2, r1, r2
 800543e:	4013      	ands	r3, r2
 8005440:	2b00      	cmp	r3, #0
 8005442:	f000 811f 	beq.w	8005684 <HAL_RCC_OscConfig+0x334>
 8005446:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800544a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	685b      	ldr	r3, [r3, #4]
 8005452:	2b00      	cmp	r3, #0
 8005454:	f040 8116 	bne.w	8005684 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8005458:	2301      	movs	r3, #1
 800545a:	f000 bfaf 	b.w	80063bc <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800545e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005462:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	685b      	ldr	r3, [r3, #4]
 800546a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800546e:	d106      	bne.n	800547e <HAL_RCC_OscConfig+0x12e>
 8005470:	4b83      	ldr	r3, [pc, #524]	; (8005680 <HAL_RCC_OscConfig+0x330>)
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	4a82      	ldr	r2, [pc, #520]	; (8005680 <HAL_RCC_OscConfig+0x330>)
 8005476:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800547a:	6013      	str	r3, [r2, #0]
 800547c:	e036      	b.n	80054ec <HAL_RCC_OscConfig+0x19c>
 800547e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005482:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	685b      	ldr	r3, [r3, #4]
 800548a:	2b00      	cmp	r3, #0
 800548c:	d10c      	bne.n	80054a8 <HAL_RCC_OscConfig+0x158>
 800548e:	4b7c      	ldr	r3, [pc, #496]	; (8005680 <HAL_RCC_OscConfig+0x330>)
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	4a7b      	ldr	r2, [pc, #492]	; (8005680 <HAL_RCC_OscConfig+0x330>)
 8005494:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005498:	6013      	str	r3, [r2, #0]
 800549a:	4b79      	ldr	r3, [pc, #484]	; (8005680 <HAL_RCC_OscConfig+0x330>)
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	4a78      	ldr	r2, [pc, #480]	; (8005680 <HAL_RCC_OscConfig+0x330>)
 80054a0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80054a4:	6013      	str	r3, [r2, #0]
 80054a6:	e021      	b.n	80054ec <HAL_RCC_OscConfig+0x19c>
 80054a8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80054ac:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	685b      	ldr	r3, [r3, #4]
 80054b4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80054b8:	d10c      	bne.n	80054d4 <HAL_RCC_OscConfig+0x184>
 80054ba:	4b71      	ldr	r3, [pc, #452]	; (8005680 <HAL_RCC_OscConfig+0x330>)
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	4a70      	ldr	r2, [pc, #448]	; (8005680 <HAL_RCC_OscConfig+0x330>)
 80054c0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80054c4:	6013      	str	r3, [r2, #0]
 80054c6:	4b6e      	ldr	r3, [pc, #440]	; (8005680 <HAL_RCC_OscConfig+0x330>)
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	4a6d      	ldr	r2, [pc, #436]	; (8005680 <HAL_RCC_OscConfig+0x330>)
 80054cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80054d0:	6013      	str	r3, [r2, #0]
 80054d2:	e00b      	b.n	80054ec <HAL_RCC_OscConfig+0x19c>
 80054d4:	4b6a      	ldr	r3, [pc, #424]	; (8005680 <HAL_RCC_OscConfig+0x330>)
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	4a69      	ldr	r2, [pc, #420]	; (8005680 <HAL_RCC_OscConfig+0x330>)
 80054da:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80054de:	6013      	str	r3, [r2, #0]
 80054e0:	4b67      	ldr	r3, [pc, #412]	; (8005680 <HAL_RCC_OscConfig+0x330>)
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	4a66      	ldr	r2, [pc, #408]	; (8005680 <HAL_RCC_OscConfig+0x330>)
 80054e6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80054ea:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80054ec:	4b64      	ldr	r3, [pc, #400]	; (8005680 <HAL_RCC_OscConfig+0x330>)
 80054ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054f0:	f023 020f 	bic.w	r2, r3, #15
 80054f4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80054f8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	689b      	ldr	r3, [r3, #8]
 8005500:	495f      	ldr	r1, [pc, #380]	; (8005680 <HAL_RCC_OscConfig+0x330>)
 8005502:	4313      	orrs	r3, r2
 8005504:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005506:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800550a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	685b      	ldr	r3, [r3, #4]
 8005512:	2b00      	cmp	r3, #0
 8005514:	d059      	beq.n	80055ca <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005516:	f7fd fed3 	bl	80032c0 <HAL_GetTick>
 800551a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800551e:	e00a      	b.n	8005536 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005520:	f7fd fece 	bl	80032c0 <HAL_GetTick>
 8005524:	4602      	mov	r2, r0
 8005526:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800552a:	1ad3      	subs	r3, r2, r3
 800552c:	2b64      	cmp	r3, #100	; 0x64
 800552e:	d902      	bls.n	8005536 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8005530:	2303      	movs	r3, #3
 8005532:	f000 bf43 	b.w	80063bc <HAL_RCC_OscConfig+0x106c>
 8005536:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800553a:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800553e:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8005542:	fa93 f3a3 	rbit	r3, r3
 8005546:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 800554a:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800554e:	fab3 f383 	clz	r3, r3
 8005552:	b2db      	uxtb	r3, r3
 8005554:	095b      	lsrs	r3, r3, #5
 8005556:	b2db      	uxtb	r3, r3
 8005558:	f043 0301 	orr.w	r3, r3, #1
 800555c:	b2db      	uxtb	r3, r3
 800555e:	2b01      	cmp	r3, #1
 8005560:	d102      	bne.n	8005568 <HAL_RCC_OscConfig+0x218>
 8005562:	4b47      	ldr	r3, [pc, #284]	; (8005680 <HAL_RCC_OscConfig+0x330>)
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	e015      	b.n	8005594 <HAL_RCC_OscConfig+0x244>
 8005568:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800556c:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005570:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8005574:	fa93 f3a3 	rbit	r3, r3
 8005578:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 800557c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005580:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8005584:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8005588:	fa93 f3a3 	rbit	r3, r3
 800558c:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8005590:	4b3b      	ldr	r3, [pc, #236]	; (8005680 <HAL_RCC_OscConfig+0x330>)
 8005592:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005594:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8005598:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 800559c:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 80055a0:	fa92 f2a2 	rbit	r2, r2
 80055a4:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 80055a8:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 80055ac:	fab2 f282 	clz	r2, r2
 80055b0:	b2d2      	uxtb	r2, r2
 80055b2:	f042 0220 	orr.w	r2, r2, #32
 80055b6:	b2d2      	uxtb	r2, r2
 80055b8:	f002 021f 	and.w	r2, r2, #31
 80055bc:	2101      	movs	r1, #1
 80055be:	fa01 f202 	lsl.w	r2, r1, r2
 80055c2:	4013      	ands	r3, r2
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d0ab      	beq.n	8005520 <HAL_RCC_OscConfig+0x1d0>
 80055c8:	e05d      	b.n	8005686 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80055ca:	f7fd fe79 	bl	80032c0 <HAL_GetTick>
 80055ce:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80055d2:	e00a      	b.n	80055ea <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80055d4:	f7fd fe74 	bl	80032c0 <HAL_GetTick>
 80055d8:	4602      	mov	r2, r0
 80055da:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80055de:	1ad3      	subs	r3, r2, r3
 80055e0:	2b64      	cmp	r3, #100	; 0x64
 80055e2:	d902      	bls.n	80055ea <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 80055e4:	2303      	movs	r3, #3
 80055e6:	f000 bee9 	b.w	80063bc <HAL_RCC_OscConfig+0x106c>
 80055ea:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80055ee:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80055f2:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 80055f6:	fa93 f3a3 	rbit	r3, r3
 80055fa:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 80055fe:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005602:	fab3 f383 	clz	r3, r3
 8005606:	b2db      	uxtb	r3, r3
 8005608:	095b      	lsrs	r3, r3, #5
 800560a:	b2db      	uxtb	r3, r3
 800560c:	f043 0301 	orr.w	r3, r3, #1
 8005610:	b2db      	uxtb	r3, r3
 8005612:	2b01      	cmp	r3, #1
 8005614:	d102      	bne.n	800561c <HAL_RCC_OscConfig+0x2cc>
 8005616:	4b1a      	ldr	r3, [pc, #104]	; (8005680 <HAL_RCC_OscConfig+0x330>)
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	e015      	b.n	8005648 <HAL_RCC_OscConfig+0x2f8>
 800561c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005620:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005624:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8005628:	fa93 f3a3 	rbit	r3, r3
 800562c:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8005630:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005634:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8005638:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 800563c:	fa93 f3a3 	rbit	r3, r3
 8005640:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8005644:	4b0e      	ldr	r3, [pc, #56]	; (8005680 <HAL_RCC_OscConfig+0x330>)
 8005646:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005648:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800564c:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8005650:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8005654:	fa92 f2a2 	rbit	r2, r2
 8005658:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 800565c:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8005660:	fab2 f282 	clz	r2, r2
 8005664:	b2d2      	uxtb	r2, r2
 8005666:	f042 0220 	orr.w	r2, r2, #32
 800566a:	b2d2      	uxtb	r2, r2
 800566c:	f002 021f 	and.w	r2, r2, #31
 8005670:	2101      	movs	r1, #1
 8005672:	fa01 f202 	lsl.w	r2, r1, r2
 8005676:	4013      	ands	r3, r2
 8005678:	2b00      	cmp	r3, #0
 800567a:	d1ab      	bne.n	80055d4 <HAL_RCC_OscConfig+0x284>
 800567c:	e003      	b.n	8005686 <HAL_RCC_OscConfig+0x336>
 800567e:	bf00      	nop
 8005680:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005684:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005686:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800568a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	f003 0302 	and.w	r3, r3, #2
 8005696:	2b00      	cmp	r3, #0
 8005698:	f000 817d 	beq.w	8005996 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800569c:	4ba6      	ldr	r3, [pc, #664]	; (8005938 <HAL_RCC_OscConfig+0x5e8>)
 800569e:	685b      	ldr	r3, [r3, #4]
 80056a0:	f003 030c 	and.w	r3, r3, #12
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d00b      	beq.n	80056c0 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80056a8:	4ba3      	ldr	r3, [pc, #652]	; (8005938 <HAL_RCC_OscConfig+0x5e8>)
 80056aa:	685b      	ldr	r3, [r3, #4]
 80056ac:	f003 030c 	and.w	r3, r3, #12
 80056b0:	2b08      	cmp	r3, #8
 80056b2:	d172      	bne.n	800579a <HAL_RCC_OscConfig+0x44a>
 80056b4:	4ba0      	ldr	r3, [pc, #640]	; (8005938 <HAL_RCC_OscConfig+0x5e8>)
 80056b6:	685b      	ldr	r3, [r3, #4]
 80056b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d16c      	bne.n	800579a <HAL_RCC_OscConfig+0x44a>
 80056c0:	2302      	movs	r3, #2
 80056c2:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80056c6:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 80056ca:	fa93 f3a3 	rbit	r3, r3
 80056ce:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 80056d2:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80056d6:	fab3 f383 	clz	r3, r3
 80056da:	b2db      	uxtb	r3, r3
 80056dc:	095b      	lsrs	r3, r3, #5
 80056de:	b2db      	uxtb	r3, r3
 80056e0:	f043 0301 	orr.w	r3, r3, #1
 80056e4:	b2db      	uxtb	r3, r3
 80056e6:	2b01      	cmp	r3, #1
 80056e8:	d102      	bne.n	80056f0 <HAL_RCC_OscConfig+0x3a0>
 80056ea:	4b93      	ldr	r3, [pc, #588]	; (8005938 <HAL_RCC_OscConfig+0x5e8>)
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	e013      	b.n	8005718 <HAL_RCC_OscConfig+0x3c8>
 80056f0:	2302      	movs	r3, #2
 80056f2:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80056f6:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 80056fa:	fa93 f3a3 	rbit	r3, r3
 80056fe:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8005702:	2302      	movs	r3, #2
 8005704:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8005708:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800570c:	fa93 f3a3 	rbit	r3, r3
 8005710:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8005714:	4b88      	ldr	r3, [pc, #544]	; (8005938 <HAL_RCC_OscConfig+0x5e8>)
 8005716:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005718:	2202      	movs	r2, #2
 800571a:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 800571e:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8005722:	fa92 f2a2 	rbit	r2, r2
 8005726:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 800572a:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 800572e:	fab2 f282 	clz	r2, r2
 8005732:	b2d2      	uxtb	r2, r2
 8005734:	f042 0220 	orr.w	r2, r2, #32
 8005738:	b2d2      	uxtb	r2, r2
 800573a:	f002 021f 	and.w	r2, r2, #31
 800573e:	2101      	movs	r1, #1
 8005740:	fa01 f202 	lsl.w	r2, r1, r2
 8005744:	4013      	ands	r3, r2
 8005746:	2b00      	cmp	r3, #0
 8005748:	d00a      	beq.n	8005760 <HAL_RCC_OscConfig+0x410>
 800574a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800574e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	691b      	ldr	r3, [r3, #16]
 8005756:	2b01      	cmp	r3, #1
 8005758:	d002      	beq.n	8005760 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 800575a:	2301      	movs	r3, #1
 800575c:	f000 be2e 	b.w	80063bc <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005760:	4b75      	ldr	r3, [pc, #468]	; (8005938 <HAL_RCC_OscConfig+0x5e8>)
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005768:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800576c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	695b      	ldr	r3, [r3, #20]
 8005774:	21f8      	movs	r1, #248	; 0xf8
 8005776:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800577a:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 800577e:	fa91 f1a1 	rbit	r1, r1
 8005782:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8005786:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 800578a:	fab1 f181 	clz	r1, r1
 800578e:	b2c9      	uxtb	r1, r1
 8005790:	408b      	lsls	r3, r1
 8005792:	4969      	ldr	r1, [pc, #420]	; (8005938 <HAL_RCC_OscConfig+0x5e8>)
 8005794:	4313      	orrs	r3, r2
 8005796:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005798:	e0fd      	b.n	8005996 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800579a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800579e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	691b      	ldr	r3, [r3, #16]
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	f000 8088 	beq.w	80058bc <HAL_RCC_OscConfig+0x56c>
 80057ac:	2301      	movs	r3, #1
 80057ae:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80057b2:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 80057b6:	fa93 f3a3 	rbit	r3, r3
 80057ba:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 80057be:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80057c2:	fab3 f383 	clz	r3, r3
 80057c6:	b2db      	uxtb	r3, r3
 80057c8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80057cc:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80057d0:	009b      	lsls	r3, r3, #2
 80057d2:	461a      	mov	r2, r3
 80057d4:	2301      	movs	r3, #1
 80057d6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80057d8:	f7fd fd72 	bl	80032c0 <HAL_GetTick>
 80057dc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80057e0:	e00a      	b.n	80057f8 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80057e2:	f7fd fd6d 	bl	80032c0 <HAL_GetTick>
 80057e6:	4602      	mov	r2, r0
 80057e8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80057ec:	1ad3      	subs	r3, r2, r3
 80057ee:	2b02      	cmp	r3, #2
 80057f0:	d902      	bls.n	80057f8 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 80057f2:	2303      	movs	r3, #3
 80057f4:	f000 bde2 	b.w	80063bc <HAL_RCC_OscConfig+0x106c>
 80057f8:	2302      	movs	r3, #2
 80057fa:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80057fe:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8005802:	fa93 f3a3 	rbit	r3, r3
 8005806:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 800580a:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800580e:	fab3 f383 	clz	r3, r3
 8005812:	b2db      	uxtb	r3, r3
 8005814:	095b      	lsrs	r3, r3, #5
 8005816:	b2db      	uxtb	r3, r3
 8005818:	f043 0301 	orr.w	r3, r3, #1
 800581c:	b2db      	uxtb	r3, r3
 800581e:	2b01      	cmp	r3, #1
 8005820:	d102      	bne.n	8005828 <HAL_RCC_OscConfig+0x4d8>
 8005822:	4b45      	ldr	r3, [pc, #276]	; (8005938 <HAL_RCC_OscConfig+0x5e8>)
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	e013      	b.n	8005850 <HAL_RCC_OscConfig+0x500>
 8005828:	2302      	movs	r3, #2
 800582a:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800582e:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8005832:	fa93 f3a3 	rbit	r3, r3
 8005836:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 800583a:	2302      	movs	r3, #2
 800583c:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8005840:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8005844:	fa93 f3a3 	rbit	r3, r3
 8005848:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 800584c:	4b3a      	ldr	r3, [pc, #232]	; (8005938 <HAL_RCC_OscConfig+0x5e8>)
 800584e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005850:	2202      	movs	r2, #2
 8005852:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8005856:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800585a:	fa92 f2a2 	rbit	r2, r2
 800585e:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8005862:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8005866:	fab2 f282 	clz	r2, r2
 800586a:	b2d2      	uxtb	r2, r2
 800586c:	f042 0220 	orr.w	r2, r2, #32
 8005870:	b2d2      	uxtb	r2, r2
 8005872:	f002 021f 	and.w	r2, r2, #31
 8005876:	2101      	movs	r1, #1
 8005878:	fa01 f202 	lsl.w	r2, r1, r2
 800587c:	4013      	ands	r3, r2
 800587e:	2b00      	cmp	r3, #0
 8005880:	d0af      	beq.n	80057e2 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005882:	4b2d      	ldr	r3, [pc, #180]	; (8005938 <HAL_RCC_OscConfig+0x5e8>)
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800588a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800588e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	695b      	ldr	r3, [r3, #20]
 8005896:	21f8      	movs	r1, #248	; 0xf8
 8005898:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800589c:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80058a0:	fa91 f1a1 	rbit	r1, r1
 80058a4:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 80058a8:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 80058ac:	fab1 f181 	clz	r1, r1
 80058b0:	b2c9      	uxtb	r1, r1
 80058b2:	408b      	lsls	r3, r1
 80058b4:	4920      	ldr	r1, [pc, #128]	; (8005938 <HAL_RCC_OscConfig+0x5e8>)
 80058b6:	4313      	orrs	r3, r2
 80058b8:	600b      	str	r3, [r1, #0]
 80058ba:	e06c      	b.n	8005996 <HAL_RCC_OscConfig+0x646>
 80058bc:	2301      	movs	r3, #1
 80058be:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80058c2:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80058c6:	fa93 f3a3 	rbit	r3, r3
 80058ca:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 80058ce:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80058d2:	fab3 f383 	clz	r3, r3
 80058d6:	b2db      	uxtb	r3, r3
 80058d8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80058dc:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80058e0:	009b      	lsls	r3, r3, #2
 80058e2:	461a      	mov	r2, r3
 80058e4:	2300      	movs	r3, #0
 80058e6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80058e8:	f7fd fcea 	bl	80032c0 <HAL_GetTick>
 80058ec:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80058f0:	e00a      	b.n	8005908 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80058f2:	f7fd fce5 	bl	80032c0 <HAL_GetTick>
 80058f6:	4602      	mov	r2, r0
 80058f8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80058fc:	1ad3      	subs	r3, r2, r3
 80058fe:	2b02      	cmp	r3, #2
 8005900:	d902      	bls.n	8005908 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8005902:	2303      	movs	r3, #3
 8005904:	f000 bd5a 	b.w	80063bc <HAL_RCC_OscConfig+0x106c>
 8005908:	2302      	movs	r3, #2
 800590a:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800590e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8005912:	fa93 f3a3 	rbit	r3, r3
 8005916:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 800591a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800591e:	fab3 f383 	clz	r3, r3
 8005922:	b2db      	uxtb	r3, r3
 8005924:	095b      	lsrs	r3, r3, #5
 8005926:	b2db      	uxtb	r3, r3
 8005928:	f043 0301 	orr.w	r3, r3, #1
 800592c:	b2db      	uxtb	r3, r3
 800592e:	2b01      	cmp	r3, #1
 8005930:	d104      	bne.n	800593c <HAL_RCC_OscConfig+0x5ec>
 8005932:	4b01      	ldr	r3, [pc, #4]	; (8005938 <HAL_RCC_OscConfig+0x5e8>)
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	e015      	b.n	8005964 <HAL_RCC_OscConfig+0x614>
 8005938:	40021000 	.word	0x40021000
 800593c:	2302      	movs	r3, #2
 800593e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005942:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005946:	fa93 f3a3 	rbit	r3, r3
 800594a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800594e:	2302      	movs	r3, #2
 8005950:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8005954:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8005958:	fa93 f3a3 	rbit	r3, r3
 800595c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8005960:	4bc8      	ldr	r3, [pc, #800]	; (8005c84 <HAL_RCC_OscConfig+0x934>)
 8005962:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005964:	2202      	movs	r2, #2
 8005966:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 800596a:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 800596e:	fa92 f2a2 	rbit	r2, r2
 8005972:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8005976:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 800597a:	fab2 f282 	clz	r2, r2
 800597e:	b2d2      	uxtb	r2, r2
 8005980:	f042 0220 	orr.w	r2, r2, #32
 8005984:	b2d2      	uxtb	r2, r2
 8005986:	f002 021f 	and.w	r2, r2, #31
 800598a:	2101      	movs	r1, #1
 800598c:	fa01 f202 	lsl.w	r2, r1, r2
 8005990:	4013      	ands	r3, r2
 8005992:	2b00      	cmp	r3, #0
 8005994:	d1ad      	bne.n	80058f2 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005996:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800599a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	f003 0308 	and.w	r3, r3, #8
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	f000 8110 	beq.w	8005bcc <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80059ac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80059b0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	699b      	ldr	r3, [r3, #24]
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d079      	beq.n	8005ab0 <HAL_RCC_OscConfig+0x760>
 80059bc:	2301      	movs	r3, #1
 80059be:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80059c2:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80059c6:	fa93 f3a3 	rbit	r3, r3
 80059ca:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 80059ce:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80059d2:	fab3 f383 	clz	r3, r3
 80059d6:	b2db      	uxtb	r3, r3
 80059d8:	461a      	mov	r2, r3
 80059da:	4bab      	ldr	r3, [pc, #684]	; (8005c88 <HAL_RCC_OscConfig+0x938>)
 80059dc:	4413      	add	r3, r2
 80059de:	009b      	lsls	r3, r3, #2
 80059e0:	461a      	mov	r2, r3
 80059e2:	2301      	movs	r3, #1
 80059e4:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80059e6:	f7fd fc6b 	bl	80032c0 <HAL_GetTick>
 80059ea:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80059ee:	e00a      	b.n	8005a06 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80059f0:	f7fd fc66 	bl	80032c0 <HAL_GetTick>
 80059f4:	4602      	mov	r2, r0
 80059f6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80059fa:	1ad3      	subs	r3, r2, r3
 80059fc:	2b02      	cmp	r3, #2
 80059fe:	d902      	bls.n	8005a06 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8005a00:	2303      	movs	r3, #3
 8005a02:	f000 bcdb 	b.w	80063bc <HAL_RCC_OscConfig+0x106c>
 8005a06:	2302      	movs	r3, #2
 8005a08:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005a0c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005a10:	fa93 f3a3 	rbit	r3, r3
 8005a14:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8005a18:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005a1c:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8005a20:	2202      	movs	r2, #2
 8005a22:	601a      	str	r2, [r3, #0]
 8005a24:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005a28:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	fa93 f2a3 	rbit	r2, r3
 8005a32:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005a36:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005a3a:	601a      	str	r2, [r3, #0]
 8005a3c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005a40:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005a44:	2202      	movs	r2, #2
 8005a46:	601a      	str	r2, [r3, #0]
 8005a48:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005a4c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	fa93 f2a3 	rbit	r2, r3
 8005a56:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005a5a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8005a5e:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005a60:	4b88      	ldr	r3, [pc, #544]	; (8005c84 <HAL_RCC_OscConfig+0x934>)
 8005a62:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005a64:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005a68:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8005a6c:	2102      	movs	r1, #2
 8005a6e:	6019      	str	r1, [r3, #0]
 8005a70:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005a74:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	fa93 f1a3 	rbit	r1, r3
 8005a7e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005a82:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8005a86:	6019      	str	r1, [r3, #0]
  return result;
 8005a88:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005a8c:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	fab3 f383 	clz	r3, r3
 8005a96:	b2db      	uxtb	r3, r3
 8005a98:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8005a9c:	b2db      	uxtb	r3, r3
 8005a9e:	f003 031f 	and.w	r3, r3, #31
 8005aa2:	2101      	movs	r1, #1
 8005aa4:	fa01 f303 	lsl.w	r3, r1, r3
 8005aa8:	4013      	ands	r3, r2
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d0a0      	beq.n	80059f0 <HAL_RCC_OscConfig+0x6a0>
 8005aae:	e08d      	b.n	8005bcc <HAL_RCC_OscConfig+0x87c>
 8005ab0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005ab4:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8005ab8:	2201      	movs	r2, #1
 8005aba:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005abc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005ac0:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	fa93 f2a3 	rbit	r2, r3
 8005aca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005ace:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8005ad2:	601a      	str	r2, [r3, #0]
  return result;
 8005ad4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005ad8:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8005adc:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005ade:	fab3 f383 	clz	r3, r3
 8005ae2:	b2db      	uxtb	r3, r3
 8005ae4:	461a      	mov	r2, r3
 8005ae6:	4b68      	ldr	r3, [pc, #416]	; (8005c88 <HAL_RCC_OscConfig+0x938>)
 8005ae8:	4413      	add	r3, r2
 8005aea:	009b      	lsls	r3, r3, #2
 8005aec:	461a      	mov	r2, r3
 8005aee:	2300      	movs	r3, #0
 8005af0:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005af2:	f7fd fbe5 	bl	80032c0 <HAL_GetTick>
 8005af6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005afa:	e00a      	b.n	8005b12 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005afc:	f7fd fbe0 	bl	80032c0 <HAL_GetTick>
 8005b00:	4602      	mov	r2, r0
 8005b02:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005b06:	1ad3      	subs	r3, r2, r3
 8005b08:	2b02      	cmp	r3, #2
 8005b0a:	d902      	bls.n	8005b12 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8005b0c:	2303      	movs	r3, #3
 8005b0e:	f000 bc55 	b.w	80063bc <HAL_RCC_OscConfig+0x106c>
 8005b12:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005b16:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8005b1a:	2202      	movs	r2, #2
 8005b1c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005b1e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005b22:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	fa93 f2a3 	rbit	r2, r3
 8005b2c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005b30:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8005b34:	601a      	str	r2, [r3, #0]
 8005b36:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005b3a:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8005b3e:	2202      	movs	r2, #2
 8005b40:	601a      	str	r2, [r3, #0]
 8005b42:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005b46:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	fa93 f2a3 	rbit	r2, r3
 8005b50:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005b54:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005b58:	601a      	str	r2, [r3, #0]
 8005b5a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005b5e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005b62:	2202      	movs	r2, #2
 8005b64:	601a      	str	r2, [r3, #0]
 8005b66:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005b6a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	fa93 f2a3 	rbit	r2, r3
 8005b74:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005b78:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8005b7c:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005b7e:	4b41      	ldr	r3, [pc, #260]	; (8005c84 <HAL_RCC_OscConfig+0x934>)
 8005b80:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005b82:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005b86:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8005b8a:	2102      	movs	r1, #2
 8005b8c:	6019      	str	r1, [r3, #0]
 8005b8e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005b92:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	fa93 f1a3 	rbit	r1, r3
 8005b9c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005ba0:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8005ba4:	6019      	str	r1, [r3, #0]
  return result;
 8005ba6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005baa:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	fab3 f383 	clz	r3, r3
 8005bb4:	b2db      	uxtb	r3, r3
 8005bb6:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8005bba:	b2db      	uxtb	r3, r3
 8005bbc:	f003 031f 	and.w	r3, r3, #31
 8005bc0:	2101      	movs	r1, #1
 8005bc2:	fa01 f303 	lsl.w	r3, r1, r3
 8005bc6:	4013      	ands	r3, r2
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d197      	bne.n	8005afc <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005bcc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005bd0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	f003 0304 	and.w	r3, r3, #4
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	f000 81a1 	beq.w	8005f24 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005be2:	2300      	movs	r3, #0
 8005be4:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005be8:	4b26      	ldr	r3, [pc, #152]	; (8005c84 <HAL_RCC_OscConfig+0x934>)
 8005bea:	69db      	ldr	r3, [r3, #28]
 8005bec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d116      	bne.n	8005c22 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005bf4:	4b23      	ldr	r3, [pc, #140]	; (8005c84 <HAL_RCC_OscConfig+0x934>)
 8005bf6:	69db      	ldr	r3, [r3, #28]
 8005bf8:	4a22      	ldr	r2, [pc, #136]	; (8005c84 <HAL_RCC_OscConfig+0x934>)
 8005bfa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005bfe:	61d3      	str	r3, [r2, #28]
 8005c00:	4b20      	ldr	r3, [pc, #128]	; (8005c84 <HAL_RCC_OscConfig+0x934>)
 8005c02:	69db      	ldr	r3, [r3, #28]
 8005c04:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8005c08:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005c0c:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8005c10:	601a      	str	r2, [r3, #0]
 8005c12:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005c16:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8005c1a:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8005c1c:	2301      	movs	r3, #1
 8005c1e:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005c22:	4b1a      	ldr	r3, [pc, #104]	; (8005c8c <HAL_RCC_OscConfig+0x93c>)
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d11a      	bne.n	8005c64 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005c2e:	4b17      	ldr	r3, [pc, #92]	; (8005c8c <HAL_RCC_OscConfig+0x93c>)
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	4a16      	ldr	r2, [pc, #88]	; (8005c8c <HAL_RCC_OscConfig+0x93c>)
 8005c34:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005c38:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005c3a:	f7fd fb41 	bl	80032c0 <HAL_GetTick>
 8005c3e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005c42:	e009      	b.n	8005c58 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005c44:	f7fd fb3c 	bl	80032c0 <HAL_GetTick>
 8005c48:	4602      	mov	r2, r0
 8005c4a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005c4e:	1ad3      	subs	r3, r2, r3
 8005c50:	2b64      	cmp	r3, #100	; 0x64
 8005c52:	d901      	bls.n	8005c58 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8005c54:	2303      	movs	r3, #3
 8005c56:	e3b1      	b.n	80063bc <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005c58:	4b0c      	ldr	r3, [pc, #48]	; (8005c8c <HAL_RCC_OscConfig+0x93c>)
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d0ef      	beq.n	8005c44 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005c64:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005c68:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	68db      	ldr	r3, [r3, #12]
 8005c70:	2b01      	cmp	r3, #1
 8005c72:	d10d      	bne.n	8005c90 <HAL_RCC_OscConfig+0x940>
 8005c74:	4b03      	ldr	r3, [pc, #12]	; (8005c84 <HAL_RCC_OscConfig+0x934>)
 8005c76:	6a1b      	ldr	r3, [r3, #32]
 8005c78:	4a02      	ldr	r2, [pc, #8]	; (8005c84 <HAL_RCC_OscConfig+0x934>)
 8005c7a:	f043 0301 	orr.w	r3, r3, #1
 8005c7e:	6213      	str	r3, [r2, #32]
 8005c80:	e03c      	b.n	8005cfc <HAL_RCC_OscConfig+0x9ac>
 8005c82:	bf00      	nop
 8005c84:	40021000 	.word	0x40021000
 8005c88:	10908120 	.word	0x10908120
 8005c8c:	40007000 	.word	0x40007000
 8005c90:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005c94:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	68db      	ldr	r3, [r3, #12]
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d10c      	bne.n	8005cba <HAL_RCC_OscConfig+0x96a>
 8005ca0:	4bc1      	ldr	r3, [pc, #772]	; (8005fa8 <HAL_RCC_OscConfig+0xc58>)
 8005ca2:	6a1b      	ldr	r3, [r3, #32]
 8005ca4:	4ac0      	ldr	r2, [pc, #768]	; (8005fa8 <HAL_RCC_OscConfig+0xc58>)
 8005ca6:	f023 0301 	bic.w	r3, r3, #1
 8005caa:	6213      	str	r3, [r2, #32]
 8005cac:	4bbe      	ldr	r3, [pc, #760]	; (8005fa8 <HAL_RCC_OscConfig+0xc58>)
 8005cae:	6a1b      	ldr	r3, [r3, #32]
 8005cb0:	4abd      	ldr	r2, [pc, #756]	; (8005fa8 <HAL_RCC_OscConfig+0xc58>)
 8005cb2:	f023 0304 	bic.w	r3, r3, #4
 8005cb6:	6213      	str	r3, [r2, #32]
 8005cb8:	e020      	b.n	8005cfc <HAL_RCC_OscConfig+0x9ac>
 8005cba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005cbe:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	68db      	ldr	r3, [r3, #12]
 8005cc6:	2b05      	cmp	r3, #5
 8005cc8:	d10c      	bne.n	8005ce4 <HAL_RCC_OscConfig+0x994>
 8005cca:	4bb7      	ldr	r3, [pc, #732]	; (8005fa8 <HAL_RCC_OscConfig+0xc58>)
 8005ccc:	6a1b      	ldr	r3, [r3, #32]
 8005cce:	4ab6      	ldr	r2, [pc, #728]	; (8005fa8 <HAL_RCC_OscConfig+0xc58>)
 8005cd0:	f043 0304 	orr.w	r3, r3, #4
 8005cd4:	6213      	str	r3, [r2, #32]
 8005cd6:	4bb4      	ldr	r3, [pc, #720]	; (8005fa8 <HAL_RCC_OscConfig+0xc58>)
 8005cd8:	6a1b      	ldr	r3, [r3, #32]
 8005cda:	4ab3      	ldr	r2, [pc, #716]	; (8005fa8 <HAL_RCC_OscConfig+0xc58>)
 8005cdc:	f043 0301 	orr.w	r3, r3, #1
 8005ce0:	6213      	str	r3, [r2, #32]
 8005ce2:	e00b      	b.n	8005cfc <HAL_RCC_OscConfig+0x9ac>
 8005ce4:	4bb0      	ldr	r3, [pc, #704]	; (8005fa8 <HAL_RCC_OscConfig+0xc58>)
 8005ce6:	6a1b      	ldr	r3, [r3, #32]
 8005ce8:	4aaf      	ldr	r2, [pc, #700]	; (8005fa8 <HAL_RCC_OscConfig+0xc58>)
 8005cea:	f023 0301 	bic.w	r3, r3, #1
 8005cee:	6213      	str	r3, [r2, #32]
 8005cf0:	4bad      	ldr	r3, [pc, #692]	; (8005fa8 <HAL_RCC_OscConfig+0xc58>)
 8005cf2:	6a1b      	ldr	r3, [r3, #32]
 8005cf4:	4aac      	ldr	r2, [pc, #688]	; (8005fa8 <HAL_RCC_OscConfig+0xc58>)
 8005cf6:	f023 0304 	bic.w	r3, r3, #4
 8005cfa:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005cfc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005d00:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	68db      	ldr	r3, [r3, #12]
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	f000 8081 	beq.w	8005e10 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005d0e:	f7fd fad7 	bl	80032c0 <HAL_GetTick>
 8005d12:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005d16:	e00b      	b.n	8005d30 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005d18:	f7fd fad2 	bl	80032c0 <HAL_GetTick>
 8005d1c:	4602      	mov	r2, r0
 8005d1e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005d22:	1ad3      	subs	r3, r2, r3
 8005d24:	f241 3288 	movw	r2, #5000	; 0x1388
 8005d28:	4293      	cmp	r3, r2
 8005d2a:	d901      	bls.n	8005d30 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8005d2c:	2303      	movs	r3, #3
 8005d2e:	e345      	b.n	80063bc <HAL_RCC_OscConfig+0x106c>
 8005d30:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005d34:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8005d38:	2202      	movs	r2, #2
 8005d3a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005d3c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005d40:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	fa93 f2a3 	rbit	r2, r3
 8005d4a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005d4e:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8005d52:	601a      	str	r2, [r3, #0]
 8005d54:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005d58:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8005d5c:	2202      	movs	r2, #2
 8005d5e:	601a      	str	r2, [r3, #0]
 8005d60:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005d64:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	fa93 f2a3 	rbit	r2, r3
 8005d6e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005d72:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8005d76:	601a      	str	r2, [r3, #0]
  return result;
 8005d78:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005d7c:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8005d80:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005d82:	fab3 f383 	clz	r3, r3
 8005d86:	b2db      	uxtb	r3, r3
 8005d88:	095b      	lsrs	r3, r3, #5
 8005d8a:	b2db      	uxtb	r3, r3
 8005d8c:	f043 0302 	orr.w	r3, r3, #2
 8005d90:	b2db      	uxtb	r3, r3
 8005d92:	2b02      	cmp	r3, #2
 8005d94:	d102      	bne.n	8005d9c <HAL_RCC_OscConfig+0xa4c>
 8005d96:	4b84      	ldr	r3, [pc, #528]	; (8005fa8 <HAL_RCC_OscConfig+0xc58>)
 8005d98:	6a1b      	ldr	r3, [r3, #32]
 8005d9a:	e013      	b.n	8005dc4 <HAL_RCC_OscConfig+0xa74>
 8005d9c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005da0:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8005da4:	2202      	movs	r2, #2
 8005da6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005da8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005dac:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	fa93 f2a3 	rbit	r2, r3
 8005db6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005dba:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8005dbe:	601a      	str	r2, [r3, #0]
 8005dc0:	4b79      	ldr	r3, [pc, #484]	; (8005fa8 <HAL_RCC_OscConfig+0xc58>)
 8005dc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dc4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005dc8:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8005dcc:	2102      	movs	r1, #2
 8005dce:	6011      	str	r1, [r2, #0]
 8005dd0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005dd4:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8005dd8:	6812      	ldr	r2, [r2, #0]
 8005dda:	fa92 f1a2 	rbit	r1, r2
 8005dde:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005de2:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8005de6:	6011      	str	r1, [r2, #0]
  return result;
 8005de8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005dec:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8005df0:	6812      	ldr	r2, [r2, #0]
 8005df2:	fab2 f282 	clz	r2, r2
 8005df6:	b2d2      	uxtb	r2, r2
 8005df8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005dfc:	b2d2      	uxtb	r2, r2
 8005dfe:	f002 021f 	and.w	r2, r2, #31
 8005e02:	2101      	movs	r1, #1
 8005e04:	fa01 f202 	lsl.w	r2, r1, r2
 8005e08:	4013      	ands	r3, r2
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d084      	beq.n	8005d18 <HAL_RCC_OscConfig+0x9c8>
 8005e0e:	e07f      	b.n	8005f10 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005e10:	f7fd fa56 	bl	80032c0 <HAL_GetTick>
 8005e14:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005e18:	e00b      	b.n	8005e32 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005e1a:	f7fd fa51 	bl	80032c0 <HAL_GetTick>
 8005e1e:	4602      	mov	r2, r0
 8005e20:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005e24:	1ad3      	subs	r3, r2, r3
 8005e26:	f241 3288 	movw	r2, #5000	; 0x1388
 8005e2a:	4293      	cmp	r3, r2
 8005e2c:	d901      	bls.n	8005e32 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8005e2e:	2303      	movs	r3, #3
 8005e30:	e2c4      	b.n	80063bc <HAL_RCC_OscConfig+0x106c>
 8005e32:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005e36:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8005e3a:	2202      	movs	r2, #2
 8005e3c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005e3e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005e42:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	fa93 f2a3 	rbit	r2, r3
 8005e4c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005e50:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8005e54:	601a      	str	r2, [r3, #0]
 8005e56:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005e5a:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8005e5e:	2202      	movs	r2, #2
 8005e60:	601a      	str	r2, [r3, #0]
 8005e62:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005e66:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	fa93 f2a3 	rbit	r2, r3
 8005e70:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005e74:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8005e78:	601a      	str	r2, [r3, #0]
  return result;
 8005e7a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005e7e:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8005e82:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005e84:	fab3 f383 	clz	r3, r3
 8005e88:	b2db      	uxtb	r3, r3
 8005e8a:	095b      	lsrs	r3, r3, #5
 8005e8c:	b2db      	uxtb	r3, r3
 8005e8e:	f043 0302 	orr.w	r3, r3, #2
 8005e92:	b2db      	uxtb	r3, r3
 8005e94:	2b02      	cmp	r3, #2
 8005e96:	d102      	bne.n	8005e9e <HAL_RCC_OscConfig+0xb4e>
 8005e98:	4b43      	ldr	r3, [pc, #268]	; (8005fa8 <HAL_RCC_OscConfig+0xc58>)
 8005e9a:	6a1b      	ldr	r3, [r3, #32]
 8005e9c:	e013      	b.n	8005ec6 <HAL_RCC_OscConfig+0xb76>
 8005e9e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005ea2:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8005ea6:	2202      	movs	r2, #2
 8005ea8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005eaa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005eae:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	fa93 f2a3 	rbit	r2, r3
 8005eb8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005ebc:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8005ec0:	601a      	str	r2, [r3, #0]
 8005ec2:	4b39      	ldr	r3, [pc, #228]	; (8005fa8 <HAL_RCC_OscConfig+0xc58>)
 8005ec4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ec6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005eca:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8005ece:	2102      	movs	r1, #2
 8005ed0:	6011      	str	r1, [r2, #0]
 8005ed2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005ed6:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8005eda:	6812      	ldr	r2, [r2, #0]
 8005edc:	fa92 f1a2 	rbit	r1, r2
 8005ee0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005ee4:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8005ee8:	6011      	str	r1, [r2, #0]
  return result;
 8005eea:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005eee:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8005ef2:	6812      	ldr	r2, [r2, #0]
 8005ef4:	fab2 f282 	clz	r2, r2
 8005ef8:	b2d2      	uxtb	r2, r2
 8005efa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005efe:	b2d2      	uxtb	r2, r2
 8005f00:	f002 021f 	and.w	r2, r2, #31
 8005f04:	2101      	movs	r1, #1
 8005f06:	fa01 f202 	lsl.w	r2, r1, r2
 8005f0a:	4013      	ands	r3, r2
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d184      	bne.n	8005e1a <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8005f10:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8005f14:	2b01      	cmp	r3, #1
 8005f16:	d105      	bne.n	8005f24 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005f18:	4b23      	ldr	r3, [pc, #140]	; (8005fa8 <HAL_RCC_OscConfig+0xc58>)
 8005f1a:	69db      	ldr	r3, [r3, #28]
 8005f1c:	4a22      	ldr	r2, [pc, #136]	; (8005fa8 <HAL_RCC_OscConfig+0xc58>)
 8005f1e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005f22:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005f24:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005f28:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	69db      	ldr	r3, [r3, #28]
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	f000 8242 	beq.w	80063ba <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005f36:	4b1c      	ldr	r3, [pc, #112]	; (8005fa8 <HAL_RCC_OscConfig+0xc58>)
 8005f38:	685b      	ldr	r3, [r3, #4]
 8005f3a:	f003 030c 	and.w	r3, r3, #12
 8005f3e:	2b08      	cmp	r3, #8
 8005f40:	f000 8213 	beq.w	800636a <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005f44:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005f48:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	69db      	ldr	r3, [r3, #28]
 8005f50:	2b02      	cmp	r3, #2
 8005f52:	f040 8162 	bne.w	800621a <HAL_RCC_OscConfig+0xeca>
 8005f56:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005f5a:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8005f5e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005f62:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005f64:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005f68:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	fa93 f2a3 	rbit	r2, r3
 8005f72:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005f76:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8005f7a:	601a      	str	r2, [r3, #0]
  return result;
 8005f7c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005f80:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8005f84:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005f86:	fab3 f383 	clz	r3, r3
 8005f8a:	b2db      	uxtb	r3, r3
 8005f8c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8005f90:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8005f94:	009b      	lsls	r3, r3, #2
 8005f96:	461a      	mov	r2, r3
 8005f98:	2300      	movs	r3, #0
 8005f9a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005f9c:	f7fd f990 	bl	80032c0 <HAL_GetTick>
 8005fa0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005fa4:	e00c      	b.n	8005fc0 <HAL_RCC_OscConfig+0xc70>
 8005fa6:	bf00      	nop
 8005fa8:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005fac:	f7fd f988 	bl	80032c0 <HAL_GetTick>
 8005fb0:	4602      	mov	r2, r0
 8005fb2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005fb6:	1ad3      	subs	r3, r2, r3
 8005fb8:	2b02      	cmp	r3, #2
 8005fba:	d901      	bls.n	8005fc0 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8005fbc:	2303      	movs	r3, #3
 8005fbe:	e1fd      	b.n	80063bc <HAL_RCC_OscConfig+0x106c>
 8005fc0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005fc4:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8005fc8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005fcc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005fce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005fd2:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	fa93 f2a3 	rbit	r2, r3
 8005fdc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005fe0:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8005fe4:	601a      	str	r2, [r3, #0]
  return result;
 8005fe6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005fea:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8005fee:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005ff0:	fab3 f383 	clz	r3, r3
 8005ff4:	b2db      	uxtb	r3, r3
 8005ff6:	095b      	lsrs	r3, r3, #5
 8005ff8:	b2db      	uxtb	r3, r3
 8005ffa:	f043 0301 	orr.w	r3, r3, #1
 8005ffe:	b2db      	uxtb	r3, r3
 8006000:	2b01      	cmp	r3, #1
 8006002:	d102      	bne.n	800600a <HAL_RCC_OscConfig+0xcba>
 8006004:	4bb0      	ldr	r3, [pc, #704]	; (80062c8 <HAL_RCC_OscConfig+0xf78>)
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	e027      	b.n	800605a <HAL_RCC_OscConfig+0xd0a>
 800600a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800600e:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8006012:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006016:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006018:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800601c:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	fa93 f2a3 	rbit	r2, r3
 8006026:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800602a:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 800602e:	601a      	str	r2, [r3, #0]
 8006030:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006034:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8006038:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800603c:	601a      	str	r2, [r3, #0]
 800603e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006042:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	fa93 f2a3 	rbit	r2, r3
 800604c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006050:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8006054:	601a      	str	r2, [r3, #0]
 8006056:	4b9c      	ldr	r3, [pc, #624]	; (80062c8 <HAL_RCC_OscConfig+0xf78>)
 8006058:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800605a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800605e:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8006062:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8006066:	6011      	str	r1, [r2, #0]
 8006068:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800606c:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8006070:	6812      	ldr	r2, [r2, #0]
 8006072:	fa92 f1a2 	rbit	r1, r2
 8006076:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800607a:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 800607e:	6011      	str	r1, [r2, #0]
  return result;
 8006080:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8006084:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8006088:	6812      	ldr	r2, [r2, #0]
 800608a:	fab2 f282 	clz	r2, r2
 800608e:	b2d2      	uxtb	r2, r2
 8006090:	f042 0220 	orr.w	r2, r2, #32
 8006094:	b2d2      	uxtb	r2, r2
 8006096:	f002 021f 	and.w	r2, r2, #31
 800609a:	2101      	movs	r1, #1
 800609c:	fa01 f202 	lsl.w	r2, r1, r2
 80060a0:	4013      	ands	r3, r2
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d182      	bne.n	8005fac <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80060a6:	4b88      	ldr	r3, [pc, #544]	; (80062c8 <HAL_RCC_OscConfig+0xf78>)
 80060a8:	685b      	ldr	r3, [r3, #4]
 80060aa:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80060ae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80060b2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80060ba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80060be:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	6a1b      	ldr	r3, [r3, #32]
 80060c6:	430b      	orrs	r3, r1
 80060c8:	497f      	ldr	r1, [pc, #508]	; (80062c8 <HAL_RCC_OscConfig+0xf78>)
 80060ca:	4313      	orrs	r3, r2
 80060cc:	604b      	str	r3, [r1, #4]
 80060ce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80060d2:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 80060d6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80060da:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80060dc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80060e0:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	fa93 f2a3 	rbit	r2, r3
 80060ea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80060ee:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80060f2:	601a      	str	r2, [r3, #0]
  return result;
 80060f4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80060f8:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80060fc:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80060fe:	fab3 f383 	clz	r3, r3
 8006102:	b2db      	uxtb	r3, r3
 8006104:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8006108:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800610c:	009b      	lsls	r3, r3, #2
 800610e:	461a      	mov	r2, r3
 8006110:	2301      	movs	r3, #1
 8006112:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006114:	f7fd f8d4 	bl	80032c0 <HAL_GetTick>
 8006118:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800611c:	e009      	b.n	8006132 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800611e:	f7fd f8cf 	bl	80032c0 <HAL_GetTick>
 8006122:	4602      	mov	r2, r0
 8006124:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8006128:	1ad3      	subs	r3, r2, r3
 800612a:	2b02      	cmp	r3, #2
 800612c:	d901      	bls.n	8006132 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 800612e:	2303      	movs	r3, #3
 8006130:	e144      	b.n	80063bc <HAL_RCC_OscConfig+0x106c>
 8006132:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006136:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 800613a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800613e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006140:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006144:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	fa93 f2a3 	rbit	r2, r3
 800614e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006152:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8006156:	601a      	str	r2, [r3, #0]
  return result;
 8006158:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800615c:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8006160:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006162:	fab3 f383 	clz	r3, r3
 8006166:	b2db      	uxtb	r3, r3
 8006168:	095b      	lsrs	r3, r3, #5
 800616a:	b2db      	uxtb	r3, r3
 800616c:	f043 0301 	orr.w	r3, r3, #1
 8006170:	b2db      	uxtb	r3, r3
 8006172:	2b01      	cmp	r3, #1
 8006174:	d102      	bne.n	800617c <HAL_RCC_OscConfig+0xe2c>
 8006176:	4b54      	ldr	r3, [pc, #336]	; (80062c8 <HAL_RCC_OscConfig+0xf78>)
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	e027      	b.n	80061cc <HAL_RCC_OscConfig+0xe7c>
 800617c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006180:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8006184:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006188:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800618a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800618e:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	fa93 f2a3 	rbit	r2, r3
 8006198:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800619c:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 80061a0:	601a      	str	r2, [r3, #0]
 80061a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80061a6:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 80061aa:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80061ae:	601a      	str	r2, [r3, #0]
 80061b0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80061b4:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	fa93 f2a3 	rbit	r2, r3
 80061be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80061c2:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 80061c6:	601a      	str	r2, [r3, #0]
 80061c8:	4b3f      	ldr	r3, [pc, #252]	; (80062c8 <HAL_RCC_OscConfig+0xf78>)
 80061ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061cc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80061d0:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 80061d4:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80061d8:	6011      	str	r1, [r2, #0]
 80061da:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80061de:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 80061e2:	6812      	ldr	r2, [r2, #0]
 80061e4:	fa92 f1a2 	rbit	r1, r2
 80061e8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80061ec:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 80061f0:	6011      	str	r1, [r2, #0]
  return result;
 80061f2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80061f6:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 80061fa:	6812      	ldr	r2, [r2, #0]
 80061fc:	fab2 f282 	clz	r2, r2
 8006200:	b2d2      	uxtb	r2, r2
 8006202:	f042 0220 	orr.w	r2, r2, #32
 8006206:	b2d2      	uxtb	r2, r2
 8006208:	f002 021f 	and.w	r2, r2, #31
 800620c:	2101      	movs	r1, #1
 800620e:	fa01 f202 	lsl.w	r2, r1, r2
 8006212:	4013      	ands	r3, r2
 8006214:	2b00      	cmp	r3, #0
 8006216:	d082      	beq.n	800611e <HAL_RCC_OscConfig+0xdce>
 8006218:	e0cf      	b.n	80063ba <HAL_RCC_OscConfig+0x106a>
 800621a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800621e:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8006222:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006226:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006228:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800622c:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	fa93 f2a3 	rbit	r2, r3
 8006236:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800623a:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 800623e:	601a      	str	r2, [r3, #0]
  return result;
 8006240:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006244:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8006248:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800624a:	fab3 f383 	clz	r3, r3
 800624e:	b2db      	uxtb	r3, r3
 8006250:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8006254:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8006258:	009b      	lsls	r3, r3, #2
 800625a:	461a      	mov	r2, r3
 800625c:	2300      	movs	r3, #0
 800625e:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006260:	f7fd f82e 	bl	80032c0 <HAL_GetTick>
 8006264:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006268:	e009      	b.n	800627e <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800626a:	f7fd f829 	bl	80032c0 <HAL_GetTick>
 800626e:	4602      	mov	r2, r0
 8006270:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8006274:	1ad3      	subs	r3, r2, r3
 8006276:	2b02      	cmp	r3, #2
 8006278:	d901      	bls.n	800627e <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 800627a:	2303      	movs	r3, #3
 800627c:	e09e      	b.n	80063bc <HAL_RCC_OscConfig+0x106c>
 800627e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006282:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8006286:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800628a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800628c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006290:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	fa93 f2a3 	rbit	r2, r3
 800629a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800629e:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80062a2:	601a      	str	r2, [r3, #0]
  return result;
 80062a4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80062a8:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80062ac:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80062ae:	fab3 f383 	clz	r3, r3
 80062b2:	b2db      	uxtb	r3, r3
 80062b4:	095b      	lsrs	r3, r3, #5
 80062b6:	b2db      	uxtb	r3, r3
 80062b8:	f043 0301 	orr.w	r3, r3, #1
 80062bc:	b2db      	uxtb	r3, r3
 80062be:	2b01      	cmp	r3, #1
 80062c0:	d104      	bne.n	80062cc <HAL_RCC_OscConfig+0xf7c>
 80062c2:	4b01      	ldr	r3, [pc, #4]	; (80062c8 <HAL_RCC_OscConfig+0xf78>)
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	e029      	b.n	800631c <HAL_RCC_OscConfig+0xfcc>
 80062c8:	40021000 	.word	0x40021000
 80062cc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80062d0:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80062d4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80062d8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80062da:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80062de:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	fa93 f2a3 	rbit	r2, r3
 80062e8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80062ec:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 80062f0:	601a      	str	r2, [r3, #0]
 80062f2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80062f6:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 80062fa:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80062fe:	601a      	str	r2, [r3, #0]
 8006300:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006304:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	fa93 f2a3 	rbit	r2, r3
 800630e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006312:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8006316:	601a      	str	r2, [r3, #0]
 8006318:	4b2b      	ldr	r3, [pc, #172]	; (80063c8 <HAL_RCC_OscConfig+0x1078>)
 800631a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800631c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8006320:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8006324:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8006328:	6011      	str	r1, [r2, #0]
 800632a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800632e:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8006332:	6812      	ldr	r2, [r2, #0]
 8006334:	fa92 f1a2 	rbit	r1, r2
 8006338:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800633c:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8006340:	6011      	str	r1, [r2, #0]
  return result;
 8006342:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8006346:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 800634a:	6812      	ldr	r2, [r2, #0]
 800634c:	fab2 f282 	clz	r2, r2
 8006350:	b2d2      	uxtb	r2, r2
 8006352:	f042 0220 	orr.w	r2, r2, #32
 8006356:	b2d2      	uxtb	r2, r2
 8006358:	f002 021f 	and.w	r2, r2, #31
 800635c:	2101      	movs	r1, #1
 800635e:	fa01 f202 	lsl.w	r2, r1, r2
 8006362:	4013      	ands	r3, r2
 8006364:	2b00      	cmp	r3, #0
 8006366:	d180      	bne.n	800626a <HAL_RCC_OscConfig+0xf1a>
 8006368:	e027      	b.n	80063ba <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800636a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800636e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	69db      	ldr	r3, [r3, #28]
 8006376:	2b01      	cmp	r3, #1
 8006378:	d101      	bne.n	800637e <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 800637a:	2301      	movs	r3, #1
 800637c:	e01e      	b.n	80063bc <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800637e:	4b12      	ldr	r3, [pc, #72]	; (80063c8 <HAL_RCC_OscConfig+0x1078>)
 8006380:	685b      	ldr	r3, [r3, #4]
 8006382:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8006386:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800638a:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800638e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006392:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	6a1b      	ldr	r3, [r3, #32]
 800639a:	429a      	cmp	r2, r3
 800639c:	d10b      	bne.n	80063b6 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 800639e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80063a2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80063a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80063aa:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80063b2:	429a      	cmp	r2, r3
 80063b4:	d001      	beq.n	80063ba <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 80063b6:	2301      	movs	r3, #1
 80063b8:	e000      	b.n	80063bc <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 80063ba:	2300      	movs	r3, #0
}
 80063bc:	4618      	mov	r0, r3
 80063be:	f507 7700 	add.w	r7, r7, #512	; 0x200
 80063c2:	46bd      	mov	sp, r7
 80063c4:	bd80      	pop	{r7, pc}
 80063c6:	bf00      	nop
 80063c8:	40021000 	.word	0x40021000

080063cc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80063cc:	b580      	push	{r7, lr}
 80063ce:	b09e      	sub	sp, #120	; 0x78
 80063d0:	af00      	add	r7, sp, #0
 80063d2:	6078      	str	r0, [r7, #4]
 80063d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80063d6:	2300      	movs	r3, #0
 80063d8:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d101      	bne.n	80063e4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80063e0:	2301      	movs	r3, #1
 80063e2:	e162      	b.n	80066aa <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80063e4:	4b90      	ldr	r3, [pc, #576]	; (8006628 <HAL_RCC_ClockConfig+0x25c>)
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	f003 0307 	and.w	r3, r3, #7
 80063ec:	683a      	ldr	r2, [r7, #0]
 80063ee:	429a      	cmp	r2, r3
 80063f0:	d910      	bls.n	8006414 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80063f2:	4b8d      	ldr	r3, [pc, #564]	; (8006628 <HAL_RCC_ClockConfig+0x25c>)
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	f023 0207 	bic.w	r2, r3, #7
 80063fa:	498b      	ldr	r1, [pc, #556]	; (8006628 <HAL_RCC_ClockConfig+0x25c>)
 80063fc:	683b      	ldr	r3, [r7, #0]
 80063fe:	4313      	orrs	r3, r2
 8006400:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006402:	4b89      	ldr	r3, [pc, #548]	; (8006628 <HAL_RCC_ClockConfig+0x25c>)
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	f003 0307 	and.w	r3, r3, #7
 800640a:	683a      	ldr	r2, [r7, #0]
 800640c:	429a      	cmp	r2, r3
 800640e:	d001      	beq.n	8006414 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8006410:	2301      	movs	r3, #1
 8006412:	e14a      	b.n	80066aa <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	f003 0302 	and.w	r3, r3, #2
 800641c:	2b00      	cmp	r3, #0
 800641e:	d008      	beq.n	8006432 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006420:	4b82      	ldr	r3, [pc, #520]	; (800662c <HAL_RCC_ClockConfig+0x260>)
 8006422:	685b      	ldr	r3, [r3, #4]
 8006424:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	689b      	ldr	r3, [r3, #8]
 800642c:	497f      	ldr	r1, [pc, #508]	; (800662c <HAL_RCC_ClockConfig+0x260>)
 800642e:	4313      	orrs	r3, r2
 8006430:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	f003 0301 	and.w	r3, r3, #1
 800643a:	2b00      	cmp	r3, #0
 800643c:	f000 80dc 	beq.w	80065f8 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	685b      	ldr	r3, [r3, #4]
 8006444:	2b01      	cmp	r3, #1
 8006446:	d13c      	bne.n	80064c2 <HAL_RCC_ClockConfig+0xf6>
 8006448:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800644c:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800644e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006450:	fa93 f3a3 	rbit	r3, r3
 8006454:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8006456:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006458:	fab3 f383 	clz	r3, r3
 800645c:	b2db      	uxtb	r3, r3
 800645e:	095b      	lsrs	r3, r3, #5
 8006460:	b2db      	uxtb	r3, r3
 8006462:	f043 0301 	orr.w	r3, r3, #1
 8006466:	b2db      	uxtb	r3, r3
 8006468:	2b01      	cmp	r3, #1
 800646a:	d102      	bne.n	8006472 <HAL_RCC_ClockConfig+0xa6>
 800646c:	4b6f      	ldr	r3, [pc, #444]	; (800662c <HAL_RCC_ClockConfig+0x260>)
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	e00f      	b.n	8006492 <HAL_RCC_ClockConfig+0xc6>
 8006472:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006476:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006478:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800647a:	fa93 f3a3 	rbit	r3, r3
 800647e:	667b      	str	r3, [r7, #100]	; 0x64
 8006480:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006484:	663b      	str	r3, [r7, #96]	; 0x60
 8006486:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006488:	fa93 f3a3 	rbit	r3, r3
 800648c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800648e:	4b67      	ldr	r3, [pc, #412]	; (800662c <HAL_RCC_ClockConfig+0x260>)
 8006490:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006492:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8006496:	65ba      	str	r2, [r7, #88]	; 0x58
 8006498:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800649a:	fa92 f2a2 	rbit	r2, r2
 800649e:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 80064a0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80064a2:	fab2 f282 	clz	r2, r2
 80064a6:	b2d2      	uxtb	r2, r2
 80064a8:	f042 0220 	orr.w	r2, r2, #32
 80064ac:	b2d2      	uxtb	r2, r2
 80064ae:	f002 021f 	and.w	r2, r2, #31
 80064b2:	2101      	movs	r1, #1
 80064b4:	fa01 f202 	lsl.w	r2, r1, r2
 80064b8:	4013      	ands	r3, r2
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d17b      	bne.n	80065b6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80064be:	2301      	movs	r3, #1
 80064c0:	e0f3      	b.n	80066aa <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	685b      	ldr	r3, [r3, #4]
 80064c6:	2b02      	cmp	r3, #2
 80064c8:	d13c      	bne.n	8006544 <HAL_RCC_ClockConfig+0x178>
 80064ca:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80064ce:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80064d0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80064d2:	fa93 f3a3 	rbit	r3, r3
 80064d6:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80064d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80064da:	fab3 f383 	clz	r3, r3
 80064de:	b2db      	uxtb	r3, r3
 80064e0:	095b      	lsrs	r3, r3, #5
 80064e2:	b2db      	uxtb	r3, r3
 80064e4:	f043 0301 	orr.w	r3, r3, #1
 80064e8:	b2db      	uxtb	r3, r3
 80064ea:	2b01      	cmp	r3, #1
 80064ec:	d102      	bne.n	80064f4 <HAL_RCC_ClockConfig+0x128>
 80064ee:	4b4f      	ldr	r3, [pc, #316]	; (800662c <HAL_RCC_ClockConfig+0x260>)
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	e00f      	b.n	8006514 <HAL_RCC_ClockConfig+0x148>
 80064f4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80064f8:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80064fa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80064fc:	fa93 f3a3 	rbit	r3, r3
 8006500:	647b      	str	r3, [r7, #68]	; 0x44
 8006502:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006506:	643b      	str	r3, [r7, #64]	; 0x40
 8006508:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800650a:	fa93 f3a3 	rbit	r3, r3
 800650e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006510:	4b46      	ldr	r3, [pc, #280]	; (800662c <HAL_RCC_ClockConfig+0x260>)
 8006512:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006514:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006518:	63ba      	str	r2, [r7, #56]	; 0x38
 800651a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800651c:	fa92 f2a2 	rbit	r2, r2
 8006520:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8006522:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006524:	fab2 f282 	clz	r2, r2
 8006528:	b2d2      	uxtb	r2, r2
 800652a:	f042 0220 	orr.w	r2, r2, #32
 800652e:	b2d2      	uxtb	r2, r2
 8006530:	f002 021f 	and.w	r2, r2, #31
 8006534:	2101      	movs	r1, #1
 8006536:	fa01 f202 	lsl.w	r2, r1, r2
 800653a:	4013      	ands	r3, r2
 800653c:	2b00      	cmp	r3, #0
 800653e:	d13a      	bne.n	80065b6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8006540:	2301      	movs	r3, #1
 8006542:	e0b2      	b.n	80066aa <HAL_RCC_ClockConfig+0x2de>
 8006544:	2302      	movs	r3, #2
 8006546:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006548:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800654a:	fa93 f3a3 	rbit	r3, r3
 800654e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8006550:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006552:	fab3 f383 	clz	r3, r3
 8006556:	b2db      	uxtb	r3, r3
 8006558:	095b      	lsrs	r3, r3, #5
 800655a:	b2db      	uxtb	r3, r3
 800655c:	f043 0301 	orr.w	r3, r3, #1
 8006560:	b2db      	uxtb	r3, r3
 8006562:	2b01      	cmp	r3, #1
 8006564:	d102      	bne.n	800656c <HAL_RCC_ClockConfig+0x1a0>
 8006566:	4b31      	ldr	r3, [pc, #196]	; (800662c <HAL_RCC_ClockConfig+0x260>)
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	e00d      	b.n	8006588 <HAL_RCC_ClockConfig+0x1bc>
 800656c:	2302      	movs	r3, #2
 800656e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006570:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006572:	fa93 f3a3 	rbit	r3, r3
 8006576:	627b      	str	r3, [r7, #36]	; 0x24
 8006578:	2302      	movs	r3, #2
 800657a:	623b      	str	r3, [r7, #32]
 800657c:	6a3b      	ldr	r3, [r7, #32]
 800657e:	fa93 f3a3 	rbit	r3, r3
 8006582:	61fb      	str	r3, [r7, #28]
 8006584:	4b29      	ldr	r3, [pc, #164]	; (800662c <HAL_RCC_ClockConfig+0x260>)
 8006586:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006588:	2202      	movs	r2, #2
 800658a:	61ba      	str	r2, [r7, #24]
 800658c:	69ba      	ldr	r2, [r7, #24]
 800658e:	fa92 f2a2 	rbit	r2, r2
 8006592:	617a      	str	r2, [r7, #20]
  return result;
 8006594:	697a      	ldr	r2, [r7, #20]
 8006596:	fab2 f282 	clz	r2, r2
 800659a:	b2d2      	uxtb	r2, r2
 800659c:	f042 0220 	orr.w	r2, r2, #32
 80065a0:	b2d2      	uxtb	r2, r2
 80065a2:	f002 021f 	and.w	r2, r2, #31
 80065a6:	2101      	movs	r1, #1
 80065a8:	fa01 f202 	lsl.w	r2, r1, r2
 80065ac:	4013      	ands	r3, r2
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d101      	bne.n	80065b6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80065b2:	2301      	movs	r3, #1
 80065b4:	e079      	b.n	80066aa <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80065b6:	4b1d      	ldr	r3, [pc, #116]	; (800662c <HAL_RCC_ClockConfig+0x260>)
 80065b8:	685b      	ldr	r3, [r3, #4]
 80065ba:	f023 0203 	bic.w	r2, r3, #3
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	685b      	ldr	r3, [r3, #4]
 80065c2:	491a      	ldr	r1, [pc, #104]	; (800662c <HAL_RCC_ClockConfig+0x260>)
 80065c4:	4313      	orrs	r3, r2
 80065c6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80065c8:	f7fc fe7a 	bl	80032c0 <HAL_GetTick>
 80065cc:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80065ce:	e00a      	b.n	80065e6 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80065d0:	f7fc fe76 	bl	80032c0 <HAL_GetTick>
 80065d4:	4602      	mov	r2, r0
 80065d6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80065d8:	1ad3      	subs	r3, r2, r3
 80065da:	f241 3288 	movw	r2, #5000	; 0x1388
 80065de:	4293      	cmp	r3, r2
 80065e0:	d901      	bls.n	80065e6 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80065e2:	2303      	movs	r3, #3
 80065e4:	e061      	b.n	80066aa <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80065e6:	4b11      	ldr	r3, [pc, #68]	; (800662c <HAL_RCC_ClockConfig+0x260>)
 80065e8:	685b      	ldr	r3, [r3, #4]
 80065ea:	f003 020c 	and.w	r2, r3, #12
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	685b      	ldr	r3, [r3, #4]
 80065f2:	009b      	lsls	r3, r3, #2
 80065f4:	429a      	cmp	r2, r3
 80065f6:	d1eb      	bne.n	80065d0 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80065f8:	4b0b      	ldr	r3, [pc, #44]	; (8006628 <HAL_RCC_ClockConfig+0x25c>)
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	f003 0307 	and.w	r3, r3, #7
 8006600:	683a      	ldr	r2, [r7, #0]
 8006602:	429a      	cmp	r2, r3
 8006604:	d214      	bcs.n	8006630 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006606:	4b08      	ldr	r3, [pc, #32]	; (8006628 <HAL_RCC_ClockConfig+0x25c>)
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	f023 0207 	bic.w	r2, r3, #7
 800660e:	4906      	ldr	r1, [pc, #24]	; (8006628 <HAL_RCC_ClockConfig+0x25c>)
 8006610:	683b      	ldr	r3, [r7, #0]
 8006612:	4313      	orrs	r3, r2
 8006614:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006616:	4b04      	ldr	r3, [pc, #16]	; (8006628 <HAL_RCC_ClockConfig+0x25c>)
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	f003 0307 	and.w	r3, r3, #7
 800661e:	683a      	ldr	r2, [r7, #0]
 8006620:	429a      	cmp	r2, r3
 8006622:	d005      	beq.n	8006630 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8006624:	2301      	movs	r3, #1
 8006626:	e040      	b.n	80066aa <HAL_RCC_ClockConfig+0x2de>
 8006628:	40022000 	.word	0x40022000
 800662c:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	f003 0304 	and.w	r3, r3, #4
 8006638:	2b00      	cmp	r3, #0
 800663a:	d008      	beq.n	800664e <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800663c:	4b1d      	ldr	r3, [pc, #116]	; (80066b4 <HAL_RCC_ClockConfig+0x2e8>)
 800663e:	685b      	ldr	r3, [r3, #4]
 8006640:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	68db      	ldr	r3, [r3, #12]
 8006648:	491a      	ldr	r1, [pc, #104]	; (80066b4 <HAL_RCC_ClockConfig+0x2e8>)
 800664a:	4313      	orrs	r3, r2
 800664c:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	f003 0308 	and.w	r3, r3, #8
 8006656:	2b00      	cmp	r3, #0
 8006658:	d009      	beq.n	800666e <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800665a:	4b16      	ldr	r3, [pc, #88]	; (80066b4 <HAL_RCC_ClockConfig+0x2e8>)
 800665c:	685b      	ldr	r3, [r3, #4]
 800665e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	691b      	ldr	r3, [r3, #16]
 8006666:	00db      	lsls	r3, r3, #3
 8006668:	4912      	ldr	r1, [pc, #72]	; (80066b4 <HAL_RCC_ClockConfig+0x2e8>)
 800666a:	4313      	orrs	r3, r2
 800666c:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800666e:	f000 f829 	bl	80066c4 <HAL_RCC_GetSysClockFreq>
 8006672:	4601      	mov	r1, r0
 8006674:	4b0f      	ldr	r3, [pc, #60]	; (80066b4 <HAL_RCC_ClockConfig+0x2e8>)
 8006676:	685b      	ldr	r3, [r3, #4]
 8006678:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800667c:	22f0      	movs	r2, #240	; 0xf0
 800667e:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006680:	693a      	ldr	r2, [r7, #16]
 8006682:	fa92 f2a2 	rbit	r2, r2
 8006686:	60fa      	str	r2, [r7, #12]
  return result;
 8006688:	68fa      	ldr	r2, [r7, #12]
 800668a:	fab2 f282 	clz	r2, r2
 800668e:	b2d2      	uxtb	r2, r2
 8006690:	40d3      	lsrs	r3, r2
 8006692:	4a09      	ldr	r2, [pc, #36]	; (80066b8 <HAL_RCC_ClockConfig+0x2ec>)
 8006694:	5cd3      	ldrb	r3, [r2, r3]
 8006696:	fa21 f303 	lsr.w	r3, r1, r3
 800669a:	4a08      	ldr	r2, [pc, #32]	; (80066bc <HAL_RCC_ClockConfig+0x2f0>)
 800669c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800669e:	4b08      	ldr	r3, [pc, #32]	; (80066c0 <HAL_RCC_ClockConfig+0x2f4>)
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	4618      	mov	r0, r3
 80066a4:	f7fc fdc8 	bl	8003238 <HAL_InitTick>
  
  return HAL_OK;
 80066a8:	2300      	movs	r3, #0
}
 80066aa:	4618      	mov	r0, r3
 80066ac:	3778      	adds	r7, #120	; 0x78
 80066ae:	46bd      	mov	sp, r7
 80066b0:	bd80      	pop	{r7, pc}
 80066b2:	bf00      	nop
 80066b4:	40021000 	.word	0x40021000
 80066b8:	0800aa6c 	.word	0x0800aa6c
 80066bc:	2000006c 	.word	0x2000006c
 80066c0:	20000070 	.word	0x20000070

080066c4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80066c4:	b480      	push	{r7}
 80066c6:	b08b      	sub	sp, #44	; 0x2c
 80066c8:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80066ca:	2300      	movs	r3, #0
 80066cc:	61fb      	str	r3, [r7, #28]
 80066ce:	2300      	movs	r3, #0
 80066d0:	61bb      	str	r3, [r7, #24]
 80066d2:	2300      	movs	r3, #0
 80066d4:	627b      	str	r3, [r7, #36]	; 0x24
 80066d6:	2300      	movs	r3, #0
 80066d8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80066da:	2300      	movs	r3, #0
 80066dc:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 80066de:	4b29      	ldr	r3, [pc, #164]	; (8006784 <HAL_RCC_GetSysClockFreq+0xc0>)
 80066e0:	685b      	ldr	r3, [r3, #4]
 80066e2:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80066e4:	69fb      	ldr	r3, [r7, #28]
 80066e6:	f003 030c 	and.w	r3, r3, #12
 80066ea:	2b04      	cmp	r3, #4
 80066ec:	d002      	beq.n	80066f4 <HAL_RCC_GetSysClockFreq+0x30>
 80066ee:	2b08      	cmp	r3, #8
 80066f0:	d003      	beq.n	80066fa <HAL_RCC_GetSysClockFreq+0x36>
 80066f2:	e03c      	b.n	800676e <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80066f4:	4b24      	ldr	r3, [pc, #144]	; (8006788 <HAL_RCC_GetSysClockFreq+0xc4>)
 80066f6:	623b      	str	r3, [r7, #32]
      break;
 80066f8:	e03c      	b.n	8006774 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80066fa:	69fb      	ldr	r3, [r7, #28]
 80066fc:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8006700:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8006704:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006706:	68ba      	ldr	r2, [r7, #8]
 8006708:	fa92 f2a2 	rbit	r2, r2
 800670c:	607a      	str	r2, [r7, #4]
  return result;
 800670e:	687a      	ldr	r2, [r7, #4]
 8006710:	fab2 f282 	clz	r2, r2
 8006714:	b2d2      	uxtb	r2, r2
 8006716:	40d3      	lsrs	r3, r2
 8006718:	4a1c      	ldr	r2, [pc, #112]	; (800678c <HAL_RCC_GetSysClockFreq+0xc8>)
 800671a:	5cd3      	ldrb	r3, [r2, r3]
 800671c:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800671e:	4b19      	ldr	r3, [pc, #100]	; (8006784 <HAL_RCC_GetSysClockFreq+0xc0>)
 8006720:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006722:	f003 030f 	and.w	r3, r3, #15
 8006726:	220f      	movs	r2, #15
 8006728:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800672a:	693a      	ldr	r2, [r7, #16]
 800672c:	fa92 f2a2 	rbit	r2, r2
 8006730:	60fa      	str	r2, [r7, #12]
  return result;
 8006732:	68fa      	ldr	r2, [r7, #12]
 8006734:	fab2 f282 	clz	r2, r2
 8006738:	b2d2      	uxtb	r2, r2
 800673a:	40d3      	lsrs	r3, r2
 800673c:	4a14      	ldr	r2, [pc, #80]	; (8006790 <HAL_RCC_GetSysClockFreq+0xcc>)
 800673e:	5cd3      	ldrb	r3, [r2, r3]
 8006740:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8006742:	69fb      	ldr	r3, [r7, #28]
 8006744:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006748:	2b00      	cmp	r3, #0
 800674a:	d008      	beq.n	800675e <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800674c:	4a0e      	ldr	r2, [pc, #56]	; (8006788 <HAL_RCC_GetSysClockFreq+0xc4>)
 800674e:	69bb      	ldr	r3, [r7, #24]
 8006750:	fbb2 f2f3 	udiv	r2, r2, r3
 8006754:	697b      	ldr	r3, [r7, #20]
 8006756:	fb02 f303 	mul.w	r3, r2, r3
 800675a:	627b      	str	r3, [r7, #36]	; 0x24
 800675c:	e004      	b.n	8006768 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800675e:	697b      	ldr	r3, [r7, #20]
 8006760:	4a0c      	ldr	r2, [pc, #48]	; (8006794 <HAL_RCC_GetSysClockFreq+0xd0>)
 8006762:	fb02 f303 	mul.w	r3, r2, r3
 8006766:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8006768:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800676a:	623b      	str	r3, [r7, #32]
      break;
 800676c:	e002      	b.n	8006774 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800676e:	4b06      	ldr	r3, [pc, #24]	; (8006788 <HAL_RCC_GetSysClockFreq+0xc4>)
 8006770:	623b      	str	r3, [r7, #32]
      break;
 8006772:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006774:	6a3b      	ldr	r3, [r7, #32]
}
 8006776:	4618      	mov	r0, r3
 8006778:	372c      	adds	r7, #44	; 0x2c
 800677a:	46bd      	mov	sp, r7
 800677c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006780:	4770      	bx	lr
 8006782:	bf00      	nop
 8006784:	40021000 	.word	0x40021000
 8006788:	007a1200 	.word	0x007a1200
 800678c:	0800aa84 	.word	0x0800aa84
 8006790:	0800aa94 	.word	0x0800aa94
 8006794:	003d0900 	.word	0x003d0900

08006798 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006798:	b480      	push	{r7}
 800679a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800679c:	4b03      	ldr	r3, [pc, #12]	; (80067ac <HAL_RCC_GetHCLKFreq+0x14>)
 800679e:	681b      	ldr	r3, [r3, #0]
}
 80067a0:	4618      	mov	r0, r3
 80067a2:	46bd      	mov	sp, r7
 80067a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067a8:	4770      	bx	lr
 80067aa:	bf00      	nop
 80067ac:	2000006c 	.word	0x2000006c

080067b0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80067b0:	b580      	push	{r7, lr}
 80067b2:	b082      	sub	sp, #8
 80067b4:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80067b6:	f7ff ffef 	bl	8006798 <HAL_RCC_GetHCLKFreq>
 80067ba:	4601      	mov	r1, r0
 80067bc:	4b0b      	ldr	r3, [pc, #44]	; (80067ec <HAL_RCC_GetPCLK1Freq+0x3c>)
 80067be:	685b      	ldr	r3, [r3, #4]
 80067c0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80067c4:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80067c8:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80067ca:	687a      	ldr	r2, [r7, #4]
 80067cc:	fa92 f2a2 	rbit	r2, r2
 80067d0:	603a      	str	r2, [r7, #0]
  return result;
 80067d2:	683a      	ldr	r2, [r7, #0]
 80067d4:	fab2 f282 	clz	r2, r2
 80067d8:	b2d2      	uxtb	r2, r2
 80067da:	40d3      	lsrs	r3, r2
 80067dc:	4a04      	ldr	r2, [pc, #16]	; (80067f0 <HAL_RCC_GetPCLK1Freq+0x40>)
 80067de:	5cd3      	ldrb	r3, [r2, r3]
 80067e0:	fa21 f303 	lsr.w	r3, r1, r3
}    
 80067e4:	4618      	mov	r0, r3
 80067e6:	3708      	adds	r7, #8
 80067e8:	46bd      	mov	sp, r7
 80067ea:	bd80      	pop	{r7, pc}
 80067ec:	40021000 	.word	0x40021000
 80067f0:	0800aa7c 	.word	0x0800aa7c

080067f4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80067f4:	b580      	push	{r7, lr}
 80067f6:	b082      	sub	sp, #8
 80067f8:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80067fa:	f7ff ffcd 	bl	8006798 <HAL_RCC_GetHCLKFreq>
 80067fe:	4601      	mov	r1, r0
 8006800:	4b0b      	ldr	r3, [pc, #44]	; (8006830 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8006802:	685b      	ldr	r3, [r3, #4]
 8006804:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8006808:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800680c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800680e:	687a      	ldr	r2, [r7, #4]
 8006810:	fa92 f2a2 	rbit	r2, r2
 8006814:	603a      	str	r2, [r7, #0]
  return result;
 8006816:	683a      	ldr	r2, [r7, #0]
 8006818:	fab2 f282 	clz	r2, r2
 800681c:	b2d2      	uxtb	r2, r2
 800681e:	40d3      	lsrs	r3, r2
 8006820:	4a04      	ldr	r2, [pc, #16]	; (8006834 <HAL_RCC_GetPCLK2Freq+0x40>)
 8006822:	5cd3      	ldrb	r3, [r2, r3]
 8006824:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8006828:	4618      	mov	r0, r3
 800682a:	3708      	adds	r7, #8
 800682c:	46bd      	mov	sp, r7
 800682e:	bd80      	pop	{r7, pc}
 8006830:	40021000 	.word	0x40021000
 8006834:	0800aa7c 	.word	0x0800aa7c

08006838 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006838:	b580      	push	{r7, lr}
 800683a:	b092      	sub	sp, #72	; 0x48
 800683c:	af00      	add	r7, sp, #0
 800683e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006840:	2300      	movs	r3, #0
 8006842:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8006844:	2300      	movs	r3, #0
 8006846:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8006848:	2300      	movs	r3, #0
 800684a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006856:	2b00      	cmp	r3, #0
 8006858:	f000 80d4 	beq.w	8006a04 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800685c:	4b4e      	ldr	r3, [pc, #312]	; (8006998 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800685e:	69db      	ldr	r3, [r3, #28]
 8006860:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006864:	2b00      	cmp	r3, #0
 8006866:	d10e      	bne.n	8006886 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006868:	4b4b      	ldr	r3, [pc, #300]	; (8006998 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800686a:	69db      	ldr	r3, [r3, #28]
 800686c:	4a4a      	ldr	r2, [pc, #296]	; (8006998 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800686e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006872:	61d3      	str	r3, [r2, #28]
 8006874:	4b48      	ldr	r3, [pc, #288]	; (8006998 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006876:	69db      	ldr	r3, [r3, #28]
 8006878:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800687c:	60bb      	str	r3, [r7, #8]
 800687e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006880:	2301      	movs	r3, #1
 8006882:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006886:	4b45      	ldr	r3, [pc, #276]	; (800699c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800688e:	2b00      	cmp	r3, #0
 8006890:	d118      	bne.n	80068c4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006892:	4b42      	ldr	r3, [pc, #264]	; (800699c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	4a41      	ldr	r2, [pc, #260]	; (800699c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006898:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800689c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800689e:	f7fc fd0f 	bl	80032c0 <HAL_GetTick>
 80068a2:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80068a4:	e008      	b.n	80068b8 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80068a6:	f7fc fd0b 	bl	80032c0 <HAL_GetTick>
 80068aa:	4602      	mov	r2, r0
 80068ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80068ae:	1ad3      	subs	r3, r2, r3
 80068b0:	2b64      	cmp	r3, #100	; 0x64
 80068b2:	d901      	bls.n	80068b8 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80068b4:	2303      	movs	r3, #3
 80068b6:	e169      	b.n	8006b8c <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80068b8:	4b38      	ldr	r3, [pc, #224]	; (800699c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d0f0      	beq.n	80068a6 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80068c4:	4b34      	ldr	r3, [pc, #208]	; (8006998 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80068c6:	6a1b      	ldr	r3, [r3, #32]
 80068c8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80068cc:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80068ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	f000 8084 	beq.w	80069de <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	685b      	ldr	r3, [r3, #4]
 80068da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80068de:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80068e0:	429a      	cmp	r2, r3
 80068e2:	d07c      	beq.n	80069de <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80068e4:	4b2c      	ldr	r3, [pc, #176]	; (8006998 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80068e6:	6a1b      	ldr	r3, [r3, #32]
 80068e8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80068ec:	63fb      	str	r3, [r7, #60]	; 0x3c
 80068ee:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80068f2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80068f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068f6:	fa93 f3a3 	rbit	r3, r3
 80068fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80068fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80068fe:	fab3 f383 	clz	r3, r3
 8006902:	b2db      	uxtb	r3, r3
 8006904:	461a      	mov	r2, r3
 8006906:	4b26      	ldr	r3, [pc, #152]	; (80069a0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8006908:	4413      	add	r3, r2
 800690a:	009b      	lsls	r3, r3, #2
 800690c:	461a      	mov	r2, r3
 800690e:	2301      	movs	r3, #1
 8006910:	6013      	str	r3, [r2, #0]
 8006912:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8006916:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006918:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800691a:	fa93 f3a3 	rbit	r3, r3
 800691e:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8006920:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006922:	fab3 f383 	clz	r3, r3
 8006926:	b2db      	uxtb	r3, r3
 8006928:	461a      	mov	r2, r3
 800692a:	4b1d      	ldr	r3, [pc, #116]	; (80069a0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800692c:	4413      	add	r3, r2
 800692e:	009b      	lsls	r3, r3, #2
 8006930:	461a      	mov	r2, r3
 8006932:	2300      	movs	r3, #0
 8006934:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8006936:	4a18      	ldr	r2, [pc, #96]	; (8006998 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006938:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800693a:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800693c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800693e:	f003 0301 	and.w	r3, r3, #1
 8006942:	2b00      	cmp	r3, #0
 8006944:	d04b      	beq.n	80069de <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006946:	f7fc fcbb 	bl	80032c0 <HAL_GetTick>
 800694a:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800694c:	e00a      	b.n	8006964 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800694e:	f7fc fcb7 	bl	80032c0 <HAL_GetTick>
 8006952:	4602      	mov	r2, r0
 8006954:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006956:	1ad3      	subs	r3, r2, r3
 8006958:	f241 3288 	movw	r2, #5000	; 0x1388
 800695c:	4293      	cmp	r3, r2
 800695e:	d901      	bls.n	8006964 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8006960:	2303      	movs	r3, #3
 8006962:	e113      	b.n	8006b8c <HAL_RCCEx_PeriphCLKConfig+0x354>
 8006964:	2302      	movs	r3, #2
 8006966:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006968:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800696a:	fa93 f3a3 	rbit	r3, r3
 800696e:	627b      	str	r3, [r7, #36]	; 0x24
 8006970:	2302      	movs	r3, #2
 8006972:	623b      	str	r3, [r7, #32]
 8006974:	6a3b      	ldr	r3, [r7, #32]
 8006976:	fa93 f3a3 	rbit	r3, r3
 800697a:	61fb      	str	r3, [r7, #28]
  return result;
 800697c:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800697e:	fab3 f383 	clz	r3, r3
 8006982:	b2db      	uxtb	r3, r3
 8006984:	095b      	lsrs	r3, r3, #5
 8006986:	b2db      	uxtb	r3, r3
 8006988:	f043 0302 	orr.w	r3, r3, #2
 800698c:	b2db      	uxtb	r3, r3
 800698e:	2b02      	cmp	r3, #2
 8006990:	d108      	bne.n	80069a4 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8006992:	4b01      	ldr	r3, [pc, #4]	; (8006998 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006994:	6a1b      	ldr	r3, [r3, #32]
 8006996:	e00d      	b.n	80069b4 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8006998:	40021000 	.word	0x40021000
 800699c:	40007000 	.word	0x40007000
 80069a0:	10908100 	.word	0x10908100
 80069a4:	2302      	movs	r3, #2
 80069a6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80069a8:	69bb      	ldr	r3, [r7, #24]
 80069aa:	fa93 f3a3 	rbit	r3, r3
 80069ae:	617b      	str	r3, [r7, #20]
 80069b0:	4b78      	ldr	r3, [pc, #480]	; (8006b94 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80069b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069b4:	2202      	movs	r2, #2
 80069b6:	613a      	str	r2, [r7, #16]
 80069b8:	693a      	ldr	r2, [r7, #16]
 80069ba:	fa92 f2a2 	rbit	r2, r2
 80069be:	60fa      	str	r2, [r7, #12]
  return result;
 80069c0:	68fa      	ldr	r2, [r7, #12]
 80069c2:	fab2 f282 	clz	r2, r2
 80069c6:	b2d2      	uxtb	r2, r2
 80069c8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80069cc:	b2d2      	uxtb	r2, r2
 80069ce:	f002 021f 	and.w	r2, r2, #31
 80069d2:	2101      	movs	r1, #1
 80069d4:	fa01 f202 	lsl.w	r2, r1, r2
 80069d8:	4013      	ands	r3, r2
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d0b7      	beq.n	800694e <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80069de:	4b6d      	ldr	r3, [pc, #436]	; (8006b94 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80069e0:	6a1b      	ldr	r3, [r3, #32]
 80069e2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	685b      	ldr	r3, [r3, #4]
 80069ea:	496a      	ldr	r1, [pc, #424]	; (8006b94 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80069ec:	4313      	orrs	r3, r2
 80069ee:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80069f0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80069f4:	2b01      	cmp	r3, #1
 80069f6:	d105      	bne.n	8006a04 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80069f8:	4b66      	ldr	r3, [pc, #408]	; (8006b94 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80069fa:	69db      	ldr	r3, [r3, #28]
 80069fc:	4a65      	ldr	r2, [pc, #404]	; (8006b94 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80069fe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006a02:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	f003 0301 	and.w	r3, r3, #1
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d008      	beq.n	8006a22 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006a10:	4b60      	ldr	r3, [pc, #384]	; (8006b94 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006a12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a14:	f023 0203 	bic.w	r2, r3, #3
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	689b      	ldr	r3, [r3, #8]
 8006a1c:	495d      	ldr	r1, [pc, #372]	; (8006b94 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006a1e:	4313      	orrs	r3, r2
 8006a20:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	f003 0302 	and.w	r3, r3, #2
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d008      	beq.n	8006a40 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006a2e:	4b59      	ldr	r3, [pc, #356]	; (8006b94 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006a30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a32:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	68db      	ldr	r3, [r3, #12]
 8006a3a:	4956      	ldr	r1, [pc, #344]	; (8006b94 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006a3c:	4313      	orrs	r3, r2
 8006a3e:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	f003 0304 	and.w	r3, r3, #4
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d008      	beq.n	8006a5e <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8006a4c:	4b51      	ldr	r3, [pc, #324]	; (8006b94 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006a4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a50:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	691b      	ldr	r3, [r3, #16]
 8006a58:	494e      	ldr	r1, [pc, #312]	; (8006b94 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006a5a:	4313      	orrs	r3, r2
 8006a5c:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	f003 0320 	and.w	r3, r3, #32
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d008      	beq.n	8006a7c <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006a6a:	4b4a      	ldr	r3, [pc, #296]	; (8006b94 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006a6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a6e:	f023 0210 	bic.w	r2, r3, #16
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	69db      	ldr	r3, [r3, #28]
 8006a76:	4947      	ldr	r1, [pc, #284]	; (8006b94 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006a78:	4313      	orrs	r3, r2
 8006a7a:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d008      	beq.n	8006a9a <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8006a88:	4b42      	ldr	r3, [pc, #264]	; (8006b94 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006a8a:	685b      	ldr	r3, [r3, #4]
 8006a8c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a94:	493f      	ldr	r1, [pc, #252]	; (8006b94 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006a96:	4313      	orrs	r3, r2
 8006a98:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d008      	beq.n	8006ab8 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006aa6:	4b3b      	ldr	r3, [pc, #236]	; (8006b94 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006aa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006aaa:	f023 0220 	bic.w	r2, r3, #32
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	6a1b      	ldr	r3, [r3, #32]
 8006ab2:	4938      	ldr	r1, [pc, #224]	; (8006b94 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006ab4:	4313      	orrs	r3, r2
 8006ab6:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	f003 0308 	and.w	r3, r3, #8
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d008      	beq.n	8006ad6 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8006ac4:	4b33      	ldr	r3, [pc, #204]	; (8006b94 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006ac6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ac8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	695b      	ldr	r3, [r3, #20]
 8006ad0:	4930      	ldr	r1, [pc, #192]	; (8006b94 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006ad2:	4313      	orrs	r3, r2
 8006ad4:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	f003 0310 	and.w	r3, r3, #16
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d008      	beq.n	8006af4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8006ae2:	4b2c      	ldr	r3, [pc, #176]	; (8006b94 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006ae4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ae6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	699b      	ldr	r3, [r3, #24]
 8006aee:	4929      	ldr	r1, [pc, #164]	; (8006b94 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006af0:	4313      	orrs	r3, r2
 8006af2:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d008      	beq.n	8006b12 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8006b00:	4b24      	ldr	r3, [pc, #144]	; (8006b94 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006b02:	685b      	ldr	r3, [r3, #4]
 8006b04:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b0c:	4921      	ldr	r1, [pc, #132]	; (8006b94 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006b0e:	4313      	orrs	r3, r2
 8006b10:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d008      	beq.n	8006b30 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8006b1e:	4b1d      	ldr	r3, [pc, #116]	; (8006b94 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006b20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b22:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b2a:	491a      	ldr	r1, [pc, #104]	; (8006b94 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006b2c:	4313      	orrs	r3, r2
 8006b2e:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d008      	beq.n	8006b4e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8006b3c:	4b15      	ldr	r3, [pc, #84]	; (8006b94 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006b3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b40:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b48:	4912      	ldr	r1, [pc, #72]	; (8006b94 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006b4a:	4313      	orrs	r3, r2
 8006b4c:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d008      	beq.n	8006b6c <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8006b5a:	4b0e      	ldr	r3, [pc, #56]	; (8006b94 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006b5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b5e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b66:	490b      	ldr	r1, [pc, #44]	; (8006b94 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006b68:	4313      	orrs	r3, r2
 8006b6a:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d008      	beq.n	8006b8a <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8006b78:	4b06      	ldr	r3, [pc, #24]	; (8006b94 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006b7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b7c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b84:	4903      	ldr	r1, [pc, #12]	; (8006b94 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006b86:	4313      	orrs	r3, r2
 8006b88:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8006b8a:	2300      	movs	r3, #0
}
 8006b8c:	4618      	mov	r0, r3
 8006b8e:	3748      	adds	r7, #72	; 0x48
 8006b90:	46bd      	mov	sp, r7
 8006b92:	bd80      	pop	{r7, pc}
 8006b94:	40021000 	.word	0x40021000

08006b98 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8006b98:	b580      	push	{r7, lr}
 8006b9a:	b084      	sub	sp, #16
 8006b9c:	af00      	add	r7, sp, #0
 8006b9e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8006ba0:	2301      	movs	r3, #1
 8006ba2:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d101      	bne.n	8006bae <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8006baa:	2301      	movs	r3, #1
 8006bac:	e073      	b.n	8006c96 <HAL_RTC_Init+0xfe>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	7f5b      	ldrb	r3, [r3, #29]
 8006bb2:	b2db      	uxtb	r3, r3
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d105      	bne.n	8006bc4 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	2200      	movs	r2, #0
 8006bbc:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8006bbe:	6878      	ldr	r0, [r7, #4]
 8006bc0:	f7fc f80e 	bl	8002be0 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	2202      	movs	r2, #2
 8006bc8:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	68db      	ldr	r3, [r3, #12]
 8006bd0:	f003 0310 	and.w	r3, r3, #16
 8006bd4:	2b10      	cmp	r3, #16
 8006bd6:	d055      	beq.n	8006c84 <HAL_RTC_Init+0xec>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	22ca      	movs	r2, #202	; 0xca
 8006bde:	625a      	str	r2, [r3, #36]	; 0x24
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	2253      	movs	r2, #83	; 0x53
 8006be6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8006be8:	6878      	ldr	r0, [r7, #4]
 8006bea:	f000 fa49 	bl	8007080 <RTC_EnterInitMode>
 8006bee:	4603      	mov	r3, r0
 8006bf0:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8006bf2:	7bfb      	ldrb	r3, [r7, #15]
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d12c      	bne.n	8006c52 <HAL_RTC_Init+0xba>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	689b      	ldr	r3, [r3, #8]
 8006bfe:	687a      	ldr	r2, [r7, #4]
 8006c00:	6812      	ldr	r2, [r2, #0]
 8006c02:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8006c06:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006c0a:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	6899      	ldr	r1, [r3, #8]
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	685a      	ldr	r2, [r3, #4]
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	691b      	ldr	r3, [r3, #16]
 8006c1a:	431a      	orrs	r2, r3
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	695b      	ldr	r3, [r3, #20]
 8006c20:	431a      	orrs	r2, r3
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	430a      	orrs	r2, r1
 8006c28:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	687a      	ldr	r2, [r7, #4]
 8006c30:	68d2      	ldr	r2, [r2, #12]
 8006c32:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	6919      	ldr	r1, [r3, #16]
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	689b      	ldr	r3, [r3, #8]
 8006c3e:	041a      	lsls	r2, r3, #16
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	430a      	orrs	r2, r1
 8006c46:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8006c48:	6878      	ldr	r0, [r7, #4]
 8006c4a:	f000 fa50 	bl	80070ee <RTC_ExitInitMode>
 8006c4e:	4603      	mov	r3, r0
 8006c50:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8006c52:	7bfb      	ldrb	r3, [r7, #15]
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d110      	bne.n	8006c7a <HAL_RTC_Init+0xe2>
    {
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006c66:	641a      	str	r2, [r3, #64]	; 0x40
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	699a      	ldr	r2, [r3, #24]
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	430a      	orrs	r2, r1
 8006c78:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	22ff      	movs	r2, #255	; 0xff
 8006c80:	625a      	str	r2, [r3, #36]	; 0x24
 8006c82:	e001      	b.n	8006c88 <HAL_RTC_Init+0xf0>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 8006c84:	2300      	movs	r3, #0
 8006c86:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8006c88:	7bfb      	ldrb	r3, [r7, #15]
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d102      	bne.n	8006c94 <HAL_RTC_Init+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	2201      	movs	r2, #1
 8006c92:	775a      	strb	r2, [r3, #29]
  }

  return status;
 8006c94:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c96:	4618      	mov	r0, r3
 8006c98:	3710      	adds	r7, #16
 8006c9a:	46bd      	mov	sp, r7
 8006c9c:	bd80      	pop	{r7, pc}

08006c9e <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8006c9e:	b590      	push	{r4, r7, lr}
 8006ca0:	b087      	sub	sp, #28
 8006ca2:	af00      	add	r7, sp, #0
 8006ca4:	60f8      	str	r0, [r7, #12]
 8006ca6:	60b9      	str	r1, [r7, #8]
 8006ca8:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8006caa:	2300      	movs	r3, #0
 8006cac:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	7f1b      	ldrb	r3, [r3, #28]
 8006cb2:	2b01      	cmp	r3, #1
 8006cb4:	d101      	bne.n	8006cba <HAL_RTC_SetTime+0x1c>
 8006cb6:	2302      	movs	r3, #2
 8006cb8:	e087      	b.n	8006dca <HAL_RTC_SetTime+0x12c>
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	2201      	movs	r2, #1
 8006cbe:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	2202      	movs	r2, #2
 8006cc4:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d126      	bne.n	8006d1a <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	689b      	ldr	r3, [r3, #8]
 8006cd2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d102      	bne.n	8006ce0 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8006cda:	68bb      	ldr	r3, [r7, #8]
 8006cdc:	2200      	movs	r2, #0
 8006cde:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8006ce0:	68bb      	ldr	r3, [r7, #8]
 8006ce2:	781b      	ldrb	r3, [r3, #0]
 8006ce4:	4618      	mov	r0, r3
 8006ce6:	f000 fa27 	bl	8007138 <RTC_ByteToBcd2>
 8006cea:	4603      	mov	r3, r0
 8006cec:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8006cee:	68bb      	ldr	r3, [r7, #8]
 8006cf0:	785b      	ldrb	r3, [r3, #1]
 8006cf2:	4618      	mov	r0, r3
 8006cf4:	f000 fa20 	bl	8007138 <RTC_ByteToBcd2>
 8006cf8:	4603      	mov	r3, r0
 8006cfa:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8006cfc:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8006cfe:	68bb      	ldr	r3, [r7, #8]
 8006d00:	789b      	ldrb	r3, [r3, #2]
 8006d02:	4618      	mov	r0, r3
 8006d04:	f000 fa18 	bl	8007138 <RTC_ByteToBcd2>
 8006d08:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8006d0a:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8006d0e:	68bb      	ldr	r3, [r7, #8]
 8006d10:	78db      	ldrb	r3, [r3, #3]
 8006d12:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8006d14:	4313      	orrs	r3, r2
 8006d16:	617b      	str	r3, [r7, #20]
 8006d18:	e018      	b.n	8006d4c <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	689b      	ldr	r3, [r3, #8]
 8006d20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d102      	bne.n	8006d2e <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8006d28:	68bb      	ldr	r3, [r7, #8]
 8006d2a:	2200      	movs	r2, #0
 8006d2c:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8006d2e:	68bb      	ldr	r3, [r7, #8]
 8006d30:	781b      	ldrb	r3, [r3, #0]
 8006d32:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8006d34:	68bb      	ldr	r3, [r7, #8]
 8006d36:	785b      	ldrb	r3, [r3, #1]
 8006d38:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8006d3a:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8006d3c:	68ba      	ldr	r2, [r7, #8]
 8006d3e:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8006d40:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8006d42:	68bb      	ldr	r3, [r7, #8]
 8006d44:	78db      	ldrb	r3, [r3, #3]
 8006d46:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8006d48:	4313      	orrs	r3, r2
 8006d4a:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	22ca      	movs	r2, #202	; 0xca
 8006d52:	625a      	str	r2, [r3, #36]	; 0x24
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	2253      	movs	r2, #83	; 0x53
 8006d5a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8006d5c:	68f8      	ldr	r0, [r7, #12]
 8006d5e:	f000 f98f 	bl	8007080 <RTC_EnterInitMode>
 8006d62:	4603      	mov	r3, r0
 8006d64:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8006d66:	7cfb      	ldrb	r3, [r7, #19]
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d120      	bne.n	8006dae <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	681a      	ldr	r2, [r3, #0]
 8006d70:	697b      	ldr	r3, [r7, #20]
 8006d72:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8006d76:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8006d7a:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	689a      	ldr	r2, [r3, #8]
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006d8a:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	6899      	ldr	r1, [r3, #8]
 8006d92:	68bb      	ldr	r3, [r7, #8]
 8006d94:	68da      	ldr	r2, [r3, #12]
 8006d96:	68bb      	ldr	r3, [r7, #8]
 8006d98:	691b      	ldr	r3, [r3, #16]
 8006d9a:	431a      	orrs	r2, r3
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	430a      	orrs	r2, r1
 8006da2:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8006da4:	68f8      	ldr	r0, [r7, #12]
 8006da6:	f000 f9a2 	bl	80070ee <RTC_ExitInitMode>
 8006daa:	4603      	mov	r3, r0
 8006dac:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8006dae:	7cfb      	ldrb	r3, [r7, #19]
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d102      	bne.n	8006dba <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	2201      	movs	r2, #1
 8006db8:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	22ff      	movs	r2, #255	; 0xff
 8006dc0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	2200      	movs	r2, #0
 8006dc6:	771a      	strb	r2, [r3, #28]

  return status;
 8006dc8:	7cfb      	ldrb	r3, [r7, #19]
}
 8006dca:	4618      	mov	r0, r3
 8006dcc:	371c      	adds	r7, #28
 8006dce:	46bd      	mov	sp, r7
 8006dd0:	bd90      	pop	{r4, r7, pc}

08006dd2 <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8006dd2:	b580      	push	{r7, lr}
 8006dd4:	b086      	sub	sp, #24
 8006dd6:	af00      	add	r7, sp, #0
 8006dd8:	60f8      	str	r0, [r7, #12]
 8006dda:	60b9      	str	r1, [r7, #8]
 8006ddc:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8006dde:	2300      	movs	r3, #0
 8006de0:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006de8:	68bb      	ldr	r3, [r7, #8]
 8006dea:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	691b      	ldr	r3, [r3, #16]
 8006df2:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8006df6:	68bb      	ldr	r3, [r7, #8]
 8006df8:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8006e04:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8006e08:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8006e0a:	697b      	ldr	r3, [r7, #20]
 8006e0c:	0c1b      	lsrs	r3, r3, #16
 8006e0e:	b2db      	uxtb	r3, r3
 8006e10:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006e14:	b2da      	uxtb	r2, r3
 8006e16:	68bb      	ldr	r3, [r7, #8]
 8006e18:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8006e1a:	697b      	ldr	r3, [r7, #20]
 8006e1c:	0a1b      	lsrs	r3, r3, #8
 8006e1e:	b2db      	uxtb	r3, r3
 8006e20:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006e24:	b2da      	uxtb	r2, r3
 8006e26:	68bb      	ldr	r3, [r7, #8]
 8006e28:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 8006e2a:	697b      	ldr	r3, [r7, #20]
 8006e2c:	b2db      	uxtb	r3, r3
 8006e2e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006e32:	b2da      	uxtb	r2, r3
 8006e34:	68bb      	ldr	r3, [r7, #8]
 8006e36:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 8006e38:	697b      	ldr	r3, [r7, #20]
 8006e3a:	0d9b      	lsrs	r3, r3, #22
 8006e3c:	b2db      	uxtb	r3, r3
 8006e3e:	f003 0301 	and.w	r3, r3, #1
 8006e42:	b2da      	uxtb	r2, r3
 8006e44:	68bb      	ldr	r3, [r7, #8]
 8006e46:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d11a      	bne.n	8006e84 <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8006e4e:	68bb      	ldr	r3, [r7, #8]
 8006e50:	781b      	ldrb	r3, [r3, #0]
 8006e52:	4618      	mov	r0, r3
 8006e54:	f000 f98e 	bl	8007174 <RTC_Bcd2ToByte>
 8006e58:	4603      	mov	r3, r0
 8006e5a:	461a      	mov	r2, r3
 8006e5c:	68bb      	ldr	r3, [r7, #8]
 8006e5e:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8006e60:	68bb      	ldr	r3, [r7, #8]
 8006e62:	785b      	ldrb	r3, [r3, #1]
 8006e64:	4618      	mov	r0, r3
 8006e66:	f000 f985 	bl	8007174 <RTC_Bcd2ToByte>
 8006e6a:	4603      	mov	r3, r0
 8006e6c:	461a      	mov	r2, r3
 8006e6e:	68bb      	ldr	r3, [r7, #8]
 8006e70:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8006e72:	68bb      	ldr	r3, [r7, #8]
 8006e74:	789b      	ldrb	r3, [r3, #2]
 8006e76:	4618      	mov	r0, r3
 8006e78:	f000 f97c 	bl	8007174 <RTC_Bcd2ToByte>
 8006e7c:	4603      	mov	r3, r0
 8006e7e:	461a      	mov	r2, r3
 8006e80:	68bb      	ldr	r3, [r7, #8]
 8006e82:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8006e84:	2300      	movs	r3, #0
}
 8006e86:	4618      	mov	r0, r3
 8006e88:	3718      	adds	r7, #24
 8006e8a:	46bd      	mov	sp, r7
 8006e8c:	bd80      	pop	{r7, pc}

08006e8e <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8006e8e:	b590      	push	{r4, r7, lr}
 8006e90:	b087      	sub	sp, #28
 8006e92:	af00      	add	r7, sp, #0
 8006e94:	60f8      	str	r0, [r7, #12]
 8006e96:	60b9      	str	r1, [r7, #8]
 8006e98:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8006e9a:	2300      	movs	r3, #0
 8006e9c:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	7f1b      	ldrb	r3, [r3, #28]
 8006ea2:	2b01      	cmp	r3, #1
 8006ea4:	d101      	bne.n	8006eaa <HAL_RTC_SetDate+0x1c>
 8006ea6:	2302      	movs	r3, #2
 8006ea8:	e071      	b.n	8006f8e <HAL_RTC_SetDate+0x100>
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	2201      	movs	r2, #1
 8006eae:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	2202      	movs	r2, #2
 8006eb4:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d10e      	bne.n	8006eda <HAL_RTC_SetDate+0x4c>
 8006ebc:	68bb      	ldr	r3, [r7, #8]
 8006ebe:	785b      	ldrb	r3, [r3, #1]
 8006ec0:	f003 0310 	and.w	r3, r3, #16
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d008      	beq.n	8006eda <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8006ec8:	68bb      	ldr	r3, [r7, #8]
 8006eca:	785b      	ldrb	r3, [r3, #1]
 8006ecc:	f023 0310 	bic.w	r3, r3, #16
 8006ed0:	b2db      	uxtb	r3, r3
 8006ed2:	330a      	adds	r3, #10
 8006ed4:	b2da      	uxtb	r2, r3
 8006ed6:	68bb      	ldr	r3, [r7, #8]
 8006ed8:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d11c      	bne.n	8006f1a <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8006ee0:	68bb      	ldr	r3, [r7, #8]
 8006ee2:	78db      	ldrb	r3, [r3, #3]
 8006ee4:	4618      	mov	r0, r3
 8006ee6:	f000 f927 	bl	8007138 <RTC_ByteToBcd2>
 8006eea:	4603      	mov	r3, r0
 8006eec:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8006eee:	68bb      	ldr	r3, [r7, #8]
 8006ef0:	785b      	ldrb	r3, [r3, #1]
 8006ef2:	4618      	mov	r0, r3
 8006ef4:	f000 f920 	bl	8007138 <RTC_ByteToBcd2>
 8006ef8:	4603      	mov	r3, r0
 8006efa:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8006efc:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8006efe:	68bb      	ldr	r3, [r7, #8]
 8006f00:	789b      	ldrb	r3, [r3, #2]
 8006f02:	4618      	mov	r0, r3
 8006f04:	f000 f918 	bl	8007138 <RTC_ByteToBcd2>
 8006f08:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8006f0a:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8006f0e:	68bb      	ldr	r3, [r7, #8]
 8006f10:	781b      	ldrb	r3, [r3, #0]
 8006f12:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8006f14:	4313      	orrs	r3, r2
 8006f16:	617b      	str	r3, [r7, #20]
 8006f18:	e00e      	b.n	8006f38 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8006f1a:	68bb      	ldr	r3, [r7, #8]
 8006f1c:	78db      	ldrb	r3, [r3, #3]
 8006f1e:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8006f20:	68bb      	ldr	r3, [r7, #8]
 8006f22:	785b      	ldrb	r3, [r3, #1]
 8006f24:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8006f26:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8006f28:	68ba      	ldr	r2, [r7, #8]
 8006f2a:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8006f2c:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8006f2e:	68bb      	ldr	r3, [r7, #8]
 8006f30:	781b      	ldrb	r3, [r3, #0]
 8006f32:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8006f34:	4313      	orrs	r3, r2
 8006f36:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	22ca      	movs	r2, #202	; 0xca
 8006f3e:	625a      	str	r2, [r3, #36]	; 0x24
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	2253      	movs	r2, #83	; 0x53
 8006f46:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8006f48:	68f8      	ldr	r0, [r7, #12]
 8006f4a:	f000 f899 	bl	8007080 <RTC_EnterInitMode>
 8006f4e:	4603      	mov	r3, r0
 8006f50:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8006f52:	7cfb      	ldrb	r3, [r7, #19]
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d10c      	bne.n	8006f72 <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	681a      	ldr	r2, [r3, #0]
 8006f5c:	697b      	ldr	r3, [r7, #20]
 8006f5e:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8006f62:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8006f66:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8006f68:	68f8      	ldr	r0, [r7, #12]
 8006f6a:	f000 f8c0 	bl	80070ee <RTC_ExitInitMode>
 8006f6e:	4603      	mov	r3, r0
 8006f70:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8006f72:	7cfb      	ldrb	r3, [r7, #19]
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	d102      	bne.n	8006f7e <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	2201      	movs	r2, #1
 8006f7c:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	22ff      	movs	r2, #255	; 0xff
 8006f84:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	2200      	movs	r2, #0
 8006f8a:	771a      	strb	r2, [r3, #28]

  return status;
 8006f8c:	7cfb      	ldrb	r3, [r7, #19]
}
 8006f8e:	4618      	mov	r0, r3
 8006f90:	371c      	adds	r7, #28
 8006f92:	46bd      	mov	sp, r7
 8006f94:	bd90      	pop	{r4, r7, pc}

08006f96 <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8006f96:	b580      	push	{r7, lr}
 8006f98:	b086      	sub	sp, #24
 8006f9a:	af00      	add	r7, sp, #0
 8006f9c:	60f8      	str	r0, [r7, #12]
 8006f9e:	60b9      	str	r1, [r7, #8]
 8006fa0:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8006fa2:	2300      	movs	r3, #0
 8006fa4:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	685b      	ldr	r3, [r3, #4]
 8006fac:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8006fb0:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8006fb4:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8006fb6:	697b      	ldr	r3, [r7, #20]
 8006fb8:	0c1b      	lsrs	r3, r3, #16
 8006fba:	b2da      	uxtb	r2, r3
 8006fbc:	68bb      	ldr	r3, [r7, #8]
 8006fbe:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8006fc0:	697b      	ldr	r3, [r7, #20]
 8006fc2:	0a1b      	lsrs	r3, r3, #8
 8006fc4:	b2db      	uxtb	r3, r3
 8006fc6:	f003 031f 	and.w	r3, r3, #31
 8006fca:	b2da      	uxtb	r2, r3
 8006fcc:	68bb      	ldr	r3, [r7, #8]
 8006fce:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8006fd0:	697b      	ldr	r3, [r7, #20]
 8006fd2:	b2db      	uxtb	r3, r3
 8006fd4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006fd8:	b2da      	uxtb	r2, r3
 8006fda:	68bb      	ldr	r3, [r7, #8]
 8006fdc:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 8006fde:	697b      	ldr	r3, [r7, #20]
 8006fe0:	0b5b      	lsrs	r3, r3, #13
 8006fe2:	b2db      	uxtb	r3, r3
 8006fe4:	f003 0307 	and.w	r3, r3, #7
 8006fe8:	b2da      	uxtb	r2, r3
 8006fea:	68bb      	ldr	r3, [r7, #8]
 8006fec:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d11a      	bne.n	800702a <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8006ff4:	68bb      	ldr	r3, [r7, #8]
 8006ff6:	78db      	ldrb	r3, [r3, #3]
 8006ff8:	4618      	mov	r0, r3
 8006ffa:	f000 f8bb 	bl	8007174 <RTC_Bcd2ToByte>
 8006ffe:	4603      	mov	r3, r0
 8007000:	461a      	mov	r2, r3
 8007002:	68bb      	ldr	r3, [r7, #8]
 8007004:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8007006:	68bb      	ldr	r3, [r7, #8]
 8007008:	785b      	ldrb	r3, [r3, #1]
 800700a:	4618      	mov	r0, r3
 800700c:	f000 f8b2 	bl	8007174 <RTC_Bcd2ToByte>
 8007010:	4603      	mov	r3, r0
 8007012:	461a      	mov	r2, r3
 8007014:	68bb      	ldr	r3, [r7, #8]
 8007016:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8007018:	68bb      	ldr	r3, [r7, #8]
 800701a:	789b      	ldrb	r3, [r3, #2]
 800701c:	4618      	mov	r0, r3
 800701e:	f000 f8a9 	bl	8007174 <RTC_Bcd2ToByte>
 8007022:	4603      	mov	r3, r0
 8007024:	461a      	mov	r2, r3
 8007026:	68bb      	ldr	r3, [r7, #8]
 8007028:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 800702a:	2300      	movs	r3, #0
}
 800702c:	4618      	mov	r0, r3
 800702e:	3718      	adds	r7, #24
 8007030:	46bd      	mov	sp, r7
 8007032:	bd80      	pop	{r7, pc}

08007034 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8007034:	b580      	push	{r7, lr}
 8007036:	b084      	sub	sp, #16
 8007038:	af00      	add	r7, sp, #0
 800703a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800703c:	2300      	movs	r3, #0
 800703e:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	4a0d      	ldr	r2, [pc, #52]	; (800707c <HAL_RTC_WaitForSynchro+0x48>)
 8007046:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007048:	f7fc f93a 	bl	80032c0 <HAL_GetTick>
 800704c:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800704e:	e009      	b.n	8007064 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8007050:	f7fc f936 	bl	80032c0 <HAL_GetTick>
 8007054:	4602      	mov	r2, r0
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	1ad3      	subs	r3, r2, r3
 800705a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800705e:	d901      	bls.n	8007064 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 8007060:	2303      	movs	r3, #3
 8007062:	e007      	b.n	8007074 <HAL_RTC_WaitForSynchro+0x40>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	68db      	ldr	r3, [r3, #12]
 800706a:	f003 0320 	and.w	r3, r3, #32
 800706e:	2b00      	cmp	r3, #0
 8007070:	d0ee      	beq.n	8007050 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 8007072:	2300      	movs	r3, #0
}
 8007074:	4618      	mov	r0, r3
 8007076:	3710      	adds	r7, #16
 8007078:	46bd      	mov	sp, r7
 800707a:	bd80      	pop	{r7, pc}
 800707c:	0001ff5f 	.word	0x0001ff5f

08007080 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8007080:	b580      	push	{r7, lr}
 8007082:	b084      	sub	sp, #16
 8007084:	af00      	add	r7, sp, #0
 8007086:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007088:	2300      	movs	r3, #0
 800708a:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 800708c:	2300      	movs	r3, #0
 800708e:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	68db      	ldr	r3, [r3, #12]
 8007096:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800709a:	2b00      	cmp	r3, #0
 800709c:	d122      	bne.n	80070e4 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	68da      	ldr	r2, [r3, #12]
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80070ac:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80070ae:	f7fc f907 	bl	80032c0 <HAL_GetTick>
 80070b2:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80070b4:	e00c      	b.n	80070d0 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80070b6:	f7fc f903 	bl	80032c0 <HAL_GetTick>
 80070ba:	4602      	mov	r2, r0
 80070bc:	68bb      	ldr	r3, [r7, #8]
 80070be:	1ad3      	subs	r3, r2, r3
 80070c0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80070c4:	d904      	bls.n	80070d0 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	2204      	movs	r2, #4
 80070ca:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 80070cc:	2301      	movs	r3, #1
 80070ce:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	68db      	ldr	r3, [r3, #12]
 80070d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d102      	bne.n	80070e4 <RTC_EnterInitMode+0x64>
 80070de:	7bfb      	ldrb	r3, [r7, #15]
 80070e0:	2b01      	cmp	r3, #1
 80070e2:	d1e8      	bne.n	80070b6 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 80070e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80070e6:	4618      	mov	r0, r3
 80070e8:	3710      	adds	r7, #16
 80070ea:	46bd      	mov	sp, r7
 80070ec:	bd80      	pop	{r7, pc}

080070ee <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80070ee:	b580      	push	{r7, lr}
 80070f0:	b084      	sub	sp, #16
 80070f2:	af00      	add	r7, sp, #0
 80070f4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80070f6:	2300      	movs	r3, #0
 80070f8:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	68da      	ldr	r2, [r3, #12]
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007108:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	689b      	ldr	r3, [r3, #8]
 8007110:	f003 0320 	and.w	r3, r3, #32
 8007114:	2b00      	cmp	r3, #0
 8007116:	d10a      	bne.n	800712e <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8007118:	6878      	ldr	r0, [r7, #4]
 800711a:	f7ff ff8b 	bl	8007034 <HAL_RTC_WaitForSynchro>
 800711e:	4603      	mov	r3, r0
 8007120:	2b00      	cmp	r3, #0
 8007122:	d004      	beq.n	800712e <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	2204      	movs	r2, #4
 8007128:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 800712a:	2301      	movs	r3, #1
 800712c:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 800712e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007130:	4618      	mov	r0, r3
 8007132:	3710      	adds	r7, #16
 8007134:	46bd      	mov	sp, r7
 8007136:	bd80      	pop	{r7, pc}

08007138 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8007138:	b480      	push	{r7}
 800713a:	b085      	sub	sp, #20
 800713c:	af00      	add	r7, sp, #0
 800713e:	4603      	mov	r3, r0
 8007140:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8007142:	2300      	movs	r3, #0
 8007144:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 8007146:	e005      	b.n	8007154 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	3301      	adds	r3, #1
 800714c:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 800714e:	79fb      	ldrb	r3, [r7, #7]
 8007150:	3b0a      	subs	r3, #10
 8007152:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 8007154:	79fb      	ldrb	r3, [r7, #7]
 8007156:	2b09      	cmp	r3, #9
 8007158:	d8f6      	bhi.n	8007148 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	b2db      	uxtb	r3, r3
 800715e:	011b      	lsls	r3, r3, #4
 8007160:	b2da      	uxtb	r2, r3
 8007162:	79fb      	ldrb	r3, [r7, #7]
 8007164:	4313      	orrs	r3, r2
 8007166:	b2db      	uxtb	r3, r3
}
 8007168:	4618      	mov	r0, r3
 800716a:	3714      	adds	r7, #20
 800716c:	46bd      	mov	sp, r7
 800716e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007172:	4770      	bx	lr

08007174 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 8007174:	b480      	push	{r7}
 8007176:	b085      	sub	sp, #20
 8007178:	af00      	add	r7, sp, #0
 800717a:	4603      	mov	r3, r0
 800717c:	71fb      	strb	r3, [r7, #7]
  uint32_t tens = 0U;
 800717e:	2300      	movs	r3, #0
 8007180:	60fb      	str	r3, [r7, #12]
  tens = (((uint32_t)number & 0xF0U) >> 4U) * 10U;
 8007182:	79fb      	ldrb	r3, [r7, #7]
 8007184:	091b      	lsrs	r3, r3, #4
 8007186:	b2db      	uxtb	r3, r3
 8007188:	461a      	mov	r2, r3
 800718a:	4613      	mov	r3, r2
 800718c:	009b      	lsls	r3, r3, #2
 800718e:	4413      	add	r3, r2
 8007190:	005b      	lsls	r3, r3, #1
 8007192:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tens + ((uint32_t)number & 0x0FU));
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	b2da      	uxtb	r2, r3
 8007198:	79fb      	ldrb	r3, [r7, #7]
 800719a:	f003 030f 	and.w	r3, r3, #15
 800719e:	b2db      	uxtb	r3, r3
 80071a0:	4413      	add	r3, r2
 80071a2:	b2db      	uxtb	r3, r3
}
 80071a4:	4618      	mov	r0, r3
 80071a6:	3714      	adds	r7, #20
 80071a8:	46bd      	mov	sp, r7
 80071aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ae:	4770      	bx	lr

080071b0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80071b0:	b580      	push	{r7, lr}
 80071b2:	b084      	sub	sp, #16
 80071b4:	af00      	add	r7, sp, #0
 80071b6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d101      	bne.n	80071c2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80071be:	2301      	movs	r3, #1
 80071c0:	e09d      	b.n	80072fe <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d108      	bne.n	80071dc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	685b      	ldr	r3, [r3, #4]
 80071ce:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80071d2:	d009      	beq.n	80071e8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	2200      	movs	r2, #0
 80071d8:	61da      	str	r2, [r3, #28]
 80071da:	e005      	b.n	80071e8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	2200      	movs	r2, #0
 80071e0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	2200      	movs	r2, #0
 80071e6:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	2200      	movs	r2, #0
 80071ec:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80071f4:	b2db      	uxtb	r3, r3
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d106      	bne.n	8007208 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	2200      	movs	r2, #0
 80071fe:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007202:	6878      	ldr	r0, [r7, #4]
 8007204:	f7fb fd12 	bl	8002c2c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	2202      	movs	r2, #2
 800720c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	681a      	ldr	r2, [r3, #0]
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800721e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	68db      	ldr	r3, [r3, #12]
 8007224:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007228:	d902      	bls.n	8007230 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800722a:	2300      	movs	r3, #0
 800722c:	60fb      	str	r3, [r7, #12]
 800722e:	e002      	b.n	8007236 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8007230:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007234:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	68db      	ldr	r3, [r3, #12]
 800723a:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800723e:	d007      	beq.n	8007250 <HAL_SPI_Init+0xa0>
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	68db      	ldr	r3, [r3, #12]
 8007244:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007248:	d002      	beq.n	8007250 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	2200      	movs	r2, #0
 800724e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	685b      	ldr	r3, [r3, #4]
 8007254:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	689b      	ldr	r3, [r3, #8]
 800725c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8007260:	431a      	orrs	r2, r3
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	691b      	ldr	r3, [r3, #16]
 8007266:	f003 0302 	and.w	r3, r3, #2
 800726a:	431a      	orrs	r2, r3
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	695b      	ldr	r3, [r3, #20]
 8007270:	f003 0301 	and.w	r3, r3, #1
 8007274:	431a      	orrs	r2, r3
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	699b      	ldr	r3, [r3, #24]
 800727a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800727e:	431a      	orrs	r2, r3
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	69db      	ldr	r3, [r3, #28]
 8007284:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007288:	431a      	orrs	r2, r3
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	6a1b      	ldr	r3, [r3, #32]
 800728e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007292:	ea42 0103 	orr.w	r1, r2, r3
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800729a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	430a      	orrs	r2, r1
 80072a4:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	699b      	ldr	r3, [r3, #24]
 80072aa:	0c1b      	lsrs	r3, r3, #16
 80072ac:	f003 0204 	and.w	r2, r3, #4
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072b4:	f003 0310 	and.w	r3, r3, #16
 80072b8:	431a      	orrs	r2, r3
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80072be:	f003 0308 	and.w	r3, r3, #8
 80072c2:	431a      	orrs	r2, r3
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	68db      	ldr	r3, [r3, #12]
 80072c8:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80072cc:	ea42 0103 	orr.w	r1, r2, r3
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	430a      	orrs	r2, r1
 80072dc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	69da      	ldr	r2, [r3, #28]
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80072ec:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	2200      	movs	r2, #0
 80072f2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	2201      	movs	r2, #1
 80072f8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80072fc:	2300      	movs	r3, #0
}
 80072fe:	4618      	mov	r0, r3
 8007300:	3710      	adds	r7, #16
 8007302:	46bd      	mov	sp, r7
 8007304:	bd80      	pop	{r7, pc}

08007306 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007306:	b580      	push	{r7, lr}
 8007308:	b082      	sub	sp, #8
 800730a:	af00      	add	r7, sp, #0
 800730c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	2b00      	cmp	r3, #0
 8007312:	d101      	bne.n	8007318 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007314:	2301      	movs	r3, #1
 8007316:	e049      	b.n	80073ac <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800731e:	b2db      	uxtb	r3, r3
 8007320:	2b00      	cmp	r3, #0
 8007322:	d106      	bne.n	8007332 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	2200      	movs	r2, #0
 8007328:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800732c:	6878      	ldr	r0, [r7, #4]
 800732e:	f7fb fcbf 	bl	8002cb0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	2202      	movs	r2, #2
 8007336:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	681a      	ldr	r2, [r3, #0]
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	3304      	adds	r3, #4
 8007342:	4619      	mov	r1, r3
 8007344:	4610      	mov	r0, r2
 8007346:	f000 fd27 	bl	8007d98 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	2201      	movs	r2, #1
 800734e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	2201      	movs	r2, #1
 8007356:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	2201      	movs	r2, #1
 800735e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	2201      	movs	r2, #1
 8007366:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	2201      	movs	r2, #1
 800736e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	2201      	movs	r2, #1
 8007376:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	2201      	movs	r2, #1
 800737e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	2201      	movs	r2, #1
 8007386:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	2201      	movs	r2, #1
 800738e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	2201      	movs	r2, #1
 8007396:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	2201      	movs	r2, #1
 800739e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	2201      	movs	r2, #1
 80073a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80073aa:	2300      	movs	r3, #0
}
 80073ac:	4618      	mov	r0, r3
 80073ae:	3708      	adds	r7, #8
 80073b0:	46bd      	mov	sp, r7
 80073b2:	bd80      	pop	{r7, pc}

080073b4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80073b4:	b480      	push	{r7}
 80073b6:	b085      	sub	sp, #20
 80073b8:	af00      	add	r7, sp, #0
 80073ba:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80073c2:	b2db      	uxtb	r3, r3
 80073c4:	2b01      	cmp	r3, #1
 80073c6:	d001      	beq.n	80073cc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80073c8:	2301      	movs	r3, #1
 80073ca:	e04a      	b.n	8007462 <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	2202      	movs	r2, #2
 80073d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	68da      	ldr	r2, [r3, #12]
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	f042 0201 	orr.w	r2, r2, #1
 80073e2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	4a21      	ldr	r2, [pc, #132]	; (8007470 <HAL_TIM_Base_Start_IT+0xbc>)
 80073ea:	4293      	cmp	r3, r2
 80073ec:	d018      	beq.n	8007420 <HAL_TIM_Base_Start_IT+0x6c>
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80073f6:	d013      	beq.n	8007420 <HAL_TIM_Base_Start_IT+0x6c>
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	4a1d      	ldr	r2, [pc, #116]	; (8007474 <HAL_TIM_Base_Start_IT+0xc0>)
 80073fe:	4293      	cmp	r3, r2
 8007400:	d00e      	beq.n	8007420 <HAL_TIM_Base_Start_IT+0x6c>
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	4a1c      	ldr	r2, [pc, #112]	; (8007478 <HAL_TIM_Base_Start_IT+0xc4>)
 8007408:	4293      	cmp	r3, r2
 800740a:	d009      	beq.n	8007420 <HAL_TIM_Base_Start_IT+0x6c>
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	4a1a      	ldr	r2, [pc, #104]	; (800747c <HAL_TIM_Base_Start_IT+0xc8>)
 8007412:	4293      	cmp	r3, r2
 8007414:	d004      	beq.n	8007420 <HAL_TIM_Base_Start_IT+0x6c>
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	4a19      	ldr	r2, [pc, #100]	; (8007480 <HAL_TIM_Base_Start_IT+0xcc>)
 800741c:	4293      	cmp	r3, r2
 800741e:	d115      	bne.n	800744c <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	689a      	ldr	r2, [r3, #8]
 8007426:	4b17      	ldr	r3, [pc, #92]	; (8007484 <HAL_TIM_Base_Start_IT+0xd0>)
 8007428:	4013      	ands	r3, r2
 800742a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	2b06      	cmp	r3, #6
 8007430:	d015      	beq.n	800745e <HAL_TIM_Base_Start_IT+0xaa>
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007438:	d011      	beq.n	800745e <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	681a      	ldr	r2, [r3, #0]
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	f042 0201 	orr.w	r2, r2, #1
 8007448:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800744a:	e008      	b.n	800745e <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	681a      	ldr	r2, [r3, #0]
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	f042 0201 	orr.w	r2, r2, #1
 800745a:	601a      	str	r2, [r3, #0]
 800745c:	e000      	b.n	8007460 <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800745e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007460:	2300      	movs	r3, #0
}
 8007462:	4618      	mov	r0, r3
 8007464:	3714      	adds	r7, #20
 8007466:	46bd      	mov	sp, r7
 8007468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800746c:	4770      	bx	lr
 800746e:	bf00      	nop
 8007470:	40012c00 	.word	0x40012c00
 8007474:	40000400 	.word	0x40000400
 8007478:	40000800 	.word	0x40000800
 800747c:	40013400 	.word	0x40013400
 8007480:	40014000 	.word	0x40014000
 8007484:	00010007 	.word	0x00010007

08007488 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007488:	b580      	push	{r7, lr}
 800748a:	b082      	sub	sp, #8
 800748c:	af00      	add	r7, sp, #0
 800748e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	2b00      	cmp	r3, #0
 8007494:	d101      	bne.n	800749a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007496:	2301      	movs	r3, #1
 8007498:	e049      	b.n	800752e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80074a0:	b2db      	uxtb	r3, r3
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d106      	bne.n	80074b4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	2200      	movs	r2, #0
 80074aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80074ae:	6878      	ldr	r0, [r7, #4]
 80074b0:	f000 f841 	bl	8007536 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	2202      	movs	r2, #2
 80074b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	681a      	ldr	r2, [r3, #0]
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	3304      	adds	r3, #4
 80074c4:	4619      	mov	r1, r3
 80074c6:	4610      	mov	r0, r2
 80074c8:	f000 fc66 	bl	8007d98 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	2201      	movs	r2, #1
 80074d0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	2201      	movs	r2, #1
 80074d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	2201      	movs	r2, #1
 80074e0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	2201      	movs	r2, #1
 80074e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	2201      	movs	r2, #1
 80074f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	2201      	movs	r2, #1
 80074f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	2201      	movs	r2, #1
 8007500:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	2201      	movs	r2, #1
 8007508:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	2201      	movs	r2, #1
 8007510:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	2201      	movs	r2, #1
 8007518:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	2201      	movs	r2, #1
 8007520:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	2201      	movs	r2, #1
 8007528:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800752c:	2300      	movs	r3, #0
}
 800752e:	4618      	mov	r0, r3
 8007530:	3708      	adds	r7, #8
 8007532:	46bd      	mov	sp, r7
 8007534:	bd80      	pop	{r7, pc}

08007536 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8007536:	b480      	push	{r7}
 8007538:	b083      	sub	sp, #12
 800753a:	af00      	add	r7, sp, #0
 800753c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800753e:	bf00      	nop
 8007540:	370c      	adds	r7, #12
 8007542:	46bd      	mov	sp, r7
 8007544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007548:	4770      	bx	lr
	...

0800754c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800754c:	b580      	push	{r7, lr}
 800754e:	b084      	sub	sp, #16
 8007550:	af00      	add	r7, sp, #0
 8007552:	6078      	str	r0, [r7, #4]
 8007554:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007556:	683b      	ldr	r3, [r7, #0]
 8007558:	2b00      	cmp	r3, #0
 800755a:	d109      	bne.n	8007570 <HAL_TIM_PWM_Start+0x24>
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007562:	b2db      	uxtb	r3, r3
 8007564:	2b01      	cmp	r3, #1
 8007566:	bf14      	ite	ne
 8007568:	2301      	movne	r3, #1
 800756a:	2300      	moveq	r3, #0
 800756c:	b2db      	uxtb	r3, r3
 800756e:	e03c      	b.n	80075ea <HAL_TIM_PWM_Start+0x9e>
 8007570:	683b      	ldr	r3, [r7, #0]
 8007572:	2b04      	cmp	r3, #4
 8007574:	d109      	bne.n	800758a <HAL_TIM_PWM_Start+0x3e>
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800757c:	b2db      	uxtb	r3, r3
 800757e:	2b01      	cmp	r3, #1
 8007580:	bf14      	ite	ne
 8007582:	2301      	movne	r3, #1
 8007584:	2300      	moveq	r3, #0
 8007586:	b2db      	uxtb	r3, r3
 8007588:	e02f      	b.n	80075ea <HAL_TIM_PWM_Start+0x9e>
 800758a:	683b      	ldr	r3, [r7, #0]
 800758c:	2b08      	cmp	r3, #8
 800758e:	d109      	bne.n	80075a4 <HAL_TIM_PWM_Start+0x58>
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007596:	b2db      	uxtb	r3, r3
 8007598:	2b01      	cmp	r3, #1
 800759a:	bf14      	ite	ne
 800759c:	2301      	movne	r3, #1
 800759e:	2300      	moveq	r3, #0
 80075a0:	b2db      	uxtb	r3, r3
 80075a2:	e022      	b.n	80075ea <HAL_TIM_PWM_Start+0x9e>
 80075a4:	683b      	ldr	r3, [r7, #0]
 80075a6:	2b0c      	cmp	r3, #12
 80075a8:	d109      	bne.n	80075be <HAL_TIM_PWM_Start+0x72>
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80075b0:	b2db      	uxtb	r3, r3
 80075b2:	2b01      	cmp	r3, #1
 80075b4:	bf14      	ite	ne
 80075b6:	2301      	movne	r3, #1
 80075b8:	2300      	moveq	r3, #0
 80075ba:	b2db      	uxtb	r3, r3
 80075bc:	e015      	b.n	80075ea <HAL_TIM_PWM_Start+0x9e>
 80075be:	683b      	ldr	r3, [r7, #0]
 80075c0:	2b10      	cmp	r3, #16
 80075c2:	d109      	bne.n	80075d8 <HAL_TIM_PWM_Start+0x8c>
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80075ca:	b2db      	uxtb	r3, r3
 80075cc:	2b01      	cmp	r3, #1
 80075ce:	bf14      	ite	ne
 80075d0:	2301      	movne	r3, #1
 80075d2:	2300      	moveq	r3, #0
 80075d4:	b2db      	uxtb	r3, r3
 80075d6:	e008      	b.n	80075ea <HAL_TIM_PWM_Start+0x9e>
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80075de:	b2db      	uxtb	r3, r3
 80075e0:	2b01      	cmp	r3, #1
 80075e2:	bf14      	ite	ne
 80075e4:	2301      	movne	r3, #1
 80075e6:	2300      	moveq	r3, #0
 80075e8:	b2db      	uxtb	r3, r3
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d001      	beq.n	80075f2 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80075ee:	2301      	movs	r3, #1
 80075f0:	e097      	b.n	8007722 <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80075f2:	683b      	ldr	r3, [r7, #0]
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d104      	bne.n	8007602 <HAL_TIM_PWM_Start+0xb6>
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	2202      	movs	r2, #2
 80075fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007600:	e023      	b.n	800764a <HAL_TIM_PWM_Start+0xfe>
 8007602:	683b      	ldr	r3, [r7, #0]
 8007604:	2b04      	cmp	r3, #4
 8007606:	d104      	bne.n	8007612 <HAL_TIM_PWM_Start+0xc6>
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	2202      	movs	r2, #2
 800760c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007610:	e01b      	b.n	800764a <HAL_TIM_PWM_Start+0xfe>
 8007612:	683b      	ldr	r3, [r7, #0]
 8007614:	2b08      	cmp	r3, #8
 8007616:	d104      	bne.n	8007622 <HAL_TIM_PWM_Start+0xd6>
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	2202      	movs	r2, #2
 800761c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007620:	e013      	b.n	800764a <HAL_TIM_PWM_Start+0xfe>
 8007622:	683b      	ldr	r3, [r7, #0]
 8007624:	2b0c      	cmp	r3, #12
 8007626:	d104      	bne.n	8007632 <HAL_TIM_PWM_Start+0xe6>
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	2202      	movs	r2, #2
 800762c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007630:	e00b      	b.n	800764a <HAL_TIM_PWM_Start+0xfe>
 8007632:	683b      	ldr	r3, [r7, #0]
 8007634:	2b10      	cmp	r3, #16
 8007636:	d104      	bne.n	8007642 <HAL_TIM_PWM_Start+0xf6>
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	2202      	movs	r2, #2
 800763c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007640:	e003      	b.n	800764a <HAL_TIM_PWM_Start+0xfe>
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	2202      	movs	r2, #2
 8007646:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	2201      	movs	r2, #1
 8007650:	6839      	ldr	r1, [r7, #0]
 8007652:	4618      	mov	r0, r3
 8007654:	f000 ffa0 	bl	8008598 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	4a33      	ldr	r2, [pc, #204]	; (800772c <HAL_TIM_PWM_Start+0x1e0>)
 800765e:	4293      	cmp	r3, r2
 8007660:	d013      	beq.n	800768a <HAL_TIM_PWM_Start+0x13e>
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	4a32      	ldr	r2, [pc, #200]	; (8007730 <HAL_TIM_PWM_Start+0x1e4>)
 8007668:	4293      	cmp	r3, r2
 800766a:	d00e      	beq.n	800768a <HAL_TIM_PWM_Start+0x13e>
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	4a30      	ldr	r2, [pc, #192]	; (8007734 <HAL_TIM_PWM_Start+0x1e8>)
 8007672:	4293      	cmp	r3, r2
 8007674:	d009      	beq.n	800768a <HAL_TIM_PWM_Start+0x13e>
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	4a2f      	ldr	r2, [pc, #188]	; (8007738 <HAL_TIM_PWM_Start+0x1ec>)
 800767c:	4293      	cmp	r3, r2
 800767e:	d004      	beq.n	800768a <HAL_TIM_PWM_Start+0x13e>
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	4a2d      	ldr	r2, [pc, #180]	; (800773c <HAL_TIM_PWM_Start+0x1f0>)
 8007686:	4293      	cmp	r3, r2
 8007688:	d101      	bne.n	800768e <HAL_TIM_PWM_Start+0x142>
 800768a:	2301      	movs	r3, #1
 800768c:	e000      	b.n	8007690 <HAL_TIM_PWM_Start+0x144>
 800768e:	2300      	movs	r3, #0
 8007690:	2b00      	cmp	r3, #0
 8007692:	d007      	beq.n	80076a4 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80076a2:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	4a20      	ldr	r2, [pc, #128]	; (800772c <HAL_TIM_PWM_Start+0x1e0>)
 80076aa:	4293      	cmp	r3, r2
 80076ac:	d018      	beq.n	80076e0 <HAL_TIM_PWM_Start+0x194>
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80076b6:	d013      	beq.n	80076e0 <HAL_TIM_PWM_Start+0x194>
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	4a20      	ldr	r2, [pc, #128]	; (8007740 <HAL_TIM_PWM_Start+0x1f4>)
 80076be:	4293      	cmp	r3, r2
 80076c0:	d00e      	beq.n	80076e0 <HAL_TIM_PWM_Start+0x194>
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	4a1f      	ldr	r2, [pc, #124]	; (8007744 <HAL_TIM_PWM_Start+0x1f8>)
 80076c8:	4293      	cmp	r3, r2
 80076ca:	d009      	beq.n	80076e0 <HAL_TIM_PWM_Start+0x194>
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	4a17      	ldr	r2, [pc, #92]	; (8007730 <HAL_TIM_PWM_Start+0x1e4>)
 80076d2:	4293      	cmp	r3, r2
 80076d4:	d004      	beq.n	80076e0 <HAL_TIM_PWM_Start+0x194>
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	4a16      	ldr	r2, [pc, #88]	; (8007734 <HAL_TIM_PWM_Start+0x1e8>)
 80076dc:	4293      	cmp	r3, r2
 80076de:	d115      	bne.n	800770c <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	689a      	ldr	r2, [r3, #8]
 80076e6:	4b18      	ldr	r3, [pc, #96]	; (8007748 <HAL_TIM_PWM_Start+0x1fc>)
 80076e8:	4013      	ands	r3, r2
 80076ea:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	2b06      	cmp	r3, #6
 80076f0:	d015      	beq.n	800771e <HAL_TIM_PWM_Start+0x1d2>
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80076f8:	d011      	beq.n	800771e <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	681a      	ldr	r2, [r3, #0]
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	f042 0201 	orr.w	r2, r2, #1
 8007708:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800770a:	e008      	b.n	800771e <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	681a      	ldr	r2, [r3, #0]
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	f042 0201 	orr.w	r2, r2, #1
 800771a:	601a      	str	r2, [r3, #0]
 800771c:	e000      	b.n	8007720 <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800771e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007720:	2300      	movs	r3, #0
}
 8007722:	4618      	mov	r0, r3
 8007724:	3710      	adds	r7, #16
 8007726:	46bd      	mov	sp, r7
 8007728:	bd80      	pop	{r7, pc}
 800772a:	bf00      	nop
 800772c:	40012c00 	.word	0x40012c00
 8007730:	40013400 	.word	0x40013400
 8007734:	40014000 	.word	0x40014000
 8007738:	40014400 	.word	0x40014400
 800773c:	40014800 	.word	0x40014800
 8007740:	40000400 	.word	0x40000400
 8007744:	40000800 	.word	0x40000800
 8007748:	00010007 	.word	0x00010007

0800774c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800774c:	b580      	push	{r7, lr}
 800774e:	b082      	sub	sp, #8
 8007750:	af00      	add	r7, sp, #0
 8007752:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	691b      	ldr	r3, [r3, #16]
 800775a:	f003 0302 	and.w	r3, r3, #2
 800775e:	2b02      	cmp	r3, #2
 8007760:	d122      	bne.n	80077a8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	68db      	ldr	r3, [r3, #12]
 8007768:	f003 0302 	and.w	r3, r3, #2
 800776c:	2b02      	cmp	r3, #2
 800776e:	d11b      	bne.n	80077a8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	f06f 0202 	mvn.w	r2, #2
 8007778:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	2201      	movs	r2, #1
 800777e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	699b      	ldr	r3, [r3, #24]
 8007786:	f003 0303 	and.w	r3, r3, #3
 800778a:	2b00      	cmp	r3, #0
 800778c:	d003      	beq.n	8007796 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800778e:	6878      	ldr	r0, [r7, #4]
 8007790:	f000 fae3 	bl	8007d5a <HAL_TIM_IC_CaptureCallback>
 8007794:	e005      	b.n	80077a2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007796:	6878      	ldr	r0, [r7, #4]
 8007798:	f000 fad5 	bl	8007d46 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800779c:	6878      	ldr	r0, [r7, #4]
 800779e:	f000 fae6 	bl	8007d6e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	2200      	movs	r2, #0
 80077a6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	691b      	ldr	r3, [r3, #16]
 80077ae:	f003 0304 	and.w	r3, r3, #4
 80077b2:	2b04      	cmp	r3, #4
 80077b4:	d122      	bne.n	80077fc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	68db      	ldr	r3, [r3, #12]
 80077bc:	f003 0304 	and.w	r3, r3, #4
 80077c0:	2b04      	cmp	r3, #4
 80077c2:	d11b      	bne.n	80077fc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	f06f 0204 	mvn.w	r2, #4
 80077cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	2202      	movs	r2, #2
 80077d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	699b      	ldr	r3, [r3, #24]
 80077da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80077de:	2b00      	cmp	r3, #0
 80077e0:	d003      	beq.n	80077ea <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80077e2:	6878      	ldr	r0, [r7, #4]
 80077e4:	f000 fab9 	bl	8007d5a <HAL_TIM_IC_CaptureCallback>
 80077e8:	e005      	b.n	80077f6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80077ea:	6878      	ldr	r0, [r7, #4]
 80077ec:	f000 faab 	bl	8007d46 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80077f0:	6878      	ldr	r0, [r7, #4]
 80077f2:	f000 fabc 	bl	8007d6e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	2200      	movs	r2, #0
 80077fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	691b      	ldr	r3, [r3, #16]
 8007802:	f003 0308 	and.w	r3, r3, #8
 8007806:	2b08      	cmp	r3, #8
 8007808:	d122      	bne.n	8007850 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	68db      	ldr	r3, [r3, #12]
 8007810:	f003 0308 	and.w	r3, r3, #8
 8007814:	2b08      	cmp	r3, #8
 8007816:	d11b      	bne.n	8007850 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	f06f 0208 	mvn.w	r2, #8
 8007820:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	2204      	movs	r2, #4
 8007826:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	69db      	ldr	r3, [r3, #28]
 800782e:	f003 0303 	and.w	r3, r3, #3
 8007832:	2b00      	cmp	r3, #0
 8007834:	d003      	beq.n	800783e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007836:	6878      	ldr	r0, [r7, #4]
 8007838:	f000 fa8f 	bl	8007d5a <HAL_TIM_IC_CaptureCallback>
 800783c:	e005      	b.n	800784a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800783e:	6878      	ldr	r0, [r7, #4]
 8007840:	f000 fa81 	bl	8007d46 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007844:	6878      	ldr	r0, [r7, #4]
 8007846:	f000 fa92 	bl	8007d6e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	2200      	movs	r2, #0
 800784e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	691b      	ldr	r3, [r3, #16]
 8007856:	f003 0310 	and.w	r3, r3, #16
 800785a:	2b10      	cmp	r3, #16
 800785c:	d122      	bne.n	80078a4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	68db      	ldr	r3, [r3, #12]
 8007864:	f003 0310 	and.w	r3, r3, #16
 8007868:	2b10      	cmp	r3, #16
 800786a:	d11b      	bne.n	80078a4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	f06f 0210 	mvn.w	r2, #16
 8007874:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	2208      	movs	r2, #8
 800787a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	69db      	ldr	r3, [r3, #28]
 8007882:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007886:	2b00      	cmp	r3, #0
 8007888:	d003      	beq.n	8007892 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800788a:	6878      	ldr	r0, [r7, #4]
 800788c:	f000 fa65 	bl	8007d5a <HAL_TIM_IC_CaptureCallback>
 8007890:	e005      	b.n	800789e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007892:	6878      	ldr	r0, [r7, #4]
 8007894:	f000 fa57 	bl	8007d46 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007898:	6878      	ldr	r0, [r7, #4]
 800789a:	f000 fa68 	bl	8007d6e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	2200      	movs	r2, #0
 80078a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	691b      	ldr	r3, [r3, #16]
 80078aa:	f003 0301 	and.w	r3, r3, #1
 80078ae:	2b01      	cmp	r3, #1
 80078b0:	d10e      	bne.n	80078d0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	68db      	ldr	r3, [r3, #12]
 80078b8:	f003 0301 	and.w	r3, r3, #1
 80078bc:	2b01      	cmp	r3, #1
 80078be:	d107      	bne.n	80078d0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	f06f 0201 	mvn.w	r2, #1
 80078c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80078ca:	6878      	ldr	r0, [r7, #4]
 80078cc:	f7fa f90e 	bl	8001aec <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	691b      	ldr	r3, [r3, #16]
 80078d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80078da:	2b80      	cmp	r3, #128	; 0x80
 80078dc:	d10e      	bne.n	80078fc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	68db      	ldr	r3, [r3, #12]
 80078e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80078e8:	2b80      	cmp	r3, #128	; 0x80
 80078ea:	d107      	bne.n	80078fc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80078f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80078f6:	6878      	ldr	r0, [r7, #4]
 80078f8:	f000 ff7c 	bl	80087f4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	691b      	ldr	r3, [r3, #16]
 8007902:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007906:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800790a:	d10e      	bne.n	800792a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	68db      	ldr	r3, [r3, #12]
 8007912:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007916:	2b80      	cmp	r3, #128	; 0x80
 8007918:	d107      	bne.n	800792a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8007922:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8007924:	6878      	ldr	r0, [r7, #4]
 8007926:	f000 ff6f 	bl	8008808 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	691b      	ldr	r3, [r3, #16]
 8007930:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007934:	2b40      	cmp	r3, #64	; 0x40
 8007936:	d10e      	bne.n	8007956 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	68db      	ldr	r3, [r3, #12]
 800793e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007942:	2b40      	cmp	r3, #64	; 0x40
 8007944:	d107      	bne.n	8007956 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800794e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007950:	6878      	ldr	r0, [r7, #4]
 8007952:	f000 fa16 	bl	8007d82 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	691b      	ldr	r3, [r3, #16]
 800795c:	f003 0320 	and.w	r3, r3, #32
 8007960:	2b20      	cmp	r3, #32
 8007962:	d10e      	bne.n	8007982 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	68db      	ldr	r3, [r3, #12]
 800796a:	f003 0320 	and.w	r3, r3, #32
 800796e:	2b20      	cmp	r3, #32
 8007970:	d107      	bne.n	8007982 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	f06f 0220 	mvn.w	r2, #32
 800797a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800797c:	6878      	ldr	r0, [r7, #4]
 800797e:	f000 ff2f 	bl	80087e0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007982:	bf00      	nop
 8007984:	3708      	adds	r7, #8
 8007986:	46bd      	mov	sp, r7
 8007988:	bd80      	pop	{r7, pc}
	...

0800798c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800798c:	b580      	push	{r7, lr}
 800798e:	b086      	sub	sp, #24
 8007990:	af00      	add	r7, sp, #0
 8007992:	60f8      	str	r0, [r7, #12]
 8007994:	60b9      	str	r1, [r7, #8]
 8007996:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007998:	2300      	movs	r3, #0
 800799a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80079a2:	2b01      	cmp	r3, #1
 80079a4:	d101      	bne.n	80079aa <HAL_TIM_PWM_ConfigChannel+0x1e>
 80079a6:	2302      	movs	r3, #2
 80079a8:	e0ff      	b.n	8007baa <HAL_TIM_PWM_ConfigChannel+0x21e>
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	2201      	movs	r2, #1
 80079ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	2b14      	cmp	r3, #20
 80079b6:	f200 80f0 	bhi.w	8007b9a <HAL_TIM_PWM_ConfigChannel+0x20e>
 80079ba:	a201      	add	r2, pc, #4	; (adr r2, 80079c0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80079bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079c0:	08007a15 	.word	0x08007a15
 80079c4:	08007b9b 	.word	0x08007b9b
 80079c8:	08007b9b 	.word	0x08007b9b
 80079cc:	08007b9b 	.word	0x08007b9b
 80079d0:	08007a55 	.word	0x08007a55
 80079d4:	08007b9b 	.word	0x08007b9b
 80079d8:	08007b9b 	.word	0x08007b9b
 80079dc:	08007b9b 	.word	0x08007b9b
 80079e0:	08007a97 	.word	0x08007a97
 80079e4:	08007b9b 	.word	0x08007b9b
 80079e8:	08007b9b 	.word	0x08007b9b
 80079ec:	08007b9b 	.word	0x08007b9b
 80079f0:	08007ad7 	.word	0x08007ad7
 80079f4:	08007b9b 	.word	0x08007b9b
 80079f8:	08007b9b 	.word	0x08007b9b
 80079fc:	08007b9b 	.word	0x08007b9b
 8007a00:	08007b19 	.word	0x08007b19
 8007a04:	08007b9b 	.word	0x08007b9b
 8007a08:	08007b9b 	.word	0x08007b9b
 8007a0c:	08007b9b 	.word	0x08007b9b
 8007a10:	08007b59 	.word	0x08007b59
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	68b9      	ldr	r1, [r7, #8]
 8007a1a:	4618      	mov	r0, r3
 8007a1c:	f000 fa4c 	bl	8007eb8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	699a      	ldr	r2, [r3, #24]
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	f042 0208 	orr.w	r2, r2, #8
 8007a2e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	699a      	ldr	r2, [r3, #24]
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	f022 0204 	bic.w	r2, r2, #4
 8007a3e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	6999      	ldr	r1, [r3, #24]
 8007a46:	68bb      	ldr	r3, [r7, #8]
 8007a48:	691a      	ldr	r2, [r3, #16]
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	430a      	orrs	r2, r1
 8007a50:	619a      	str	r2, [r3, #24]
      break;
 8007a52:	e0a5      	b.n	8007ba0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	68b9      	ldr	r1, [r7, #8]
 8007a5a:	4618      	mov	r0, r3
 8007a5c:	f000 fabc 	bl	8007fd8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	699a      	ldr	r2, [r3, #24]
 8007a66:	68fb      	ldr	r3, [r7, #12]
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007a6e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	699a      	ldr	r2, [r3, #24]
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007a7e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	6999      	ldr	r1, [r3, #24]
 8007a86:	68bb      	ldr	r3, [r7, #8]
 8007a88:	691b      	ldr	r3, [r3, #16]
 8007a8a:	021a      	lsls	r2, r3, #8
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	430a      	orrs	r2, r1
 8007a92:	619a      	str	r2, [r3, #24]
      break;
 8007a94:	e084      	b.n	8007ba0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	68b9      	ldr	r1, [r7, #8]
 8007a9c:	4618      	mov	r0, r3
 8007a9e:	f000 fb25 	bl	80080ec <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	69da      	ldr	r2, [r3, #28]
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	f042 0208 	orr.w	r2, r2, #8
 8007ab0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007ab2:	68fb      	ldr	r3, [r7, #12]
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	69da      	ldr	r2, [r3, #28]
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	f022 0204 	bic.w	r2, r2, #4
 8007ac0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	69d9      	ldr	r1, [r3, #28]
 8007ac8:	68bb      	ldr	r3, [r7, #8]
 8007aca:	691a      	ldr	r2, [r3, #16]
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	430a      	orrs	r2, r1
 8007ad2:	61da      	str	r2, [r3, #28]
      break;
 8007ad4:	e064      	b.n	8007ba0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	68b9      	ldr	r1, [r7, #8]
 8007adc:	4618      	mov	r0, r3
 8007ade:	f000 fb8d 	bl	80081fc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	69da      	ldr	r2, [r3, #28]
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007af0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	69da      	ldr	r2, [r3, #28]
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007b00:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	69d9      	ldr	r1, [r3, #28]
 8007b08:	68bb      	ldr	r3, [r7, #8]
 8007b0a:	691b      	ldr	r3, [r3, #16]
 8007b0c:	021a      	lsls	r2, r3, #8
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	430a      	orrs	r2, r1
 8007b14:	61da      	str	r2, [r3, #28]
      break;
 8007b16:	e043      	b.n	8007ba0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	68b9      	ldr	r1, [r7, #8]
 8007b1e:	4618      	mov	r0, r3
 8007b20:	f000 fbd6 	bl	80082d0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	f042 0208 	orr.w	r2, r2, #8
 8007b32:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	f022 0204 	bic.w	r2, r2, #4
 8007b42:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8007b4a:	68bb      	ldr	r3, [r7, #8]
 8007b4c:	691a      	ldr	r2, [r3, #16]
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	430a      	orrs	r2, r1
 8007b54:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8007b56:	e023      	b.n	8007ba0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	68b9      	ldr	r1, [r7, #8]
 8007b5e:	4618      	mov	r0, r3
 8007b60:	f000 fc1a 	bl	8008398 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007b72:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007b82:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8007b8a:	68bb      	ldr	r3, [r7, #8]
 8007b8c:	691b      	ldr	r3, [r3, #16]
 8007b8e:	021a      	lsls	r2, r3, #8
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	430a      	orrs	r2, r1
 8007b96:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8007b98:	e002      	b.n	8007ba0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 8007b9a:	2301      	movs	r3, #1
 8007b9c:	75fb      	strb	r3, [r7, #23]
      break;
 8007b9e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	2200      	movs	r2, #0
 8007ba4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007ba8:	7dfb      	ldrb	r3, [r7, #23]
}
 8007baa:	4618      	mov	r0, r3
 8007bac:	3718      	adds	r7, #24
 8007bae:	46bd      	mov	sp, r7
 8007bb0:	bd80      	pop	{r7, pc}
 8007bb2:	bf00      	nop

08007bb4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007bb4:	b580      	push	{r7, lr}
 8007bb6:	b084      	sub	sp, #16
 8007bb8:	af00      	add	r7, sp, #0
 8007bba:	6078      	str	r0, [r7, #4]
 8007bbc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007bbe:	2300      	movs	r3, #0
 8007bc0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007bc8:	2b01      	cmp	r3, #1
 8007bca:	d101      	bne.n	8007bd0 <HAL_TIM_ConfigClockSource+0x1c>
 8007bcc:	2302      	movs	r3, #2
 8007bce:	e0b6      	b.n	8007d3e <HAL_TIM_ConfigClockSource+0x18a>
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	2201      	movs	r2, #1
 8007bd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	2202      	movs	r2, #2
 8007bdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	689b      	ldr	r3, [r3, #8]
 8007be6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007be8:	68bb      	ldr	r3, [r7, #8]
 8007bea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007bee:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8007bf2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007bf4:	68bb      	ldr	r3, [r7, #8]
 8007bf6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007bfa:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	68ba      	ldr	r2, [r7, #8]
 8007c02:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007c04:	683b      	ldr	r3, [r7, #0]
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007c0c:	d03e      	beq.n	8007c8c <HAL_TIM_ConfigClockSource+0xd8>
 8007c0e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007c12:	f200 8087 	bhi.w	8007d24 <HAL_TIM_ConfigClockSource+0x170>
 8007c16:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007c1a:	f000 8086 	beq.w	8007d2a <HAL_TIM_ConfigClockSource+0x176>
 8007c1e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007c22:	d87f      	bhi.n	8007d24 <HAL_TIM_ConfigClockSource+0x170>
 8007c24:	2b70      	cmp	r3, #112	; 0x70
 8007c26:	d01a      	beq.n	8007c5e <HAL_TIM_ConfigClockSource+0xaa>
 8007c28:	2b70      	cmp	r3, #112	; 0x70
 8007c2a:	d87b      	bhi.n	8007d24 <HAL_TIM_ConfigClockSource+0x170>
 8007c2c:	2b60      	cmp	r3, #96	; 0x60
 8007c2e:	d050      	beq.n	8007cd2 <HAL_TIM_ConfigClockSource+0x11e>
 8007c30:	2b60      	cmp	r3, #96	; 0x60
 8007c32:	d877      	bhi.n	8007d24 <HAL_TIM_ConfigClockSource+0x170>
 8007c34:	2b50      	cmp	r3, #80	; 0x50
 8007c36:	d03c      	beq.n	8007cb2 <HAL_TIM_ConfigClockSource+0xfe>
 8007c38:	2b50      	cmp	r3, #80	; 0x50
 8007c3a:	d873      	bhi.n	8007d24 <HAL_TIM_ConfigClockSource+0x170>
 8007c3c:	2b40      	cmp	r3, #64	; 0x40
 8007c3e:	d058      	beq.n	8007cf2 <HAL_TIM_ConfigClockSource+0x13e>
 8007c40:	2b40      	cmp	r3, #64	; 0x40
 8007c42:	d86f      	bhi.n	8007d24 <HAL_TIM_ConfigClockSource+0x170>
 8007c44:	2b30      	cmp	r3, #48	; 0x30
 8007c46:	d064      	beq.n	8007d12 <HAL_TIM_ConfigClockSource+0x15e>
 8007c48:	2b30      	cmp	r3, #48	; 0x30
 8007c4a:	d86b      	bhi.n	8007d24 <HAL_TIM_ConfigClockSource+0x170>
 8007c4c:	2b20      	cmp	r3, #32
 8007c4e:	d060      	beq.n	8007d12 <HAL_TIM_ConfigClockSource+0x15e>
 8007c50:	2b20      	cmp	r3, #32
 8007c52:	d867      	bhi.n	8007d24 <HAL_TIM_ConfigClockSource+0x170>
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	d05c      	beq.n	8007d12 <HAL_TIM_ConfigClockSource+0x15e>
 8007c58:	2b10      	cmp	r3, #16
 8007c5a:	d05a      	beq.n	8007d12 <HAL_TIM_ConfigClockSource+0x15e>
 8007c5c:	e062      	b.n	8007d24 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	6818      	ldr	r0, [r3, #0]
 8007c62:	683b      	ldr	r3, [r7, #0]
 8007c64:	6899      	ldr	r1, [r3, #8]
 8007c66:	683b      	ldr	r3, [r7, #0]
 8007c68:	685a      	ldr	r2, [r3, #4]
 8007c6a:	683b      	ldr	r3, [r7, #0]
 8007c6c:	68db      	ldr	r3, [r3, #12]
 8007c6e:	f000 fc73 	bl	8008558 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	689b      	ldr	r3, [r3, #8]
 8007c78:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007c7a:	68bb      	ldr	r3, [r7, #8]
 8007c7c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007c80:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	68ba      	ldr	r2, [r7, #8]
 8007c88:	609a      	str	r2, [r3, #8]
      break;
 8007c8a:	e04f      	b.n	8007d2c <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	6818      	ldr	r0, [r3, #0]
 8007c90:	683b      	ldr	r3, [r7, #0]
 8007c92:	6899      	ldr	r1, [r3, #8]
 8007c94:	683b      	ldr	r3, [r7, #0]
 8007c96:	685a      	ldr	r2, [r3, #4]
 8007c98:	683b      	ldr	r3, [r7, #0]
 8007c9a:	68db      	ldr	r3, [r3, #12]
 8007c9c:	f000 fc5c 	bl	8008558 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	689a      	ldr	r2, [r3, #8]
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007cae:	609a      	str	r2, [r3, #8]
      break;
 8007cb0:	e03c      	b.n	8007d2c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	6818      	ldr	r0, [r3, #0]
 8007cb6:	683b      	ldr	r3, [r7, #0]
 8007cb8:	6859      	ldr	r1, [r3, #4]
 8007cba:	683b      	ldr	r3, [r7, #0]
 8007cbc:	68db      	ldr	r3, [r3, #12]
 8007cbe:	461a      	mov	r2, r3
 8007cc0:	f000 fbd0 	bl	8008464 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	2150      	movs	r1, #80	; 0x50
 8007cca:	4618      	mov	r0, r3
 8007ccc:	f000 fc29 	bl	8008522 <TIM_ITRx_SetConfig>
      break;
 8007cd0:	e02c      	b.n	8007d2c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	6818      	ldr	r0, [r3, #0]
 8007cd6:	683b      	ldr	r3, [r7, #0]
 8007cd8:	6859      	ldr	r1, [r3, #4]
 8007cda:	683b      	ldr	r3, [r7, #0]
 8007cdc:	68db      	ldr	r3, [r3, #12]
 8007cde:	461a      	mov	r2, r3
 8007ce0:	f000 fbef 	bl	80084c2 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	2160      	movs	r1, #96	; 0x60
 8007cea:	4618      	mov	r0, r3
 8007cec:	f000 fc19 	bl	8008522 <TIM_ITRx_SetConfig>
      break;
 8007cf0:	e01c      	b.n	8007d2c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	6818      	ldr	r0, [r3, #0]
 8007cf6:	683b      	ldr	r3, [r7, #0]
 8007cf8:	6859      	ldr	r1, [r3, #4]
 8007cfa:	683b      	ldr	r3, [r7, #0]
 8007cfc:	68db      	ldr	r3, [r3, #12]
 8007cfe:	461a      	mov	r2, r3
 8007d00:	f000 fbb0 	bl	8008464 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	2140      	movs	r1, #64	; 0x40
 8007d0a:	4618      	mov	r0, r3
 8007d0c:	f000 fc09 	bl	8008522 <TIM_ITRx_SetConfig>
      break;
 8007d10:	e00c      	b.n	8007d2c <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	681a      	ldr	r2, [r3, #0]
 8007d16:	683b      	ldr	r3, [r7, #0]
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	4619      	mov	r1, r3
 8007d1c:	4610      	mov	r0, r2
 8007d1e:	f000 fc00 	bl	8008522 <TIM_ITRx_SetConfig>
      break;
 8007d22:	e003      	b.n	8007d2c <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8007d24:	2301      	movs	r3, #1
 8007d26:	73fb      	strb	r3, [r7, #15]
      break;
 8007d28:	e000      	b.n	8007d2c <HAL_TIM_ConfigClockSource+0x178>
      break;
 8007d2a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	2201      	movs	r2, #1
 8007d30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	2200      	movs	r2, #0
 8007d38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007d3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d3e:	4618      	mov	r0, r3
 8007d40:	3710      	adds	r7, #16
 8007d42:	46bd      	mov	sp, r7
 8007d44:	bd80      	pop	{r7, pc}

08007d46 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007d46:	b480      	push	{r7}
 8007d48:	b083      	sub	sp, #12
 8007d4a:	af00      	add	r7, sp, #0
 8007d4c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007d4e:	bf00      	nop
 8007d50:	370c      	adds	r7, #12
 8007d52:	46bd      	mov	sp, r7
 8007d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d58:	4770      	bx	lr

08007d5a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007d5a:	b480      	push	{r7}
 8007d5c:	b083      	sub	sp, #12
 8007d5e:	af00      	add	r7, sp, #0
 8007d60:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007d62:	bf00      	nop
 8007d64:	370c      	adds	r7, #12
 8007d66:	46bd      	mov	sp, r7
 8007d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d6c:	4770      	bx	lr

08007d6e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007d6e:	b480      	push	{r7}
 8007d70:	b083      	sub	sp, #12
 8007d72:	af00      	add	r7, sp, #0
 8007d74:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007d76:	bf00      	nop
 8007d78:	370c      	adds	r7, #12
 8007d7a:	46bd      	mov	sp, r7
 8007d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d80:	4770      	bx	lr

08007d82 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007d82:	b480      	push	{r7}
 8007d84:	b083      	sub	sp, #12
 8007d86:	af00      	add	r7, sp, #0
 8007d88:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007d8a:	bf00      	nop
 8007d8c:	370c      	adds	r7, #12
 8007d8e:	46bd      	mov	sp, r7
 8007d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d94:	4770      	bx	lr
	...

08007d98 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007d98:	b480      	push	{r7}
 8007d9a:	b085      	sub	sp, #20
 8007d9c:	af00      	add	r7, sp, #0
 8007d9e:	6078      	str	r0, [r7, #4]
 8007da0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	4a3c      	ldr	r2, [pc, #240]	; (8007e9c <TIM_Base_SetConfig+0x104>)
 8007dac:	4293      	cmp	r3, r2
 8007dae:	d00f      	beq.n	8007dd0 <TIM_Base_SetConfig+0x38>
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007db6:	d00b      	beq.n	8007dd0 <TIM_Base_SetConfig+0x38>
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	4a39      	ldr	r2, [pc, #228]	; (8007ea0 <TIM_Base_SetConfig+0x108>)
 8007dbc:	4293      	cmp	r3, r2
 8007dbe:	d007      	beq.n	8007dd0 <TIM_Base_SetConfig+0x38>
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	4a38      	ldr	r2, [pc, #224]	; (8007ea4 <TIM_Base_SetConfig+0x10c>)
 8007dc4:	4293      	cmp	r3, r2
 8007dc6:	d003      	beq.n	8007dd0 <TIM_Base_SetConfig+0x38>
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	4a37      	ldr	r2, [pc, #220]	; (8007ea8 <TIM_Base_SetConfig+0x110>)
 8007dcc:	4293      	cmp	r3, r2
 8007dce:	d108      	bne.n	8007de2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007dd6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007dd8:	683b      	ldr	r3, [r7, #0]
 8007dda:	685b      	ldr	r3, [r3, #4]
 8007ddc:	68fa      	ldr	r2, [r7, #12]
 8007dde:	4313      	orrs	r3, r2
 8007de0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	4a2d      	ldr	r2, [pc, #180]	; (8007e9c <TIM_Base_SetConfig+0x104>)
 8007de6:	4293      	cmp	r3, r2
 8007de8:	d01b      	beq.n	8007e22 <TIM_Base_SetConfig+0x8a>
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007df0:	d017      	beq.n	8007e22 <TIM_Base_SetConfig+0x8a>
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	4a2a      	ldr	r2, [pc, #168]	; (8007ea0 <TIM_Base_SetConfig+0x108>)
 8007df6:	4293      	cmp	r3, r2
 8007df8:	d013      	beq.n	8007e22 <TIM_Base_SetConfig+0x8a>
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	4a29      	ldr	r2, [pc, #164]	; (8007ea4 <TIM_Base_SetConfig+0x10c>)
 8007dfe:	4293      	cmp	r3, r2
 8007e00:	d00f      	beq.n	8007e22 <TIM_Base_SetConfig+0x8a>
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	4a28      	ldr	r2, [pc, #160]	; (8007ea8 <TIM_Base_SetConfig+0x110>)
 8007e06:	4293      	cmp	r3, r2
 8007e08:	d00b      	beq.n	8007e22 <TIM_Base_SetConfig+0x8a>
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	4a27      	ldr	r2, [pc, #156]	; (8007eac <TIM_Base_SetConfig+0x114>)
 8007e0e:	4293      	cmp	r3, r2
 8007e10:	d007      	beq.n	8007e22 <TIM_Base_SetConfig+0x8a>
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	4a26      	ldr	r2, [pc, #152]	; (8007eb0 <TIM_Base_SetConfig+0x118>)
 8007e16:	4293      	cmp	r3, r2
 8007e18:	d003      	beq.n	8007e22 <TIM_Base_SetConfig+0x8a>
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	4a25      	ldr	r2, [pc, #148]	; (8007eb4 <TIM_Base_SetConfig+0x11c>)
 8007e1e:	4293      	cmp	r3, r2
 8007e20:	d108      	bne.n	8007e34 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007e28:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007e2a:	683b      	ldr	r3, [r7, #0]
 8007e2c:	68db      	ldr	r3, [r3, #12]
 8007e2e:	68fa      	ldr	r2, [r7, #12]
 8007e30:	4313      	orrs	r3, r2
 8007e32:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007e3a:	683b      	ldr	r3, [r7, #0]
 8007e3c:	695b      	ldr	r3, [r3, #20]
 8007e3e:	4313      	orrs	r3, r2
 8007e40:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	68fa      	ldr	r2, [r7, #12]
 8007e46:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007e48:	683b      	ldr	r3, [r7, #0]
 8007e4a:	689a      	ldr	r2, [r3, #8]
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007e50:	683b      	ldr	r3, [r7, #0]
 8007e52:	681a      	ldr	r2, [r3, #0]
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	4a10      	ldr	r2, [pc, #64]	; (8007e9c <TIM_Base_SetConfig+0x104>)
 8007e5c:	4293      	cmp	r3, r2
 8007e5e:	d00f      	beq.n	8007e80 <TIM_Base_SetConfig+0xe8>
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	4a11      	ldr	r2, [pc, #68]	; (8007ea8 <TIM_Base_SetConfig+0x110>)
 8007e64:	4293      	cmp	r3, r2
 8007e66:	d00b      	beq.n	8007e80 <TIM_Base_SetConfig+0xe8>
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	4a10      	ldr	r2, [pc, #64]	; (8007eac <TIM_Base_SetConfig+0x114>)
 8007e6c:	4293      	cmp	r3, r2
 8007e6e:	d007      	beq.n	8007e80 <TIM_Base_SetConfig+0xe8>
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	4a0f      	ldr	r2, [pc, #60]	; (8007eb0 <TIM_Base_SetConfig+0x118>)
 8007e74:	4293      	cmp	r3, r2
 8007e76:	d003      	beq.n	8007e80 <TIM_Base_SetConfig+0xe8>
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	4a0e      	ldr	r2, [pc, #56]	; (8007eb4 <TIM_Base_SetConfig+0x11c>)
 8007e7c:	4293      	cmp	r3, r2
 8007e7e:	d103      	bne.n	8007e88 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007e80:	683b      	ldr	r3, [r7, #0]
 8007e82:	691a      	ldr	r2, [r3, #16]
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	2201      	movs	r2, #1
 8007e8c:	615a      	str	r2, [r3, #20]
}
 8007e8e:	bf00      	nop
 8007e90:	3714      	adds	r7, #20
 8007e92:	46bd      	mov	sp, r7
 8007e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e98:	4770      	bx	lr
 8007e9a:	bf00      	nop
 8007e9c:	40012c00 	.word	0x40012c00
 8007ea0:	40000400 	.word	0x40000400
 8007ea4:	40000800 	.word	0x40000800
 8007ea8:	40013400 	.word	0x40013400
 8007eac:	40014000 	.word	0x40014000
 8007eb0:	40014400 	.word	0x40014400
 8007eb4:	40014800 	.word	0x40014800

08007eb8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007eb8:	b480      	push	{r7}
 8007eba:	b087      	sub	sp, #28
 8007ebc:	af00      	add	r7, sp, #0
 8007ebe:	6078      	str	r0, [r7, #4]
 8007ec0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	6a1b      	ldr	r3, [r3, #32]
 8007ec6:	f023 0201 	bic.w	r2, r3, #1
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	6a1b      	ldr	r3, [r3, #32]
 8007ed2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	685b      	ldr	r3, [r3, #4]
 8007ed8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	699b      	ldr	r3, [r3, #24]
 8007ede:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007ee0:	68fb      	ldr	r3, [r7, #12]
 8007ee2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007ee6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007eea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	f023 0303 	bic.w	r3, r3, #3
 8007ef2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007ef4:	683b      	ldr	r3, [r7, #0]
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	68fa      	ldr	r2, [r7, #12]
 8007efa:	4313      	orrs	r3, r2
 8007efc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007efe:	697b      	ldr	r3, [r7, #20]
 8007f00:	f023 0302 	bic.w	r3, r3, #2
 8007f04:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007f06:	683b      	ldr	r3, [r7, #0]
 8007f08:	689b      	ldr	r3, [r3, #8]
 8007f0a:	697a      	ldr	r2, [r7, #20]
 8007f0c:	4313      	orrs	r3, r2
 8007f0e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	4a2c      	ldr	r2, [pc, #176]	; (8007fc4 <TIM_OC1_SetConfig+0x10c>)
 8007f14:	4293      	cmp	r3, r2
 8007f16:	d00f      	beq.n	8007f38 <TIM_OC1_SetConfig+0x80>
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	4a2b      	ldr	r2, [pc, #172]	; (8007fc8 <TIM_OC1_SetConfig+0x110>)
 8007f1c:	4293      	cmp	r3, r2
 8007f1e:	d00b      	beq.n	8007f38 <TIM_OC1_SetConfig+0x80>
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	4a2a      	ldr	r2, [pc, #168]	; (8007fcc <TIM_OC1_SetConfig+0x114>)
 8007f24:	4293      	cmp	r3, r2
 8007f26:	d007      	beq.n	8007f38 <TIM_OC1_SetConfig+0x80>
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	4a29      	ldr	r2, [pc, #164]	; (8007fd0 <TIM_OC1_SetConfig+0x118>)
 8007f2c:	4293      	cmp	r3, r2
 8007f2e:	d003      	beq.n	8007f38 <TIM_OC1_SetConfig+0x80>
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	4a28      	ldr	r2, [pc, #160]	; (8007fd4 <TIM_OC1_SetConfig+0x11c>)
 8007f34:	4293      	cmp	r3, r2
 8007f36:	d10c      	bne.n	8007f52 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007f38:	697b      	ldr	r3, [r7, #20]
 8007f3a:	f023 0308 	bic.w	r3, r3, #8
 8007f3e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007f40:	683b      	ldr	r3, [r7, #0]
 8007f42:	68db      	ldr	r3, [r3, #12]
 8007f44:	697a      	ldr	r2, [r7, #20]
 8007f46:	4313      	orrs	r3, r2
 8007f48:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007f4a:	697b      	ldr	r3, [r7, #20]
 8007f4c:	f023 0304 	bic.w	r3, r3, #4
 8007f50:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	4a1b      	ldr	r2, [pc, #108]	; (8007fc4 <TIM_OC1_SetConfig+0x10c>)
 8007f56:	4293      	cmp	r3, r2
 8007f58:	d00f      	beq.n	8007f7a <TIM_OC1_SetConfig+0xc2>
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	4a1a      	ldr	r2, [pc, #104]	; (8007fc8 <TIM_OC1_SetConfig+0x110>)
 8007f5e:	4293      	cmp	r3, r2
 8007f60:	d00b      	beq.n	8007f7a <TIM_OC1_SetConfig+0xc2>
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	4a19      	ldr	r2, [pc, #100]	; (8007fcc <TIM_OC1_SetConfig+0x114>)
 8007f66:	4293      	cmp	r3, r2
 8007f68:	d007      	beq.n	8007f7a <TIM_OC1_SetConfig+0xc2>
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	4a18      	ldr	r2, [pc, #96]	; (8007fd0 <TIM_OC1_SetConfig+0x118>)
 8007f6e:	4293      	cmp	r3, r2
 8007f70:	d003      	beq.n	8007f7a <TIM_OC1_SetConfig+0xc2>
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	4a17      	ldr	r2, [pc, #92]	; (8007fd4 <TIM_OC1_SetConfig+0x11c>)
 8007f76:	4293      	cmp	r3, r2
 8007f78:	d111      	bne.n	8007f9e <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007f7a:	693b      	ldr	r3, [r7, #16]
 8007f7c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007f80:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007f82:	693b      	ldr	r3, [r7, #16]
 8007f84:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007f88:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007f8a:	683b      	ldr	r3, [r7, #0]
 8007f8c:	695b      	ldr	r3, [r3, #20]
 8007f8e:	693a      	ldr	r2, [r7, #16]
 8007f90:	4313      	orrs	r3, r2
 8007f92:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007f94:	683b      	ldr	r3, [r7, #0]
 8007f96:	699b      	ldr	r3, [r3, #24]
 8007f98:	693a      	ldr	r2, [r7, #16]
 8007f9a:	4313      	orrs	r3, r2
 8007f9c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	693a      	ldr	r2, [r7, #16]
 8007fa2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	68fa      	ldr	r2, [r7, #12]
 8007fa8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007faa:	683b      	ldr	r3, [r7, #0]
 8007fac:	685a      	ldr	r2, [r3, #4]
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	697a      	ldr	r2, [r7, #20]
 8007fb6:	621a      	str	r2, [r3, #32]
}
 8007fb8:	bf00      	nop
 8007fba:	371c      	adds	r7, #28
 8007fbc:	46bd      	mov	sp, r7
 8007fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fc2:	4770      	bx	lr
 8007fc4:	40012c00 	.word	0x40012c00
 8007fc8:	40013400 	.word	0x40013400
 8007fcc:	40014000 	.word	0x40014000
 8007fd0:	40014400 	.word	0x40014400
 8007fd4:	40014800 	.word	0x40014800

08007fd8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007fd8:	b480      	push	{r7}
 8007fda:	b087      	sub	sp, #28
 8007fdc:	af00      	add	r7, sp, #0
 8007fde:	6078      	str	r0, [r7, #4]
 8007fe0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	6a1b      	ldr	r3, [r3, #32]
 8007fe6:	f023 0210 	bic.w	r2, r3, #16
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	6a1b      	ldr	r3, [r3, #32]
 8007ff2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	685b      	ldr	r3, [r3, #4]
 8007ff8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	699b      	ldr	r3, [r3, #24]
 8007ffe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008000:	68fb      	ldr	r3, [r7, #12]
 8008002:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008006:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800800a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008012:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008014:	683b      	ldr	r3, [r7, #0]
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	021b      	lsls	r3, r3, #8
 800801a:	68fa      	ldr	r2, [r7, #12]
 800801c:	4313      	orrs	r3, r2
 800801e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008020:	697b      	ldr	r3, [r7, #20]
 8008022:	f023 0320 	bic.w	r3, r3, #32
 8008026:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008028:	683b      	ldr	r3, [r7, #0]
 800802a:	689b      	ldr	r3, [r3, #8]
 800802c:	011b      	lsls	r3, r3, #4
 800802e:	697a      	ldr	r2, [r7, #20]
 8008030:	4313      	orrs	r3, r2
 8008032:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	4a28      	ldr	r2, [pc, #160]	; (80080d8 <TIM_OC2_SetConfig+0x100>)
 8008038:	4293      	cmp	r3, r2
 800803a:	d003      	beq.n	8008044 <TIM_OC2_SetConfig+0x6c>
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	4a27      	ldr	r2, [pc, #156]	; (80080dc <TIM_OC2_SetConfig+0x104>)
 8008040:	4293      	cmp	r3, r2
 8008042:	d10d      	bne.n	8008060 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008044:	697b      	ldr	r3, [r7, #20]
 8008046:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800804a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800804c:	683b      	ldr	r3, [r7, #0]
 800804e:	68db      	ldr	r3, [r3, #12]
 8008050:	011b      	lsls	r3, r3, #4
 8008052:	697a      	ldr	r2, [r7, #20]
 8008054:	4313      	orrs	r3, r2
 8008056:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008058:	697b      	ldr	r3, [r7, #20]
 800805a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800805e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	4a1d      	ldr	r2, [pc, #116]	; (80080d8 <TIM_OC2_SetConfig+0x100>)
 8008064:	4293      	cmp	r3, r2
 8008066:	d00f      	beq.n	8008088 <TIM_OC2_SetConfig+0xb0>
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	4a1c      	ldr	r2, [pc, #112]	; (80080dc <TIM_OC2_SetConfig+0x104>)
 800806c:	4293      	cmp	r3, r2
 800806e:	d00b      	beq.n	8008088 <TIM_OC2_SetConfig+0xb0>
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	4a1b      	ldr	r2, [pc, #108]	; (80080e0 <TIM_OC2_SetConfig+0x108>)
 8008074:	4293      	cmp	r3, r2
 8008076:	d007      	beq.n	8008088 <TIM_OC2_SetConfig+0xb0>
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	4a1a      	ldr	r2, [pc, #104]	; (80080e4 <TIM_OC2_SetConfig+0x10c>)
 800807c:	4293      	cmp	r3, r2
 800807e:	d003      	beq.n	8008088 <TIM_OC2_SetConfig+0xb0>
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	4a19      	ldr	r2, [pc, #100]	; (80080e8 <TIM_OC2_SetConfig+0x110>)
 8008084:	4293      	cmp	r3, r2
 8008086:	d113      	bne.n	80080b0 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008088:	693b      	ldr	r3, [r7, #16]
 800808a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800808e:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008090:	693b      	ldr	r3, [r7, #16]
 8008092:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008096:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008098:	683b      	ldr	r3, [r7, #0]
 800809a:	695b      	ldr	r3, [r3, #20]
 800809c:	009b      	lsls	r3, r3, #2
 800809e:	693a      	ldr	r2, [r7, #16]
 80080a0:	4313      	orrs	r3, r2
 80080a2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80080a4:	683b      	ldr	r3, [r7, #0]
 80080a6:	699b      	ldr	r3, [r3, #24]
 80080a8:	009b      	lsls	r3, r3, #2
 80080aa:	693a      	ldr	r2, [r7, #16]
 80080ac:	4313      	orrs	r3, r2
 80080ae:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	693a      	ldr	r2, [r7, #16]
 80080b4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	68fa      	ldr	r2, [r7, #12]
 80080ba:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80080bc:	683b      	ldr	r3, [r7, #0]
 80080be:	685a      	ldr	r2, [r3, #4]
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	697a      	ldr	r2, [r7, #20]
 80080c8:	621a      	str	r2, [r3, #32]
}
 80080ca:	bf00      	nop
 80080cc:	371c      	adds	r7, #28
 80080ce:	46bd      	mov	sp, r7
 80080d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080d4:	4770      	bx	lr
 80080d6:	bf00      	nop
 80080d8:	40012c00 	.word	0x40012c00
 80080dc:	40013400 	.word	0x40013400
 80080e0:	40014000 	.word	0x40014000
 80080e4:	40014400 	.word	0x40014400
 80080e8:	40014800 	.word	0x40014800

080080ec <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80080ec:	b480      	push	{r7}
 80080ee:	b087      	sub	sp, #28
 80080f0:	af00      	add	r7, sp, #0
 80080f2:	6078      	str	r0, [r7, #4]
 80080f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	6a1b      	ldr	r3, [r3, #32]
 80080fa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	6a1b      	ldr	r3, [r3, #32]
 8008106:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	685b      	ldr	r3, [r3, #4]
 800810c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	69db      	ldr	r3, [r3, #28]
 8008112:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008114:	68fb      	ldr	r3, [r7, #12]
 8008116:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800811a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800811e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008120:	68fb      	ldr	r3, [r7, #12]
 8008122:	f023 0303 	bic.w	r3, r3, #3
 8008126:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008128:	683b      	ldr	r3, [r7, #0]
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	68fa      	ldr	r2, [r7, #12]
 800812e:	4313      	orrs	r3, r2
 8008130:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008132:	697b      	ldr	r3, [r7, #20]
 8008134:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008138:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800813a:	683b      	ldr	r3, [r7, #0]
 800813c:	689b      	ldr	r3, [r3, #8]
 800813e:	021b      	lsls	r3, r3, #8
 8008140:	697a      	ldr	r2, [r7, #20]
 8008142:	4313      	orrs	r3, r2
 8008144:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	4a27      	ldr	r2, [pc, #156]	; (80081e8 <TIM_OC3_SetConfig+0xfc>)
 800814a:	4293      	cmp	r3, r2
 800814c:	d003      	beq.n	8008156 <TIM_OC3_SetConfig+0x6a>
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	4a26      	ldr	r2, [pc, #152]	; (80081ec <TIM_OC3_SetConfig+0x100>)
 8008152:	4293      	cmp	r3, r2
 8008154:	d10d      	bne.n	8008172 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008156:	697b      	ldr	r3, [r7, #20]
 8008158:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800815c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800815e:	683b      	ldr	r3, [r7, #0]
 8008160:	68db      	ldr	r3, [r3, #12]
 8008162:	021b      	lsls	r3, r3, #8
 8008164:	697a      	ldr	r2, [r7, #20]
 8008166:	4313      	orrs	r3, r2
 8008168:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800816a:	697b      	ldr	r3, [r7, #20]
 800816c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008170:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	4a1c      	ldr	r2, [pc, #112]	; (80081e8 <TIM_OC3_SetConfig+0xfc>)
 8008176:	4293      	cmp	r3, r2
 8008178:	d00f      	beq.n	800819a <TIM_OC3_SetConfig+0xae>
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	4a1b      	ldr	r2, [pc, #108]	; (80081ec <TIM_OC3_SetConfig+0x100>)
 800817e:	4293      	cmp	r3, r2
 8008180:	d00b      	beq.n	800819a <TIM_OC3_SetConfig+0xae>
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	4a1a      	ldr	r2, [pc, #104]	; (80081f0 <TIM_OC3_SetConfig+0x104>)
 8008186:	4293      	cmp	r3, r2
 8008188:	d007      	beq.n	800819a <TIM_OC3_SetConfig+0xae>
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	4a19      	ldr	r2, [pc, #100]	; (80081f4 <TIM_OC3_SetConfig+0x108>)
 800818e:	4293      	cmp	r3, r2
 8008190:	d003      	beq.n	800819a <TIM_OC3_SetConfig+0xae>
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	4a18      	ldr	r2, [pc, #96]	; (80081f8 <TIM_OC3_SetConfig+0x10c>)
 8008196:	4293      	cmp	r3, r2
 8008198:	d113      	bne.n	80081c2 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800819a:	693b      	ldr	r3, [r7, #16]
 800819c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80081a0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80081a2:	693b      	ldr	r3, [r7, #16]
 80081a4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80081a8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80081aa:	683b      	ldr	r3, [r7, #0]
 80081ac:	695b      	ldr	r3, [r3, #20]
 80081ae:	011b      	lsls	r3, r3, #4
 80081b0:	693a      	ldr	r2, [r7, #16]
 80081b2:	4313      	orrs	r3, r2
 80081b4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80081b6:	683b      	ldr	r3, [r7, #0]
 80081b8:	699b      	ldr	r3, [r3, #24]
 80081ba:	011b      	lsls	r3, r3, #4
 80081bc:	693a      	ldr	r2, [r7, #16]
 80081be:	4313      	orrs	r3, r2
 80081c0:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	693a      	ldr	r2, [r7, #16]
 80081c6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	68fa      	ldr	r2, [r7, #12]
 80081cc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80081ce:	683b      	ldr	r3, [r7, #0]
 80081d0:	685a      	ldr	r2, [r3, #4]
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	697a      	ldr	r2, [r7, #20]
 80081da:	621a      	str	r2, [r3, #32]
}
 80081dc:	bf00      	nop
 80081de:	371c      	adds	r7, #28
 80081e0:	46bd      	mov	sp, r7
 80081e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081e6:	4770      	bx	lr
 80081e8:	40012c00 	.word	0x40012c00
 80081ec:	40013400 	.word	0x40013400
 80081f0:	40014000 	.word	0x40014000
 80081f4:	40014400 	.word	0x40014400
 80081f8:	40014800 	.word	0x40014800

080081fc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80081fc:	b480      	push	{r7}
 80081fe:	b087      	sub	sp, #28
 8008200:	af00      	add	r7, sp, #0
 8008202:	6078      	str	r0, [r7, #4]
 8008204:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	6a1b      	ldr	r3, [r3, #32]
 800820a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	6a1b      	ldr	r3, [r3, #32]
 8008216:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	685b      	ldr	r3, [r3, #4]
 800821c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	69db      	ldr	r3, [r3, #28]
 8008222:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008224:	68fb      	ldr	r3, [r7, #12]
 8008226:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800822a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800822e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008230:	68fb      	ldr	r3, [r7, #12]
 8008232:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008236:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008238:	683b      	ldr	r3, [r7, #0]
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	021b      	lsls	r3, r3, #8
 800823e:	68fa      	ldr	r2, [r7, #12]
 8008240:	4313      	orrs	r3, r2
 8008242:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008244:	693b      	ldr	r3, [r7, #16]
 8008246:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800824a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800824c:	683b      	ldr	r3, [r7, #0]
 800824e:	689b      	ldr	r3, [r3, #8]
 8008250:	031b      	lsls	r3, r3, #12
 8008252:	693a      	ldr	r2, [r7, #16]
 8008254:	4313      	orrs	r3, r2
 8008256:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	4a18      	ldr	r2, [pc, #96]	; (80082bc <TIM_OC4_SetConfig+0xc0>)
 800825c:	4293      	cmp	r3, r2
 800825e:	d00f      	beq.n	8008280 <TIM_OC4_SetConfig+0x84>
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	4a17      	ldr	r2, [pc, #92]	; (80082c0 <TIM_OC4_SetConfig+0xc4>)
 8008264:	4293      	cmp	r3, r2
 8008266:	d00b      	beq.n	8008280 <TIM_OC4_SetConfig+0x84>
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	4a16      	ldr	r2, [pc, #88]	; (80082c4 <TIM_OC4_SetConfig+0xc8>)
 800826c:	4293      	cmp	r3, r2
 800826e:	d007      	beq.n	8008280 <TIM_OC4_SetConfig+0x84>
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	4a15      	ldr	r2, [pc, #84]	; (80082c8 <TIM_OC4_SetConfig+0xcc>)
 8008274:	4293      	cmp	r3, r2
 8008276:	d003      	beq.n	8008280 <TIM_OC4_SetConfig+0x84>
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	4a14      	ldr	r2, [pc, #80]	; (80082cc <TIM_OC4_SetConfig+0xd0>)
 800827c:	4293      	cmp	r3, r2
 800827e:	d109      	bne.n	8008294 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008280:	697b      	ldr	r3, [r7, #20]
 8008282:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008286:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008288:	683b      	ldr	r3, [r7, #0]
 800828a:	695b      	ldr	r3, [r3, #20]
 800828c:	019b      	lsls	r3, r3, #6
 800828e:	697a      	ldr	r2, [r7, #20]
 8008290:	4313      	orrs	r3, r2
 8008292:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	697a      	ldr	r2, [r7, #20]
 8008298:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	68fa      	ldr	r2, [r7, #12]
 800829e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80082a0:	683b      	ldr	r3, [r7, #0]
 80082a2:	685a      	ldr	r2, [r3, #4]
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	693a      	ldr	r2, [r7, #16]
 80082ac:	621a      	str	r2, [r3, #32]
}
 80082ae:	bf00      	nop
 80082b0:	371c      	adds	r7, #28
 80082b2:	46bd      	mov	sp, r7
 80082b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082b8:	4770      	bx	lr
 80082ba:	bf00      	nop
 80082bc:	40012c00 	.word	0x40012c00
 80082c0:	40013400 	.word	0x40013400
 80082c4:	40014000 	.word	0x40014000
 80082c8:	40014400 	.word	0x40014400
 80082cc:	40014800 	.word	0x40014800

080082d0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80082d0:	b480      	push	{r7}
 80082d2:	b087      	sub	sp, #28
 80082d4:	af00      	add	r7, sp, #0
 80082d6:	6078      	str	r0, [r7, #4]
 80082d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	6a1b      	ldr	r3, [r3, #32]
 80082de:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	6a1b      	ldr	r3, [r3, #32]
 80082ea:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	685b      	ldr	r3, [r3, #4]
 80082f0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80082f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80082f8:	68fb      	ldr	r3, [r7, #12]
 80082fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80082fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008302:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008304:	683b      	ldr	r3, [r7, #0]
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	68fa      	ldr	r2, [r7, #12]
 800830a:	4313      	orrs	r3, r2
 800830c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800830e:	693b      	ldr	r3, [r7, #16]
 8008310:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8008314:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8008316:	683b      	ldr	r3, [r7, #0]
 8008318:	689b      	ldr	r3, [r3, #8]
 800831a:	041b      	lsls	r3, r3, #16
 800831c:	693a      	ldr	r2, [r7, #16]
 800831e:	4313      	orrs	r3, r2
 8008320:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	4a17      	ldr	r2, [pc, #92]	; (8008384 <TIM_OC5_SetConfig+0xb4>)
 8008326:	4293      	cmp	r3, r2
 8008328:	d00f      	beq.n	800834a <TIM_OC5_SetConfig+0x7a>
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	4a16      	ldr	r2, [pc, #88]	; (8008388 <TIM_OC5_SetConfig+0xb8>)
 800832e:	4293      	cmp	r3, r2
 8008330:	d00b      	beq.n	800834a <TIM_OC5_SetConfig+0x7a>
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	4a15      	ldr	r2, [pc, #84]	; (800838c <TIM_OC5_SetConfig+0xbc>)
 8008336:	4293      	cmp	r3, r2
 8008338:	d007      	beq.n	800834a <TIM_OC5_SetConfig+0x7a>
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	4a14      	ldr	r2, [pc, #80]	; (8008390 <TIM_OC5_SetConfig+0xc0>)
 800833e:	4293      	cmp	r3, r2
 8008340:	d003      	beq.n	800834a <TIM_OC5_SetConfig+0x7a>
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	4a13      	ldr	r2, [pc, #76]	; (8008394 <TIM_OC5_SetConfig+0xc4>)
 8008346:	4293      	cmp	r3, r2
 8008348:	d109      	bne.n	800835e <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800834a:	697b      	ldr	r3, [r7, #20]
 800834c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008350:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8008352:	683b      	ldr	r3, [r7, #0]
 8008354:	695b      	ldr	r3, [r3, #20]
 8008356:	021b      	lsls	r3, r3, #8
 8008358:	697a      	ldr	r2, [r7, #20]
 800835a:	4313      	orrs	r3, r2
 800835c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	697a      	ldr	r2, [r7, #20]
 8008362:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	68fa      	ldr	r2, [r7, #12]
 8008368:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800836a:	683b      	ldr	r3, [r7, #0]
 800836c:	685a      	ldr	r2, [r3, #4]
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	693a      	ldr	r2, [r7, #16]
 8008376:	621a      	str	r2, [r3, #32]
}
 8008378:	bf00      	nop
 800837a:	371c      	adds	r7, #28
 800837c:	46bd      	mov	sp, r7
 800837e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008382:	4770      	bx	lr
 8008384:	40012c00 	.word	0x40012c00
 8008388:	40013400 	.word	0x40013400
 800838c:	40014000 	.word	0x40014000
 8008390:	40014400 	.word	0x40014400
 8008394:	40014800 	.word	0x40014800

08008398 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8008398:	b480      	push	{r7}
 800839a:	b087      	sub	sp, #28
 800839c:	af00      	add	r7, sp, #0
 800839e:	6078      	str	r0, [r7, #4]
 80083a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	6a1b      	ldr	r3, [r3, #32]
 80083a6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	6a1b      	ldr	r3, [r3, #32]
 80083b2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	685b      	ldr	r3, [r3, #4]
 80083b8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80083be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80083c0:	68fb      	ldr	r3, [r7, #12]
 80083c2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80083c6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80083ca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80083cc:	683b      	ldr	r3, [r7, #0]
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	021b      	lsls	r3, r3, #8
 80083d2:	68fa      	ldr	r2, [r7, #12]
 80083d4:	4313      	orrs	r3, r2
 80083d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80083d8:	693b      	ldr	r3, [r7, #16]
 80083da:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80083de:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80083e0:	683b      	ldr	r3, [r7, #0]
 80083e2:	689b      	ldr	r3, [r3, #8]
 80083e4:	051b      	lsls	r3, r3, #20
 80083e6:	693a      	ldr	r2, [r7, #16]
 80083e8:	4313      	orrs	r3, r2
 80083ea:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	4a18      	ldr	r2, [pc, #96]	; (8008450 <TIM_OC6_SetConfig+0xb8>)
 80083f0:	4293      	cmp	r3, r2
 80083f2:	d00f      	beq.n	8008414 <TIM_OC6_SetConfig+0x7c>
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	4a17      	ldr	r2, [pc, #92]	; (8008454 <TIM_OC6_SetConfig+0xbc>)
 80083f8:	4293      	cmp	r3, r2
 80083fa:	d00b      	beq.n	8008414 <TIM_OC6_SetConfig+0x7c>
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	4a16      	ldr	r2, [pc, #88]	; (8008458 <TIM_OC6_SetConfig+0xc0>)
 8008400:	4293      	cmp	r3, r2
 8008402:	d007      	beq.n	8008414 <TIM_OC6_SetConfig+0x7c>
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	4a15      	ldr	r2, [pc, #84]	; (800845c <TIM_OC6_SetConfig+0xc4>)
 8008408:	4293      	cmp	r3, r2
 800840a:	d003      	beq.n	8008414 <TIM_OC6_SetConfig+0x7c>
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	4a14      	ldr	r2, [pc, #80]	; (8008460 <TIM_OC6_SetConfig+0xc8>)
 8008410:	4293      	cmp	r3, r2
 8008412:	d109      	bne.n	8008428 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8008414:	697b      	ldr	r3, [r7, #20]
 8008416:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800841a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800841c:	683b      	ldr	r3, [r7, #0]
 800841e:	695b      	ldr	r3, [r3, #20]
 8008420:	029b      	lsls	r3, r3, #10
 8008422:	697a      	ldr	r2, [r7, #20]
 8008424:	4313      	orrs	r3, r2
 8008426:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	697a      	ldr	r2, [r7, #20]
 800842c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	68fa      	ldr	r2, [r7, #12]
 8008432:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8008434:	683b      	ldr	r3, [r7, #0]
 8008436:	685a      	ldr	r2, [r3, #4]
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	693a      	ldr	r2, [r7, #16]
 8008440:	621a      	str	r2, [r3, #32]
}
 8008442:	bf00      	nop
 8008444:	371c      	adds	r7, #28
 8008446:	46bd      	mov	sp, r7
 8008448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800844c:	4770      	bx	lr
 800844e:	bf00      	nop
 8008450:	40012c00 	.word	0x40012c00
 8008454:	40013400 	.word	0x40013400
 8008458:	40014000 	.word	0x40014000
 800845c:	40014400 	.word	0x40014400
 8008460:	40014800 	.word	0x40014800

08008464 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008464:	b480      	push	{r7}
 8008466:	b087      	sub	sp, #28
 8008468:	af00      	add	r7, sp, #0
 800846a:	60f8      	str	r0, [r7, #12]
 800846c:	60b9      	str	r1, [r7, #8]
 800846e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008470:	68fb      	ldr	r3, [r7, #12]
 8008472:	6a1b      	ldr	r3, [r3, #32]
 8008474:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008476:	68fb      	ldr	r3, [r7, #12]
 8008478:	6a1b      	ldr	r3, [r3, #32]
 800847a:	f023 0201 	bic.w	r2, r3, #1
 800847e:	68fb      	ldr	r3, [r7, #12]
 8008480:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008482:	68fb      	ldr	r3, [r7, #12]
 8008484:	699b      	ldr	r3, [r3, #24]
 8008486:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008488:	693b      	ldr	r3, [r7, #16]
 800848a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800848e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	011b      	lsls	r3, r3, #4
 8008494:	693a      	ldr	r2, [r7, #16]
 8008496:	4313      	orrs	r3, r2
 8008498:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800849a:	697b      	ldr	r3, [r7, #20]
 800849c:	f023 030a 	bic.w	r3, r3, #10
 80084a0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80084a2:	697a      	ldr	r2, [r7, #20]
 80084a4:	68bb      	ldr	r3, [r7, #8]
 80084a6:	4313      	orrs	r3, r2
 80084a8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80084aa:	68fb      	ldr	r3, [r7, #12]
 80084ac:	693a      	ldr	r2, [r7, #16]
 80084ae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80084b0:	68fb      	ldr	r3, [r7, #12]
 80084b2:	697a      	ldr	r2, [r7, #20]
 80084b4:	621a      	str	r2, [r3, #32]
}
 80084b6:	bf00      	nop
 80084b8:	371c      	adds	r7, #28
 80084ba:	46bd      	mov	sp, r7
 80084bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084c0:	4770      	bx	lr

080084c2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80084c2:	b480      	push	{r7}
 80084c4:	b087      	sub	sp, #28
 80084c6:	af00      	add	r7, sp, #0
 80084c8:	60f8      	str	r0, [r7, #12]
 80084ca:	60b9      	str	r1, [r7, #8]
 80084cc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80084ce:	68fb      	ldr	r3, [r7, #12]
 80084d0:	6a1b      	ldr	r3, [r3, #32]
 80084d2:	f023 0210 	bic.w	r2, r3, #16
 80084d6:	68fb      	ldr	r3, [r7, #12]
 80084d8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80084da:	68fb      	ldr	r3, [r7, #12]
 80084dc:	699b      	ldr	r3, [r3, #24]
 80084de:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80084e0:	68fb      	ldr	r3, [r7, #12]
 80084e2:	6a1b      	ldr	r3, [r3, #32]
 80084e4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80084e6:	697b      	ldr	r3, [r7, #20]
 80084e8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80084ec:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	031b      	lsls	r3, r3, #12
 80084f2:	697a      	ldr	r2, [r7, #20]
 80084f4:	4313      	orrs	r3, r2
 80084f6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80084f8:	693b      	ldr	r3, [r7, #16]
 80084fa:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80084fe:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008500:	68bb      	ldr	r3, [r7, #8]
 8008502:	011b      	lsls	r3, r3, #4
 8008504:	693a      	ldr	r2, [r7, #16]
 8008506:	4313      	orrs	r3, r2
 8008508:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800850a:	68fb      	ldr	r3, [r7, #12]
 800850c:	697a      	ldr	r2, [r7, #20]
 800850e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008510:	68fb      	ldr	r3, [r7, #12]
 8008512:	693a      	ldr	r2, [r7, #16]
 8008514:	621a      	str	r2, [r3, #32]
}
 8008516:	bf00      	nop
 8008518:	371c      	adds	r7, #28
 800851a:	46bd      	mov	sp, r7
 800851c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008520:	4770      	bx	lr

08008522 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008522:	b480      	push	{r7}
 8008524:	b085      	sub	sp, #20
 8008526:	af00      	add	r7, sp, #0
 8008528:	6078      	str	r0, [r7, #4]
 800852a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	689b      	ldr	r3, [r3, #8]
 8008530:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008532:	68fb      	ldr	r3, [r7, #12]
 8008534:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008538:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800853a:	683a      	ldr	r2, [r7, #0]
 800853c:	68fb      	ldr	r3, [r7, #12]
 800853e:	4313      	orrs	r3, r2
 8008540:	f043 0307 	orr.w	r3, r3, #7
 8008544:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	68fa      	ldr	r2, [r7, #12]
 800854a:	609a      	str	r2, [r3, #8]
}
 800854c:	bf00      	nop
 800854e:	3714      	adds	r7, #20
 8008550:	46bd      	mov	sp, r7
 8008552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008556:	4770      	bx	lr

08008558 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008558:	b480      	push	{r7}
 800855a:	b087      	sub	sp, #28
 800855c:	af00      	add	r7, sp, #0
 800855e:	60f8      	str	r0, [r7, #12]
 8008560:	60b9      	str	r1, [r7, #8]
 8008562:	607a      	str	r2, [r7, #4]
 8008564:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008566:	68fb      	ldr	r3, [r7, #12]
 8008568:	689b      	ldr	r3, [r3, #8]
 800856a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800856c:	697b      	ldr	r3, [r7, #20]
 800856e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008572:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008574:	683b      	ldr	r3, [r7, #0]
 8008576:	021a      	lsls	r2, r3, #8
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	431a      	orrs	r2, r3
 800857c:	68bb      	ldr	r3, [r7, #8]
 800857e:	4313      	orrs	r3, r2
 8008580:	697a      	ldr	r2, [r7, #20]
 8008582:	4313      	orrs	r3, r2
 8008584:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008586:	68fb      	ldr	r3, [r7, #12]
 8008588:	697a      	ldr	r2, [r7, #20]
 800858a:	609a      	str	r2, [r3, #8]
}
 800858c:	bf00      	nop
 800858e:	371c      	adds	r7, #28
 8008590:	46bd      	mov	sp, r7
 8008592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008596:	4770      	bx	lr

08008598 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008598:	b480      	push	{r7}
 800859a:	b087      	sub	sp, #28
 800859c:	af00      	add	r7, sp, #0
 800859e:	60f8      	str	r0, [r7, #12]
 80085a0:	60b9      	str	r1, [r7, #8]
 80085a2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80085a4:	68bb      	ldr	r3, [r7, #8]
 80085a6:	f003 031f 	and.w	r3, r3, #31
 80085aa:	2201      	movs	r2, #1
 80085ac:	fa02 f303 	lsl.w	r3, r2, r3
 80085b0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80085b2:	68fb      	ldr	r3, [r7, #12]
 80085b4:	6a1a      	ldr	r2, [r3, #32]
 80085b6:	697b      	ldr	r3, [r7, #20]
 80085b8:	43db      	mvns	r3, r3
 80085ba:	401a      	ands	r2, r3
 80085bc:	68fb      	ldr	r3, [r7, #12]
 80085be:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80085c0:	68fb      	ldr	r3, [r7, #12]
 80085c2:	6a1a      	ldr	r2, [r3, #32]
 80085c4:	68bb      	ldr	r3, [r7, #8]
 80085c6:	f003 031f 	and.w	r3, r3, #31
 80085ca:	6879      	ldr	r1, [r7, #4]
 80085cc:	fa01 f303 	lsl.w	r3, r1, r3
 80085d0:	431a      	orrs	r2, r3
 80085d2:	68fb      	ldr	r3, [r7, #12]
 80085d4:	621a      	str	r2, [r3, #32]
}
 80085d6:	bf00      	nop
 80085d8:	371c      	adds	r7, #28
 80085da:	46bd      	mov	sp, r7
 80085dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085e0:	4770      	bx	lr
	...

080085e4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80085e4:	b480      	push	{r7}
 80085e6:	b085      	sub	sp, #20
 80085e8:	af00      	add	r7, sp, #0
 80085ea:	6078      	str	r0, [r7, #4]
 80085ec:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80085f4:	2b01      	cmp	r3, #1
 80085f6:	d101      	bne.n	80085fc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80085f8:	2302      	movs	r3, #2
 80085fa:	e063      	b.n	80086c4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	2201      	movs	r2, #1
 8008600:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	2202      	movs	r2, #2
 8008608:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	685b      	ldr	r3, [r3, #4]
 8008612:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	689b      	ldr	r3, [r3, #8]
 800861a:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	4a2b      	ldr	r2, [pc, #172]	; (80086d0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8008622:	4293      	cmp	r3, r2
 8008624:	d004      	beq.n	8008630 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	4a2a      	ldr	r2, [pc, #168]	; (80086d4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800862c:	4293      	cmp	r3, r2
 800862e:	d108      	bne.n	8008642 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008630:	68fb      	ldr	r3, [r7, #12]
 8008632:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8008636:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008638:	683b      	ldr	r3, [r7, #0]
 800863a:	685b      	ldr	r3, [r3, #4]
 800863c:	68fa      	ldr	r2, [r7, #12]
 800863e:	4313      	orrs	r3, r2
 8008640:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008642:	68fb      	ldr	r3, [r7, #12]
 8008644:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008648:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800864a:	683b      	ldr	r3, [r7, #0]
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	68fa      	ldr	r2, [r7, #12]
 8008650:	4313      	orrs	r3, r2
 8008652:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	68fa      	ldr	r2, [r7, #12]
 800865a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	4a1b      	ldr	r2, [pc, #108]	; (80086d0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8008662:	4293      	cmp	r3, r2
 8008664:	d018      	beq.n	8008698 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800866e:	d013      	beq.n	8008698 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	4a18      	ldr	r2, [pc, #96]	; (80086d8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8008676:	4293      	cmp	r3, r2
 8008678:	d00e      	beq.n	8008698 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	4a17      	ldr	r2, [pc, #92]	; (80086dc <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8008680:	4293      	cmp	r3, r2
 8008682:	d009      	beq.n	8008698 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	4a12      	ldr	r2, [pc, #72]	; (80086d4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800868a:	4293      	cmp	r3, r2
 800868c:	d004      	beq.n	8008698 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	681b      	ldr	r3, [r3, #0]
 8008692:	4a13      	ldr	r2, [pc, #76]	; (80086e0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8008694:	4293      	cmp	r3, r2
 8008696:	d10c      	bne.n	80086b2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008698:	68bb      	ldr	r3, [r7, #8]
 800869a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800869e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80086a0:	683b      	ldr	r3, [r7, #0]
 80086a2:	689b      	ldr	r3, [r3, #8]
 80086a4:	68ba      	ldr	r2, [r7, #8]
 80086a6:	4313      	orrs	r3, r2
 80086a8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	68ba      	ldr	r2, [r7, #8]
 80086b0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	2201      	movs	r2, #1
 80086b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	2200      	movs	r2, #0
 80086be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80086c2:	2300      	movs	r3, #0
}
 80086c4:	4618      	mov	r0, r3
 80086c6:	3714      	adds	r7, #20
 80086c8:	46bd      	mov	sp, r7
 80086ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ce:	4770      	bx	lr
 80086d0:	40012c00 	.word	0x40012c00
 80086d4:	40013400 	.word	0x40013400
 80086d8:	40000400 	.word	0x40000400
 80086dc:	40000800 	.word	0x40000800
 80086e0:	40014000 	.word	0x40014000

080086e4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80086e4:	b480      	push	{r7}
 80086e6:	b085      	sub	sp, #20
 80086e8:	af00      	add	r7, sp, #0
 80086ea:	6078      	str	r0, [r7, #4]
 80086ec:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80086ee:	2300      	movs	r3, #0
 80086f0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
#endif /* TIM_BDTR_BKF */
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80086f8:	2b01      	cmp	r3, #1
 80086fa:	d101      	bne.n	8008700 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80086fc:	2302      	movs	r3, #2
 80086fe:	e065      	b.n	80087cc <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	2201      	movs	r2, #1
 8008704:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8008708:	68fb      	ldr	r3, [r7, #12]
 800870a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800870e:	683b      	ldr	r3, [r7, #0]
 8008710:	68db      	ldr	r3, [r3, #12]
 8008712:	4313      	orrs	r3, r2
 8008714:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8008716:	68fb      	ldr	r3, [r7, #12]
 8008718:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800871c:	683b      	ldr	r3, [r7, #0]
 800871e:	689b      	ldr	r3, [r3, #8]
 8008720:	4313      	orrs	r3, r2
 8008722:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8008724:	68fb      	ldr	r3, [r7, #12]
 8008726:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800872a:	683b      	ldr	r3, [r7, #0]
 800872c:	685b      	ldr	r3, [r3, #4]
 800872e:	4313      	orrs	r3, r2
 8008730:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8008732:	68fb      	ldr	r3, [r7, #12]
 8008734:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8008738:	683b      	ldr	r3, [r7, #0]
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	4313      	orrs	r3, r2
 800873e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8008740:	68fb      	ldr	r3, [r7, #12]
 8008742:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008746:	683b      	ldr	r3, [r7, #0]
 8008748:	691b      	ldr	r3, [r3, #16]
 800874a:	4313      	orrs	r3, r2
 800874c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800874e:	68fb      	ldr	r3, [r7, #12]
 8008750:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8008754:	683b      	ldr	r3, [r7, #0]
 8008756:	695b      	ldr	r3, [r3, #20]
 8008758:	4313      	orrs	r3, r2
 800875a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800875c:	68fb      	ldr	r3, [r7, #12]
 800875e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8008762:	683b      	ldr	r3, [r7, #0]
 8008764:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008766:	4313      	orrs	r3, r2
 8008768:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKF)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800876a:	68fb      	ldr	r3, [r7, #12]
 800876c:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8008770:	683b      	ldr	r3, [r7, #0]
 8008772:	699b      	ldr	r3, [r3, #24]
 8008774:	041b      	lsls	r3, r3, #16
 8008776:	4313      	orrs	r3, r2
 8008778:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKF */

#if defined(TIM_BDTR_BK2E)
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	4a16      	ldr	r2, [pc, #88]	; (80087d8 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8008780:	4293      	cmp	r3, r2
 8008782:	d004      	beq.n	800878e <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	4a14      	ldr	r2, [pc, #80]	; (80087dc <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800878a:	4293      	cmp	r3, r2
 800878c:	d115      	bne.n	80087ba <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800878e:	68fb      	ldr	r3, [r7, #12]
 8008790:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8008794:	683b      	ldr	r3, [r7, #0]
 8008796:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008798:	051b      	lsls	r3, r3, #20
 800879a:	4313      	orrs	r3, r2
 800879c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800879e:	68fb      	ldr	r3, [r7, #12]
 80087a0:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80087a4:	683b      	ldr	r3, [r7, #0]
 80087a6:	69db      	ldr	r3, [r3, #28]
 80087a8:	4313      	orrs	r3, r2
 80087aa:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80087ac:	68fb      	ldr	r3, [r7, #12]
 80087ae:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80087b2:	683b      	ldr	r3, [r7, #0]
 80087b4:	6a1b      	ldr	r3, [r3, #32]
 80087b6:	4313      	orrs	r3, r2
 80087b8:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_BDTR_BK2E */

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	68fa      	ldr	r2, [r7, #12]
 80087c0:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	2200      	movs	r2, #0
 80087c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80087ca:	2300      	movs	r3, #0
}
 80087cc:	4618      	mov	r0, r3
 80087ce:	3714      	adds	r7, #20
 80087d0:	46bd      	mov	sp, r7
 80087d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087d6:	4770      	bx	lr
 80087d8:	40012c00 	.word	0x40012c00
 80087dc:	40013400 	.word	0x40013400

080087e0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80087e0:	b480      	push	{r7}
 80087e2:	b083      	sub	sp, #12
 80087e4:	af00      	add	r7, sp, #0
 80087e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80087e8:	bf00      	nop
 80087ea:	370c      	adds	r7, #12
 80087ec:	46bd      	mov	sp, r7
 80087ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087f2:	4770      	bx	lr

080087f4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80087f4:	b480      	push	{r7}
 80087f6:	b083      	sub	sp, #12
 80087f8:	af00      	add	r7, sp, #0
 80087fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80087fc:	bf00      	nop
 80087fe:	370c      	adds	r7, #12
 8008800:	46bd      	mov	sp, r7
 8008802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008806:	4770      	bx	lr

08008808 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8008808:	b480      	push	{r7}
 800880a:	b083      	sub	sp, #12
 800880c:	af00      	add	r7, sp, #0
 800880e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008810:	bf00      	nop
 8008812:	370c      	adds	r7, #12
 8008814:	46bd      	mov	sp, r7
 8008816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800881a:	4770      	bx	lr

0800881c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800881c:	b580      	push	{r7, lr}
 800881e:	b082      	sub	sp, #8
 8008820:	af00      	add	r7, sp, #0
 8008822:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	2b00      	cmp	r3, #0
 8008828:	d101      	bne.n	800882e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800882a:	2301      	movs	r3, #1
 800882c:	e040      	b.n	80088b0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008832:	2b00      	cmp	r3, #0
 8008834:	d106      	bne.n	8008844 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	2200      	movs	r2, #0
 800883a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800883e:	6878      	ldr	r0, [r7, #4]
 8008840:	f7fa fb2a 	bl	8002e98 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	2224      	movs	r2, #36	; 0x24
 8008848:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	681a      	ldr	r2, [r3, #0]
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	f022 0201 	bic.w	r2, r2, #1
 8008858:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800885a:	6878      	ldr	r0, [r7, #4]
 800885c:	f000 fc00 	bl	8009060 <UART_SetConfig>
 8008860:	4603      	mov	r3, r0
 8008862:	2b01      	cmp	r3, #1
 8008864:	d101      	bne.n	800886a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8008866:	2301      	movs	r3, #1
 8008868:	e022      	b.n	80088b0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800886e:	2b00      	cmp	r3, #0
 8008870:	d002      	beq.n	8008878 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8008872:	6878      	ldr	r0, [r7, #4]
 8008874:	f000 fdc8 	bl	8009408 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	685a      	ldr	r2, [r3, #4]
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	681b      	ldr	r3, [r3, #0]
 8008882:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008886:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	689a      	ldr	r2, [r3, #8]
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008896:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	681a      	ldr	r2, [r3, #0]
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	f042 0201 	orr.w	r2, r2, #1
 80088a6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80088a8:	6878      	ldr	r0, [r7, #4]
 80088aa:	f000 fe4f 	bl	800954c <UART_CheckIdleState>
 80088ae:	4603      	mov	r3, r0
}
 80088b0:	4618      	mov	r0, r3
 80088b2:	3708      	adds	r7, #8
 80088b4:	46bd      	mov	sp, r7
 80088b6:	bd80      	pop	{r7, pc}

080088b8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80088b8:	b580      	push	{r7, lr}
 80088ba:	b08a      	sub	sp, #40	; 0x28
 80088bc:	af02      	add	r7, sp, #8
 80088be:	60f8      	str	r0, [r7, #12]
 80088c0:	60b9      	str	r1, [r7, #8]
 80088c2:	603b      	str	r3, [r7, #0]
 80088c4:	4613      	mov	r3, r2
 80088c6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80088c8:	68fb      	ldr	r3, [r7, #12]
 80088ca:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80088cc:	2b20      	cmp	r3, #32
 80088ce:	d178      	bne.n	80089c2 <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 80088d0:	68bb      	ldr	r3, [r7, #8]
 80088d2:	2b00      	cmp	r3, #0
 80088d4:	d002      	beq.n	80088dc <HAL_UART_Transmit+0x24>
 80088d6:	88fb      	ldrh	r3, [r7, #6]
 80088d8:	2b00      	cmp	r3, #0
 80088da:	d101      	bne.n	80088e0 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80088dc:	2301      	movs	r3, #1
 80088de:	e071      	b.n	80089c4 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80088e0:	68fb      	ldr	r3, [r7, #12]
 80088e2:	2200      	movs	r2, #0
 80088e4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80088e8:	68fb      	ldr	r3, [r7, #12]
 80088ea:	2221      	movs	r2, #33	; 0x21
 80088ec:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80088ee:	f7fa fce7 	bl	80032c0 <HAL_GetTick>
 80088f2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80088f4:	68fb      	ldr	r3, [r7, #12]
 80088f6:	88fa      	ldrh	r2, [r7, #6]
 80088f8:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80088fc:	68fb      	ldr	r3, [r7, #12]
 80088fe:	88fa      	ldrh	r2, [r7, #6]
 8008900:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008904:	68fb      	ldr	r3, [r7, #12]
 8008906:	689b      	ldr	r3, [r3, #8]
 8008908:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800890c:	d108      	bne.n	8008920 <HAL_UART_Transmit+0x68>
 800890e:	68fb      	ldr	r3, [r7, #12]
 8008910:	691b      	ldr	r3, [r3, #16]
 8008912:	2b00      	cmp	r3, #0
 8008914:	d104      	bne.n	8008920 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8008916:	2300      	movs	r3, #0
 8008918:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800891a:	68bb      	ldr	r3, [r7, #8]
 800891c:	61bb      	str	r3, [r7, #24]
 800891e:	e003      	b.n	8008928 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8008920:	68bb      	ldr	r3, [r7, #8]
 8008922:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008924:	2300      	movs	r3, #0
 8008926:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8008928:	e030      	b.n	800898c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800892a:	683b      	ldr	r3, [r7, #0]
 800892c:	9300      	str	r3, [sp, #0]
 800892e:	697b      	ldr	r3, [r7, #20]
 8008930:	2200      	movs	r2, #0
 8008932:	2180      	movs	r1, #128	; 0x80
 8008934:	68f8      	ldr	r0, [r7, #12]
 8008936:	f000 feb1 	bl	800969c <UART_WaitOnFlagUntilTimeout>
 800893a:	4603      	mov	r3, r0
 800893c:	2b00      	cmp	r3, #0
 800893e:	d004      	beq.n	800894a <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8008940:	68fb      	ldr	r3, [r7, #12]
 8008942:	2220      	movs	r2, #32
 8008944:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8008946:	2303      	movs	r3, #3
 8008948:	e03c      	b.n	80089c4 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 800894a:	69fb      	ldr	r3, [r7, #28]
 800894c:	2b00      	cmp	r3, #0
 800894e:	d10b      	bne.n	8008968 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008950:	69bb      	ldr	r3, [r7, #24]
 8008952:	881a      	ldrh	r2, [r3, #0]
 8008954:	68fb      	ldr	r3, [r7, #12]
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800895c:	b292      	uxth	r2, r2
 800895e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8008960:	69bb      	ldr	r3, [r7, #24]
 8008962:	3302      	adds	r3, #2
 8008964:	61bb      	str	r3, [r7, #24]
 8008966:	e008      	b.n	800897a <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8008968:	69fb      	ldr	r3, [r7, #28]
 800896a:	781a      	ldrb	r2, [r3, #0]
 800896c:	68fb      	ldr	r3, [r7, #12]
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	b292      	uxth	r2, r2
 8008972:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8008974:	69fb      	ldr	r3, [r7, #28]
 8008976:	3301      	adds	r3, #1
 8008978:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800897a:	68fb      	ldr	r3, [r7, #12]
 800897c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8008980:	b29b      	uxth	r3, r3
 8008982:	3b01      	subs	r3, #1
 8008984:	b29a      	uxth	r2, r3
 8008986:	68fb      	ldr	r3, [r7, #12]
 8008988:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800898c:	68fb      	ldr	r3, [r7, #12]
 800898e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8008992:	b29b      	uxth	r3, r3
 8008994:	2b00      	cmp	r3, #0
 8008996:	d1c8      	bne.n	800892a <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008998:	683b      	ldr	r3, [r7, #0]
 800899a:	9300      	str	r3, [sp, #0]
 800899c:	697b      	ldr	r3, [r7, #20]
 800899e:	2200      	movs	r2, #0
 80089a0:	2140      	movs	r1, #64	; 0x40
 80089a2:	68f8      	ldr	r0, [r7, #12]
 80089a4:	f000 fe7a 	bl	800969c <UART_WaitOnFlagUntilTimeout>
 80089a8:	4603      	mov	r3, r0
 80089aa:	2b00      	cmp	r3, #0
 80089ac:	d004      	beq.n	80089b8 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80089ae:	68fb      	ldr	r3, [r7, #12]
 80089b0:	2220      	movs	r2, #32
 80089b2:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 80089b4:	2303      	movs	r3, #3
 80089b6:	e005      	b.n	80089c4 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80089b8:	68fb      	ldr	r3, [r7, #12]
 80089ba:	2220      	movs	r2, #32
 80089bc:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80089be:	2300      	movs	r3, #0
 80089c0:	e000      	b.n	80089c4 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 80089c2:	2302      	movs	r3, #2
  }
}
 80089c4:	4618      	mov	r0, r3
 80089c6:	3720      	adds	r7, #32
 80089c8:	46bd      	mov	sp, r7
 80089ca:	bd80      	pop	{r7, pc}

080089cc <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80089cc:	b580      	push	{r7, lr}
 80089ce:	b08a      	sub	sp, #40	; 0x28
 80089d0:	af00      	add	r7, sp, #0
 80089d2:	60f8      	str	r0, [r7, #12]
 80089d4:	60b9      	str	r1, [r7, #8]
 80089d6:	4613      	mov	r3, r2
 80089d8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80089da:	68fb      	ldr	r3, [r7, #12]
 80089dc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80089e0:	2b20      	cmp	r3, #32
 80089e2:	d132      	bne.n	8008a4a <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 80089e4:	68bb      	ldr	r3, [r7, #8]
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	d002      	beq.n	80089f0 <HAL_UART_Receive_IT+0x24>
 80089ea:	88fb      	ldrh	r3, [r7, #6]
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	d101      	bne.n	80089f4 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80089f0:	2301      	movs	r3, #1
 80089f2:	e02b      	b.n	8008a4c <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80089f4:	68fb      	ldr	r3, [r7, #12]
 80089f6:	2200      	movs	r2, #0
 80089f8:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80089fa:	68fb      	ldr	r3, [r7, #12]
 80089fc:	681b      	ldr	r3, [r3, #0]
 80089fe:	685b      	ldr	r3, [r3, #4]
 8008a00:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008a04:	2b00      	cmp	r3, #0
 8008a06:	d018      	beq.n	8008a3a <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008a08:	68fb      	ldr	r3, [r7, #12]
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a0e:	697b      	ldr	r3, [r7, #20]
 8008a10:	e853 3f00 	ldrex	r3, [r3]
 8008a14:	613b      	str	r3, [r7, #16]
   return(result);
 8008a16:	693b      	ldr	r3, [r7, #16]
 8008a18:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8008a1c:	627b      	str	r3, [r7, #36]	; 0x24
 8008a1e:	68fb      	ldr	r3, [r7, #12]
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	461a      	mov	r2, r3
 8008a24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a26:	623b      	str	r3, [r7, #32]
 8008a28:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a2a:	69f9      	ldr	r1, [r7, #28]
 8008a2c:	6a3a      	ldr	r2, [r7, #32]
 8008a2e:	e841 2300 	strex	r3, r2, [r1]
 8008a32:	61bb      	str	r3, [r7, #24]
   return(result);
 8008a34:	69bb      	ldr	r3, [r7, #24]
 8008a36:	2b00      	cmp	r3, #0
 8008a38:	d1e6      	bne.n	8008a08 <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8008a3a:	88fb      	ldrh	r3, [r7, #6]
 8008a3c:	461a      	mov	r2, r3
 8008a3e:	68b9      	ldr	r1, [r7, #8]
 8008a40:	68f8      	ldr	r0, [r7, #12]
 8008a42:	f000 fe93 	bl	800976c <UART_Start_Receive_IT>
 8008a46:	4603      	mov	r3, r0
 8008a48:	e000      	b.n	8008a4c <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 8008a4a:	2302      	movs	r3, #2
  }
}
 8008a4c:	4618      	mov	r0, r3
 8008a4e:	3728      	adds	r7, #40	; 0x28
 8008a50:	46bd      	mov	sp, r7
 8008a52:	bd80      	pop	{r7, pc}

08008a54 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008a54:	b580      	push	{r7, lr}
 8008a56:	b0ba      	sub	sp, #232	; 0xe8
 8008a58:	af00      	add	r7, sp, #0
 8008a5a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	69db      	ldr	r3, [r3, #28]
 8008a62:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	681b      	ldr	r3, [r3, #0]
 8008a74:	689b      	ldr	r3, [r3, #8]
 8008a76:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8008a7a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8008a7e:	f640 030f 	movw	r3, #2063	; 0x80f
 8008a82:	4013      	ands	r3, r2
 8008a84:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8008a88:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008a8c:	2b00      	cmp	r3, #0
 8008a8e:	d115      	bne.n	8008abc <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8008a90:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008a94:	f003 0320 	and.w	r3, r3, #32
 8008a98:	2b00      	cmp	r3, #0
 8008a9a:	d00f      	beq.n	8008abc <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8008a9c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008aa0:	f003 0320 	and.w	r3, r3, #32
 8008aa4:	2b00      	cmp	r3, #0
 8008aa6:	d009      	beq.n	8008abc <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008aac:	2b00      	cmp	r3, #0
 8008aae:	f000 82ab 	beq.w	8009008 <HAL_UART_IRQHandler+0x5b4>
      {
        huart->RxISR(huart);
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008ab6:	6878      	ldr	r0, [r7, #4]
 8008ab8:	4798      	blx	r3
      }
      return;
 8008aba:	e2a5      	b.n	8009008 <HAL_UART_IRQHandler+0x5b4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8008abc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008ac0:	2b00      	cmp	r3, #0
 8008ac2:	f000 8117 	beq.w	8008cf4 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8008ac6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008aca:	f003 0301 	and.w	r3, r3, #1
 8008ace:	2b00      	cmp	r3, #0
 8008ad0:	d106      	bne.n	8008ae0 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8008ad2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8008ad6:	4b85      	ldr	r3, [pc, #532]	; (8008cec <HAL_UART_IRQHandler+0x298>)
 8008ad8:	4013      	ands	r3, r2
 8008ada:	2b00      	cmp	r3, #0
 8008adc:	f000 810a 	beq.w	8008cf4 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008ae0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008ae4:	f003 0301 	and.w	r3, r3, #1
 8008ae8:	2b00      	cmp	r3, #0
 8008aea:	d011      	beq.n	8008b10 <HAL_UART_IRQHandler+0xbc>
 8008aec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008af0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008af4:	2b00      	cmp	r3, #0
 8008af6:	d00b      	beq.n	8008b10 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	681b      	ldr	r3, [r3, #0]
 8008afc:	2201      	movs	r2, #1
 8008afe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008b06:	f043 0201 	orr.w	r2, r3, #1
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008b10:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008b14:	f003 0302 	and.w	r3, r3, #2
 8008b18:	2b00      	cmp	r3, #0
 8008b1a:	d011      	beq.n	8008b40 <HAL_UART_IRQHandler+0xec>
 8008b1c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008b20:	f003 0301 	and.w	r3, r3, #1
 8008b24:	2b00      	cmp	r3, #0
 8008b26:	d00b      	beq.n	8008b40 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	2202      	movs	r2, #2
 8008b2e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008b36:	f043 0204 	orr.w	r2, r3, #4
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008b40:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008b44:	f003 0304 	and.w	r3, r3, #4
 8008b48:	2b00      	cmp	r3, #0
 8008b4a:	d011      	beq.n	8008b70 <HAL_UART_IRQHandler+0x11c>
 8008b4c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008b50:	f003 0301 	and.w	r3, r3, #1
 8008b54:	2b00      	cmp	r3, #0
 8008b56:	d00b      	beq.n	8008b70 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	2204      	movs	r2, #4
 8008b5e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008b66:	f043 0202 	orr.w	r2, r3, #2
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8008b70:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008b74:	f003 0308 	and.w	r3, r3, #8
 8008b78:	2b00      	cmp	r3, #0
 8008b7a:	d017      	beq.n	8008bac <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8008b7c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008b80:	f003 0320 	and.w	r3, r3, #32
 8008b84:	2b00      	cmp	r3, #0
 8008b86:	d105      	bne.n	8008b94 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8008b88:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008b8c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8008b90:	2b00      	cmp	r3, #0
 8008b92:	d00b      	beq.n	8008bac <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	2208      	movs	r2, #8
 8008b9a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008ba2:	f043 0208 	orr.w	r2, r3, #8
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8008bac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008bb0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008bb4:	2b00      	cmp	r3, #0
 8008bb6:	d012      	beq.n	8008bde <HAL_UART_IRQHandler+0x18a>
 8008bb8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008bbc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8008bc0:	2b00      	cmp	r3, #0
 8008bc2:	d00c      	beq.n	8008bde <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008bcc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008bd4:	f043 0220 	orr.w	r2, r3, #32
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008be4:	2b00      	cmp	r3, #0
 8008be6:	f000 8211 	beq.w	800900c <HAL_UART_IRQHandler+0x5b8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8008bea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008bee:	f003 0320 	and.w	r3, r3, #32
 8008bf2:	2b00      	cmp	r3, #0
 8008bf4:	d00d      	beq.n	8008c12 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8008bf6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008bfa:	f003 0320 	and.w	r3, r3, #32
 8008bfe:	2b00      	cmp	r3, #0
 8008c00:	d007      	beq.n	8008c12 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008c06:	2b00      	cmp	r3, #0
 8008c08:	d003      	beq.n	8008c12 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008c0e:	6878      	ldr	r0, [r7, #4]
 8008c10:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008c18:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	689b      	ldr	r3, [r3, #8]
 8008c22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008c26:	2b40      	cmp	r3, #64	; 0x40
 8008c28:	d005      	beq.n	8008c36 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8008c2a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008c2e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008c32:	2b00      	cmp	r3, #0
 8008c34:	d04f      	beq.n	8008cd6 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008c36:	6878      	ldr	r0, [r7, #4]
 8008c38:	f000 fe4c 	bl	80098d4 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	689b      	ldr	r3, [r3, #8]
 8008c42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008c46:	2b40      	cmp	r3, #64	; 0x40
 8008c48:	d141      	bne.n	8008cce <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	681b      	ldr	r3, [r3, #0]
 8008c4e:	3308      	adds	r3, #8
 8008c50:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c54:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008c58:	e853 3f00 	ldrex	r3, [r3]
 8008c5c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8008c60:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008c64:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008c68:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	681b      	ldr	r3, [r3, #0]
 8008c70:	3308      	adds	r3, #8
 8008c72:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8008c76:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8008c7a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c7e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8008c82:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8008c86:	e841 2300 	strex	r3, r2, [r1]
 8008c8a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8008c8e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008c92:	2b00      	cmp	r3, #0
 8008c94:	d1d9      	bne.n	8008c4a <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008c9a:	2b00      	cmp	r3, #0
 8008c9c:	d013      	beq.n	8008cc6 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008ca2:	4a13      	ldr	r2, [pc, #76]	; (8008cf0 <HAL_UART_IRQHandler+0x29c>)
 8008ca4:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008caa:	4618      	mov	r0, r3
 8008cac:	f7fb ff56 	bl	8004b5c <HAL_DMA_Abort_IT>
 8008cb0:	4603      	mov	r3, r0
 8008cb2:	2b00      	cmp	r3, #0
 8008cb4:	d017      	beq.n	8008ce6 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008cba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008cbc:	687a      	ldr	r2, [r7, #4]
 8008cbe:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8008cc0:	4610      	mov	r0, r2
 8008cc2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008cc4:	e00f      	b.n	8008ce6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008cc6:	6878      	ldr	r0, [r7, #4]
 8008cc8:	f000 f9b4 	bl	8009034 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008ccc:	e00b      	b.n	8008ce6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008cce:	6878      	ldr	r0, [r7, #4]
 8008cd0:	f000 f9b0 	bl	8009034 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008cd4:	e007      	b.n	8008ce6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008cd6:	6878      	ldr	r0, [r7, #4]
 8008cd8:	f000 f9ac 	bl	8009034 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	2200      	movs	r2, #0
 8008ce0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8008ce4:	e192      	b.n	800900c <HAL_UART_IRQHandler+0x5b8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008ce6:	bf00      	nop
    return;
 8008ce8:	e190      	b.n	800900c <HAL_UART_IRQHandler+0x5b8>
 8008cea:	bf00      	nop
 8008cec:	04000120 	.word	0x04000120
 8008cf0:	0800999d 	.word	0x0800999d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008cf8:	2b01      	cmp	r3, #1
 8008cfa:	f040 814b 	bne.w	8008f94 <HAL_UART_IRQHandler+0x540>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8008cfe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008d02:	f003 0310 	and.w	r3, r3, #16
 8008d06:	2b00      	cmp	r3, #0
 8008d08:	f000 8144 	beq.w	8008f94 <HAL_UART_IRQHandler+0x540>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8008d0c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008d10:	f003 0310 	and.w	r3, r3, #16
 8008d14:	2b00      	cmp	r3, #0
 8008d16:	f000 813d 	beq.w	8008f94 <HAL_UART_IRQHandler+0x540>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	681b      	ldr	r3, [r3, #0]
 8008d1e:	2210      	movs	r2, #16
 8008d20:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	681b      	ldr	r3, [r3, #0]
 8008d26:	689b      	ldr	r3, [r3, #8]
 8008d28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008d2c:	2b40      	cmp	r3, #64	; 0x40
 8008d2e:	f040 80b5 	bne.w	8008e9c <HAL_UART_IRQHandler+0x448>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	685b      	ldr	r3, [r3, #4]
 8008d3a:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008d3e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8008d42:	2b00      	cmp	r3, #0
 8008d44:	f000 8164 	beq.w	8009010 <HAL_UART_IRQHandler+0x5bc>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8008d4e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008d52:	429a      	cmp	r2, r3
 8008d54:	f080 815c 	bcs.w	8009010 <HAL_UART_IRQHandler+0x5bc>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008d5e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008d66:	699b      	ldr	r3, [r3, #24]
 8008d68:	2b20      	cmp	r3, #32
 8008d6a:	f000 8086 	beq.w	8008e7a <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d76:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008d7a:	e853 3f00 	ldrex	r3, [r3]
 8008d7e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8008d82:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008d86:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008d8a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	681b      	ldr	r3, [r3, #0]
 8008d92:	461a      	mov	r2, r3
 8008d94:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008d98:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8008d9c:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008da0:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8008da4:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8008da8:	e841 2300 	strex	r3, r2, [r1]
 8008dac:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8008db0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008db4:	2b00      	cmp	r3, #0
 8008db6:	d1da      	bne.n	8008d6e <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	3308      	adds	r3, #8
 8008dbe:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008dc0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008dc2:	e853 3f00 	ldrex	r3, [r3]
 8008dc6:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8008dc8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008dca:	f023 0301 	bic.w	r3, r3, #1
 8008dce:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	681b      	ldr	r3, [r3, #0]
 8008dd6:	3308      	adds	r3, #8
 8008dd8:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8008ddc:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8008de0:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008de2:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8008de4:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8008de8:	e841 2300 	strex	r3, r2, [r1]
 8008dec:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8008dee:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008df0:	2b00      	cmp	r3, #0
 8008df2:	d1e1      	bne.n	8008db8 <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	681b      	ldr	r3, [r3, #0]
 8008df8:	3308      	adds	r3, #8
 8008dfa:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008dfc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008dfe:	e853 3f00 	ldrex	r3, [r3]
 8008e02:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8008e04:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008e06:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008e0a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	681b      	ldr	r3, [r3, #0]
 8008e12:	3308      	adds	r3, #8
 8008e14:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8008e18:	66fa      	str	r2, [r7, #108]	; 0x6c
 8008e1a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e1c:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8008e1e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8008e20:	e841 2300 	strex	r3, r2, [r1]
 8008e24:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8008e26:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008e28:	2b00      	cmp	r3, #0
 8008e2a:	d1e3      	bne.n	8008df4 <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	2220      	movs	r2, #32
 8008e30:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	2200      	movs	r2, #0
 8008e38:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	681b      	ldr	r3, [r3, #0]
 8008e3e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e40:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008e42:	e853 3f00 	ldrex	r3, [r3]
 8008e46:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8008e48:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008e4a:	f023 0310 	bic.w	r3, r3, #16
 8008e4e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	681b      	ldr	r3, [r3, #0]
 8008e56:	461a      	mov	r2, r3
 8008e58:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008e5c:	65bb      	str	r3, [r7, #88]	; 0x58
 8008e5e:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e60:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008e62:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008e64:	e841 2300 	strex	r3, r2, [r1]
 8008e68:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8008e6a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008e6c:	2b00      	cmp	r3, #0
 8008e6e:	d1e4      	bne.n	8008e3a <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008e74:	4618      	mov	r0, r3
 8008e76:	f7fb fe38 	bl	8004aea <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	2202      	movs	r2, #2
 8008e7e:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008e8c:	b29b      	uxth	r3, r3
 8008e8e:	1ad3      	subs	r3, r2, r3
 8008e90:	b29b      	uxth	r3, r3
 8008e92:	4619      	mov	r1, r3
 8008e94:	6878      	ldr	r0, [r7, #4]
 8008e96:	f000 f8d7 	bl	8009048 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008e9a:	e0b9      	b.n	8009010 <HAL_UART_IRQHandler+0x5bc>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008ea8:	b29b      	uxth	r3, r3
 8008eaa:	1ad3      	subs	r3, r2, r3
 8008eac:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008eb6:	b29b      	uxth	r3, r3
 8008eb8:	2b00      	cmp	r3, #0
 8008eba:	f000 80ab 	beq.w	8009014 <HAL_UART_IRQHandler+0x5c0>
          && (nb_rx_data > 0U))
 8008ebe:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008ec2:	2b00      	cmp	r3, #0
 8008ec4:	f000 80a6 	beq.w	8009014 <HAL_UART_IRQHandler+0x5c0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	681b      	ldr	r3, [r3, #0]
 8008ecc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ece:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ed0:	e853 3f00 	ldrex	r3, [r3]
 8008ed4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008ed6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ed8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008edc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	461a      	mov	r2, r3
 8008ee6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008eea:	647b      	str	r3, [r7, #68]	; 0x44
 8008eec:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008eee:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008ef0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008ef2:	e841 2300 	strex	r3, r2, [r1]
 8008ef6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008ef8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008efa:	2b00      	cmp	r3, #0
 8008efc:	d1e4      	bne.n	8008ec8 <HAL_UART_IRQHandler+0x474>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	3308      	adds	r3, #8
 8008f04:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f08:	e853 3f00 	ldrex	r3, [r3]
 8008f0c:	623b      	str	r3, [r7, #32]
   return(result);
 8008f0e:	6a3b      	ldr	r3, [r7, #32]
 8008f10:	f023 0301 	bic.w	r3, r3, #1
 8008f14:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	681b      	ldr	r3, [r3, #0]
 8008f1c:	3308      	adds	r3, #8
 8008f1e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8008f22:	633a      	str	r2, [r7, #48]	; 0x30
 8008f24:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f26:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008f28:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008f2a:	e841 2300 	strex	r3, r2, [r1]
 8008f2e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008f30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f32:	2b00      	cmp	r3, #0
 8008f34:	d1e3      	bne.n	8008efe <HAL_UART_IRQHandler+0x4aa>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	2220      	movs	r2, #32
 8008f3a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	2200      	movs	r2, #0
 8008f42:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	2200      	movs	r2, #0
 8008f48:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	681b      	ldr	r3, [r3, #0]
 8008f4e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f50:	693b      	ldr	r3, [r7, #16]
 8008f52:	e853 3f00 	ldrex	r3, [r3]
 8008f56:	60fb      	str	r3, [r7, #12]
   return(result);
 8008f58:	68fb      	ldr	r3, [r7, #12]
 8008f5a:	f023 0310 	bic.w	r3, r3, #16
 8008f5e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	681b      	ldr	r3, [r3, #0]
 8008f66:	461a      	mov	r2, r3
 8008f68:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8008f6c:	61fb      	str	r3, [r7, #28]
 8008f6e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f70:	69b9      	ldr	r1, [r7, #24]
 8008f72:	69fa      	ldr	r2, [r7, #28]
 8008f74:	e841 2300 	strex	r3, r2, [r1]
 8008f78:	617b      	str	r3, [r7, #20]
   return(result);
 8008f7a:	697b      	ldr	r3, [r7, #20]
 8008f7c:	2b00      	cmp	r3, #0
 8008f7e:	d1e4      	bne.n	8008f4a <HAL_UART_IRQHandler+0x4f6>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	2202      	movs	r2, #2
 8008f84:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008f86:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008f8a:	4619      	mov	r1, r3
 8008f8c:	6878      	ldr	r0, [r7, #4]
 8008f8e:	f000 f85b 	bl	8009048 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008f92:	e03f      	b.n	8009014 <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8008f94:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008f98:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008f9c:	2b00      	cmp	r3, #0
 8008f9e:	d00e      	beq.n	8008fbe <HAL_UART_IRQHandler+0x56a>
 8008fa0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008fa4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008fa8:	2b00      	cmp	r3, #0
 8008faa:	d008      	beq.n	8008fbe <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	681b      	ldr	r3, [r3, #0]
 8008fb0:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8008fb4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8008fb6:	6878      	ldr	r0, [r7, #4]
 8008fb8:	f000 fed8 	bl	8009d6c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008fbc:	e02d      	b.n	800901a <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8008fbe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008fc2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008fc6:	2b00      	cmp	r3, #0
 8008fc8:	d00e      	beq.n	8008fe8 <HAL_UART_IRQHandler+0x594>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8008fca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008fce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008fd2:	2b00      	cmp	r3, #0
 8008fd4:	d008      	beq.n	8008fe8 <HAL_UART_IRQHandler+0x594>
  {
    if (huart->TxISR != NULL)
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008fda:	2b00      	cmp	r3, #0
 8008fdc:	d01c      	beq.n	8009018 <HAL_UART_IRQHandler+0x5c4>
    {
      huart->TxISR(huart);
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008fe2:	6878      	ldr	r0, [r7, #4]
 8008fe4:	4798      	blx	r3
    }
    return;
 8008fe6:	e017      	b.n	8009018 <HAL_UART_IRQHandler+0x5c4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8008fe8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008fec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008ff0:	2b00      	cmp	r3, #0
 8008ff2:	d012      	beq.n	800901a <HAL_UART_IRQHandler+0x5c6>
 8008ff4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008ff8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008ffc:	2b00      	cmp	r3, #0
 8008ffe:	d00c      	beq.n	800901a <HAL_UART_IRQHandler+0x5c6>
  {
    UART_EndTransmit_IT(huart);
 8009000:	6878      	ldr	r0, [r7, #4]
 8009002:	f000 fce1 	bl	80099c8 <UART_EndTransmit_IT>
    return;
 8009006:	e008      	b.n	800901a <HAL_UART_IRQHandler+0x5c6>
      return;
 8009008:	bf00      	nop
 800900a:	e006      	b.n	800901a <HAL_UART_IRQHandler+0x5c6>
    return;
 800900c:	bf00      	nop
 800900e:	e004      	b.n	800901a <HAL_UART_IRQHandler+0x5c6>
      return;
 8009010:	bf00      	nop
 8009012:	e002      	b.n	800901a <HAL_UART_IRQHandler+0x5c6>
      return;
 8009014:	bf00      	nop
 8009016:	e000      	b.n	800901a <HAL_UART_IRQHandler+0x5c6>
    return;
 8009018:	bf00      	nop
  }

}
 800901a:	37e8      	adds	r7, #232	; 0xe8
 800901c:	46bd      	mov	sp, r7
 800901e:	bd80      	pop	{r7, pc}

08009020 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009020:	b480      	push	{r7}
 8009022:	b083      	sub	sp, #12
 8009024:	af00      	add	r7, sp, #0
 8009026:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8009028:	bf00      	nop
 800902a:	370c      	adds	r7, #12
 800902c:	46bd      	mov	sp, r7
 800902e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009032:	4770      	bx	lr

08009034 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009034:	b480      	push	{r7}
 8009036:	b083      	sub	sp, #12
 8009038:	af00      	add	r7, sp, #0
 800903a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800903c:	bf00      	nop
 800903e:	370c      	adds	r7, #12
 8009040:	46bd      	mov	sp, r7
 8009042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009046:	4770      	bx	lr

08009048 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009048:	b480      	push	{r7}
 800904a:	b083      	sub	sp, #12
 800904c:	af00      	add	r7, sp, #0
 800904e:	6078      	str	r0, [r7, #4]
 8009050:	460b      	mov	r3, r1
 8009052:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009054:	bf00      	nop
 8009056:	370c      	adds	r7, #12
 8009058:	46bd      	mov	sp, r7
 800905a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800905e:	4770      	bx	lr

08009060 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009060:	b580      	push	{r7, lr}
 8009062:	b088      	sub	sp, #32
 8009064:	af00      	add	r7, sp, #0
 8009066:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009068:	2300      	movs	r3, #0
 800906a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	689a      	ldr	r2, [r3, #8]
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	691b      	ldr	r3, [r3, #16]
 8009074:	431a      	orrs	r2, r3
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	695b      	ldr	r3, [r3, #20]
 800907a:	431a      	orrs	r2, r3
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	69db      	ldr	r3, [r3, #28]
 8009080:	4313      	orrs	r3, r2
 8009082:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	681b      	ldr	r3, [r3, #0]
 800908a:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800908e:	f023 030c 	bic.w	r3, r3, #12
 8009092:	687a      	ldr	r2, [r7, #4]
 8009094:	6812      	ldr	r2, [r2, #0]
 8009096:	6979      	ldr	r1, [r7, #20]
 8009098:	430b      	orrs	r3, r1
 800909a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	681b      	ldr	r3, [r3, #0]
 80090a0:	685b      	ldr	r3, [r3, #4]
 80090a2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	68da      	ldr	r2, [r3, #12]
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	681b      	ldr	r3, [r3, #0]
 80090ae:	430a      	orrs	r2, r1
 80090b0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	699b      	ldr	r3, [r3, #24]
 80090b6:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	6a1b      	ldr	r3, [r3, #32]
 80090bc:	697a      	ldr	r2, [r7, #20]
 80090be:	4313      	orrs	r3, r2
 80090c0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	681b      	ldr	r3, [r3, #0]
 80090c6:	689b      	ldr	r3, [r3, #8]
 80090c8:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	697a      	ldr	r2, [r7, #20]
 80090d2:	430a      	orrs	r2, r1
 80090d4:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	681b      	ldr	r3, [r3, #0]
 80090da:	4aa7      	ldr	r2, [pc, #668]	; (8009378 <UART_SetConfig+0x318>)
 80090dc:	4293      	cmp	r3, r2
 80090de:	d120      	bne.n	8009122 <UART_SetConfig+0xc2>
 80090e0:	4ba6      	ldr	r3, [pc, #664]	; (800937c <UART_SetConfig+0x31c>)
 80090e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80090e4:	f003 0303 	and.w	r3, r3, #3
 80090e8:	2b03      	cmp	r3, #3
 80090ea:	d817      	bhi.n	800911c <UART_SetConfig+0xbc>
 80090ec:	a201      	add	r2, pc, #4	; (adr r2, 80090f4 <UART_SetConfig+0x94>)
 80090ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80090f2:	bf00      	nop
 80090f4:	08009105 	.word	0x08009105
 80090f8:	08009111 	.word	0x08009111
 80090fc:	08009117 	.word	0x08009117
 8009100:	0800910b 	.word	0x0800910b
 8009104:	2301      	movs	r3, #1
 8009106:	77fb      	strb	r3, [r7, #31]
 8009108:	e0b5      	b.n	8009276 <UART_SetConfig+0x216>
 800910a:	2302      	movs	r3, #2
 800910c:	77fb      	strb	r3, [r7, #31]
 800910e:	e0b2      	b.n	8009276 <UART_SetConfig+0x216>
 8009110:	2304      	movs	r3, #4
 8009112:	77fb      	strb	r3, [r7, #31]
 8009114:	e0af      	b.n	8009276 <UART_SetConfig+0x216>
 8009116:	2308      	movs	r3, #8
 8009118:	77fb      	strb	r3, [r7, #31]
 800911a:	e0ac      	b.n	8009276 <UART_SetConfig+0x216>
 800911c:	2310      	movs	r3, #16
 800911e:	77fb      	strb	r3, [r7, #31]
 8009120:	e0a9      	b.n	8009276 <UART_SetConfig+0x216>
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	681b      	ldr	r3, [r3, #0]
 8009126:	4a96      	ldr	r2, [pc, #600]	; (8009380 <UART_SetConfig+0x320>)
 8009128:	4293      	cmp	r3, r2
 800912a:	d124      	bne.n	8009176 <UART_SetConfig+0x116>
 800912c:	4b93      	ldr	r3, [pc, #588]	; (800937c <UART_SetConfig+0x31c>)
 800912e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009130:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8009134:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8009138:	d011      	beq.n	800915e <UART_SetConfig+0xfe>
 800913a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800913e:	d817      	bhi.n	8009170 <UART_SetConfig+0x110>
 8009140:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009144:	d011      	beq.n	800916a <UART_SetConfig+0x10a>
 8009146:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800914a:	d811      	bhi.n	8009170 <UART_SetConfig+0x110>
 800914c:	2b00      	cmp	r3, #0
 800914e:	d003      	beq.n	8009158 <UART_SetConfig+0xf8>
 8009150:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009154:	d006      	beq.n	8009164 <UART_SetConfig+0x104>
 8009156:	e00b      	b.n	8009170 <UART_SetConfig+0x110>
 8009158:	2300      	movs	r3, #0
 800915a:	77fb      	strb	r3, [r7, #31]
 800915c:	e08b      	b.n	8009276 <UART_SetConfig+0x216>
 800915e:	2302      	movs	r3, #2
 8009160:	77fb      	strb	r3, [r7, #31]
 8009162:	e088      	b.n	8009276 <UART_SetConfig+0x216>
 8009164:	2304      	movs	r3, #4
 8009166:	77fb      	strb	r3, [r7, #31]
 8009168:	e085      	b.n	8009276 <UART_SetConfig+0x216>
 800916a:	2308      	movs	r3, #8
 800916c:	77fb      	strb	r3, [r7, #31]
 800916e:	e082      	b.n	8009276 <UART_SetConfig+0x216>
 8009170:	2310      	movs	r3, #16
 8009172:	77fb      	strb	r3, [r7, #31]
 8009174:	e07f      	b.n	8009276 <UART_SetConfig+0x216>
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	681b      	ldr	r3, [r3, #0]
 800917a:	4a82      	ldr	r2, [pc, #520]	; (8009384 <UART_SetConfig+0x324>)
 800917c:	4293      	cmp	r3, r2
 800917e:	d124      	bne.n	80091ca <UART_SetConfig+0x16a>
 8009180:	4b7e      	ldr	r3, [pc, #504]	; (800937c <UART_SetConfig+0x31c>)
 8009182:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009184:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8009188:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800918c:	d011      	beq.n	80091b2 <UART_SetConfig+0x152>
 800918e:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8009192:	d817      	bhi.n	80091c4 <UART_SetConfig+0x164>
 8009194:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8009198:	d011      	beq.n	80091be <UART_SetConfig+0x15e>
 800919a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800919e:	d811      	bhi.n	80091c4 <UART_SetConfig+0x164>
 80091a0:	2b00      	cmp	r3, #0
 80091a2:	d003      	beq.n	80091ac <UART_SetConfig+0x14c>
 80091a4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80091a8:	d006      	beq.n	80091b8 <UART_SetConfig+0x158>
 80091aa:	e00b      	b.n	80091c4 <UART_SetConfig+0x164>
 80091ac:	2300      	movs	r3, #0
 80091ae:	77fb      	strb	r3, [r7, #31]
 80091b0:	e061      	b.n	8009276 <UART_SetConfig+0x216>
 80091b2:	2302      	movs	r3, #2
 80091b4:	77fb      	strb	r3, [r7, #31]
 80091b6:	e05e      	b.n	8009276 <UART_SetConfig+0x216>
 80091b8:	2304      	movs	r3, #4
 80091ba:	77fb      	strb	r3, [r7, #31]
 80091bc:	e05b      	b.n	8009276 <UART_SetConfig+0x216>
 80091be:	2308      	movs	r3, #8
 80091c0:	77fb      	strb	r3, [r7, #31]
 80091c2:	e058      	b.n	8009276 <UART_SetConfig+0x216>
 80091c4:	2310      	movs	r3, #16
 80091c6:	77fb      	strb	r3, [r7, #31]
 80091c8:	e055      	b.n	8009276 <UART_SetConfig+0x216>
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	681b      	ldr	r3, [r3, #0]
 80091ce:	4a6e      	ldr	r2, [pc, #440]	; (8009388 <UART_SetConfig+0x328>)
 80091d0:	4293      	cmp	r3, r2
 80091d2:	d124      	bne.n	800921e <UART_SetConfig+0x1be>
 80091d4:	4b69      	ldr	r3, [pc, #420]	; (800937c <UART_SetConfig+0x31c>)
 80091d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80091d8:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80091dc:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80091e0:	d011      	beq.n	8009206 <UART_SetConfig+0x1a6>
 80091e2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80091e6:	d817      	bhi.n	8009218 <UART_SetConfig+0x1b8>
 80091e8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80091ec:	d011      	beq.n	8009212 <UART_SetConfig+0x1b2>
 80091ee:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80091f2:	d811      	bhi.n	8009218 <UART_SetConfig+0x1b8>
 80091f4:	2b00      	cmp	r3, #0
 80091f6:	d003      	beq.n	8009200 <UART_SetConfig+0x1a0>
 80091f8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80091fc:	d006      	beq.n	800920c <UART_SetConfig+0x1ac>
 80091fe:	e00b      	b.n	8009218 <UART_SetConfig+0x1b8>
 8009200:	2300      	movs	r3, #0
 8009202:	77fb      	strb	r3, [r7, #31]
 8009204:	e037      	b.n	8009276 <UART_SetConfig+0x216>
 8009206:	2302      	movs	r3, #2
 8009208:	77fb      	strb	r3, [r7, #31]
 800920a:	e034      	b.n	8009276 <UART_SetConfig+0x216>
 800920c:	2304      	movs	r3, #4
 800920e:	77fb      	strb	r3, [r7, #31]
 8009210:	e031      	b.n	8009276 <UART_SetConfig+0x216>
 8009212:	2308      	movs	r3, #8
 8009214:	77fb      	strb	r3, [r7, #31]
 8009216:	e02e      	b.n	8009276 <UART_SetConfig+0x216>
 8009218:	2310      	movs	r3, #16
 800921a:	77fb      	strb	r3, [r7, #31]
 800921c:	e02b      	b.n	8009276 <UART_SetConfig+0x216>
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	681b      	ldr	r3, [r3, #0]
 8009222:	4a5a      	ldr	r2, [pc, #360]	; (800938c <UART_SetConfig+0x32c>)
 8009224:	4293      	cmp	r3, r2
 8009226:	d124      	bne.n	8009272 <UART_SetConfig+0x212>
 8009228:	4b54      	ldr	r3, [pc, #336]	; (800937c <UART_SetConfig+0x31c>)
 800922a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800922c:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8009230:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8009234:	d011      	beq.n	800925a <UART_SetConfig+0x1fa>
 8009236:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800923a:	d817      	bhi.n	800926c <UART_SetConfig+0x20c>
 800923c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009240:	d011      	beq.n	8009266 <UART_SetConfig+0x206>
 8009242:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009246:	d811      	bhi.n	800926c <UART_SetConfig+0x20c>
 8009248:	2b00      	cmp	r3, #0
 800924a:	d003      	beq.n	8009254 <UART_SetConfig+0x1f4>
 800924c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009250:	d006      	beq.n	8009260 <UART_SetConfig+0x200>
 8009252:	e00b      	b.n	800926c <UART_SetConfig+0x20c>
 8009254:	2300      	movs	r3, #0
 8009256:	77fb      	strb	r3, [r7, #31]
 8009258:	e00d      	b.n	8009276 <UART_SetConfig+0x216>
 800925a:	2302      	movs	r3, #2
 800925c:	77fb      	strb	r3, [r7, #31]
 800925e:	e00a      	b.n	8009276 <UART_SetConfig+0x216>
 8009260:	2304      	movs	r3, #4
 8009262:	77fb      	strb	r3, [r7, #31]
 8009264:	e007      	b.n	8009276 <UART_SetConfig+0x216>
 8009266:	2308      	movs	r3, #8
 8009268:	77fb      	strb	r3, [r7, #31]
 800926a:	e004      	b.n	8009276 <UART_SetConfig+0x216>
 800926c:	2310      	movs	r3, #16
 800926e:	77fb      	strb	r3, [r7, #31]
 8009270:	e001      	b.n	8009276 <UART_SetConfig+0x216>
 8009272:	2310      	movs	r3, #16
 8009274:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	69db      	ldr	r3, [r3, #28]
 800927a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800927e:	d15b      	bne.n	8009338 <UART_SetConfig+0x2d8>
  {
    switch (clocksource)
 8009280:	7ffb      	ldrb	r3, [r7, #31]
 8009282:	2b08      	cmp	r3, #8
 8009284:	d827      	bhi.n	80092d6 <UART_SetConfig+0x276>
 8009286:	a201      	add	r2, pc, #4	; (adr r2, 800928c <UART_SetConfig+0x22c>)
 8009288:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800928c:	080092b1 	.word	0x080092b1
 8009290:	080092b9 	.word	0x080092b9
 8009294:	080092c1 	.word	0x080092c1
 8009298:	080092d7 	.word	0x080092d7
 800929c:	080092c7 	.word	0x080092c7
 80092a0:	080092d7 	.word	0x080092d7
 80092a4:	080092d7 	.word	0x080092d7
 80092a8:	080092d7 	.word	0x080092d7
 80092ac:	080092cf 	.word	0x080092cf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80092b0:	f7fd fa7e 	bl	80067b0 <HAL_RCC_GetPCLK1Freq>
 80092b4:	61b8      	str	r0, [r7, #24]
        break;
 80092b6:	e013      	b.n	80092e0 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80092b8:	f7fd fa9c 	bl	80067f4 <HAL_RCC_GetPCLK2Freq>
 80092bc:	61b8      	str	r0, [r7, #24]
        break;
 80092be:	e00f      	b.n	80092e0 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80092c0:	4b33      	ldr	r3, [pc, #204]	; (8009390 <UART_SetConfig+0x330>)
 80092c2:	61bb      	str	r3, [r7, #24]
        break;
 80092c4:	e00c      	b.n	80092e0 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80092c6:	f7fd f9fd 	bl	80066c4 <HAL_RCC_GetSysClockFreq>
 80092ca:	61b8      	str	r0, [r7, #24]
        break;
 80092cc:	e008      	b.n	80092e0 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80092ce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80092d2:	61bb      	str	r3, [r7, #24]
        break;
 80092d4:	e004      	b.n	80092e0 <UART_SetConfig+0x280>
      default:
        pclk = 0U;
 80092d6:	2300      	movs	r3, #0
 80092d8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80092da:	2301      	movs	r3, #1
 80092dc:	77bb      	strb	r3, [r7, #30]
        break;
 80092de:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80092e0:	69bb      	ldr	r3, [r7, #24]
 80092e2:	2b00      	cmp	r3, #0
 80092e4:	f000 8082 	beq.w	80093ec <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80092e8:	69bb      	ldr	r3, [r7, #24]
 80092ea:	005a      	lsls	r2, r3, #1
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	685b      	ldr	r3, [r3, #4]
 80092f0:	085b      	lsrs	r3, r3, #1
 80092f2:	441a      	add	r2, r3
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	685b      	ldr	r3, [r3, #4]
 80092f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80092fc:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80092fe:	693b      	ldr	r3, [r7, #16]
 8009300:	2b0f      	cmp	r3, #15
 8009302:	d916      	bls.n	8009332 <UART_SetConfig+0x2d2>
 8009304:	693b      	ldr	r3, [r7, #16]
 8009306:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800930a:	d212      	bcs.n	8009332 <UART_SetConfig+0x2d2>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800930c:	693b      	ldr	r3, [r7, #16]
 800930e:	b29b      	uxth	r3, r3
 8009310:	f023 030f 	bic.w	r3, r3, #15
 8009314:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009316:	693b      	ldr	r3, [r7, #16]
 8009318:	085b      	lsrs	r3, r3, #1
 800931a:	b29b      	uxth	r3, r3
 800931c:	f003 0307 	and.w	r3, r3, #7
 8009320:	b29a      	uxth	r2, r3
 8009322:	89fb      	ldrh	r3, [r7, #14]
 8009324:	4313      	orrs	r3, r2
 8009326:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	681b      	ldr	r3, [r3, #0]
 800932c:	89fa      	ldrh	r2, [r7, #14]
 800932e:	60da      	str	r2, [r3, #12]
 8009330:	e05c      	b.n	80093ec <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8009332:	2301      	movs	r3, #1
 8009334:	77bb      	strb	r3, [r7, #30]
 8009336:	e059      	b.n	80093ec <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8009338:	7ffb      	ldrb	r3, [r7, #31]
 800933a:	2b08      	cmp	r3, #8
 800933c:	d835      	bhi.n	80093aa <UART_SetConfig+0x34a>
 800933e:	a201      	add	r2, pc, #4	; (adr r2, 8009344 <UART_SetConfig+0x2e4>)
 8009340:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009344:	08009369 	.word	0x08009369
 8009348:	08009371 	.word	0x08009371
 800934c:	08009395 	.word	0x08009395
 8009350:	080093ab 	.word	0x080093ab
 8009354:	0800939b 	.word	0x0800939b
 8009358:	080093ab 	.word	0x080093ab
 800935c:	080093ab 	.word	0x080093ab
 8009360:	080093ab 	.word	0x080093ab
 8009364:	080093a3 	.word	0x080093a3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009368:	f7fd fa22 	bl	80067b0 <HAL_RCC_GetPCLK1Freq>
 800936c:	61b8      	str	r0, [r7, #24]
        break;
 800936e:	e021      	b.n	80093b4 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009370:	f7fd fa40 	bl	80067f4 <HAL_RCC_GetPCLK2Freq>
 8009374:	61b8      	str	r0, [r7, #24]
        break;
 8009376:	e01d      	b.n	80093b4 <UART_SetConfig+0x354>
 8009378:	40013800 	.word	0x40013800
 800937c:	40021000 	.word	0x40021000
 8009380:	40004400 	.word	0x40004400
 8009384:	40004800 	.word	0x40004800
 8009388:	40004c00 	.word	0x40004c00
 800938c:	40005000 	.word	0x40005000
 8009390:	007a1200 	.word	0x007a1200
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009394:	4b1b      	ldr	r3, [pc, #108]	; (8009404 <UART_SetConfig+0x3a4>)
 8009396:	61bb      	str	r3, [r7, #24]
        break;
 8009398:	e00c      	b.n	80093b4 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800939a:	f7fd f993 	bl	80066c4 <HAL_RCC_GetSysClockFreq>
 800939e:	61b8      	str	r0, [r7, #24]
        break;
 80093a0:	e008      	b.n	80093b4 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80093a2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80093a6:	61bb      	str	r3, [r7, #24]
        break;
 80093a8:	e004      	b.n	80093b4 <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 80093aa:	2300      	movs	r3, #0
 80093ac:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80093ae:	2301      	movs	r3, #1
 80093b0:	77bb      	strb	r3, [r7, #30]
        break;
 80093b2:	bf00      	nop
    }

    if (pclk != 0U)
 80093b4:	69bb      	ldr	r3, [r7, #24]
 80093b6:	2b00      	cmp	r3, #0
 80093b8:	d018      	beq.n	80093ec <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	685b      	ldr	r3, [r3, #4]
 80093be:	085a      	lsrs	r2, r3, #1
 80093c0:	69bb      	ldr	r3, [r7, #24]
 80093c2:	441a      	add	r2, r3
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	685b      	ldr	r3, [r3, #4]
 80093c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80093cc:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80093ce:	693b      	ldr	r3, [r7, #16]
 80093d0:	2b0f      	cmp	r3, #15
 80093d2:	d909      	bls.n	80093e8 <UART_SetConfig+0x388>
 80093d4:	693b      	ldr	r3, [r7, #16]
 80093d6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80093da:	d205      	bcs.n	80093e8 <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80093dc:	693b      	ldr	r3, [r7, #16]
 80093de:	b29a      	uxth	r2, r3
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	681b      	ldr	r3, [r3, #0]
 80093e4:	60da      	str	r2, [r3, #12]
 80093e6:	e001      	b.n	80093ec <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 80093e8:	2301      	movs	r3, #1
 80093ea:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	2200      	movs	r2, #0
 80093f0:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	2200      	movs	r2, #0
 80093f6:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80093f8:	7fbb      	ldrb	r3, [r7, #30]
}
 80093fa:	4618      	mov	r0, r3
 80093fc:	3720      	adds	r7, #32
 80093fe:	46bd      	mov	sp, r7
 8009400:	bd80      	pop	{r7, pc}
 8009402:	bf00      	nop
 8009404:	007a1200 	.word	0x007a1200

08009408 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009408:	b480      	push	{r7}
 800940a:	b083      	sub	sp, #12
 800940c:	af00      	add	r7, sp, #0
 800940e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009414:	f003 0301 	and.w	r3, r3, #1
 8009418:	2b00      	cmp	r3, #0
 800941a:	d00a      	beq.n	8009432 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	681b      	ldr	r3, [r3, #0]
 8009420:	685b      	ldr	r3, [r3, #4]
 8009422:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	681b      	ldr	r3, [r3, #0]
 800942e:	430a      	orrs	r2, r1
 8009430:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009436:	f003 0302 	and.w	r3, r3, #2
 800943a:	2b00      	cmp	r3, #0
 800943c:	d00a      	beq.n	8009454 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	681b      	ldr	r3, [r3, #0]
 8009442:	685b      	ldr	r3, [r3, #4]
 8009444:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	681b      	ldr	r3, [r3, #0]
 8009450:	430a      	orrs	r2, r1
 8009452:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009458:	f003 0304 	and.w	r3, r3, #4
 800945c:	2b00      	cmp	r3, #0
 800945e:	d00a      	beq.n	8009476 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	681b      	ldr	r3, [r3, #0]
 8009464:	685b      	ldr	r3, [r3, #4]
 8009466:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	681b      	ldr	r3, [r3, #0]
 8009472:	430a      	orrs	r2, r1
 8009474:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800947a:	f003 0308 	and.w	r3, r3, #8
 800947e:	2b00      	cmp	r3, #0
 8009480:	d00a      	beq.n	8009498 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	681b      	ldr	r3, [r3, #0]
 8009486:	685b      	ldr	r3, [r3, #4]
 8009488:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	681b      	ldr	r3, [r3, #0]
 8009494:	430a      	orrs	r2, r1
 8009496:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800949c:	f003 0310 	and.w	r3, r3, #16
 80094a0:	2b00      	cmp	r3, #0
 80094a2:	d00a      	beq.n	80094ba <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	681b      	ldr	r3, [r3, #0]
 80094a8:	689b      	ldr	r3, [r3, #8]
 80094aa:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	681b      	ldr	r3, [r3, #0]
 80094b6:	430a      	orrs	r2, r1
 80094b8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094be:	f003 0320 	and.w	r3, r3, #32
 80094c2:	2b00      	cmp	r3, #0
 80094c4:	d00a      	beq.n	80094dc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	681b      	ldr	r3, [r3, #0]
 80094ca:	689b      	ldr	r3, [r3, #8]
 80094cc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	681b      	ldr	r3, [r3, #0]
 80094d8:	430a      	orrs	r2, r1
 80094da:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80094e4:	2b00      	cmp	r3, #0
 80094e6:	d01a      	beq.n	800951e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	681b      	ldr	r3, [r3, #0]
 80094ec:	685b      	ldr	r3, [r3, #4]
 80094ee:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	681b      	ldr	r3, [r3, #0]
 80094fa:	430a      	orrs	r2, r1
 80094fc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009502:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009506:	d10a      	bne.n	800951e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	681b      	ldr	r3, [r3, #0]
 800950c:	685b      	ldr	r3, [r3, #4]
 800950e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	681b      	ldr	r3, [r3, #0]
 800951a:	430a      	orrs	r2, r1
 800951c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009522:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009526:	2b00      	cmp	r3, #0
 8009528:	d00a      	beq.n	8009540 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	681b      	ldr	r3, [r3, #0]
 800952e:	685b      	ldr	r3, [r3, #4]
 8009530:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	681b      	ldr	r3, [r3, #0]
 800953c:	430a      	orrs	r2, r1
 800953e:	605a      	str	r2, [r3, #4]
  }
}
 8009540:	bf00      	nop
 8009542:	370c      	adds	r7, #12
 8009544:	46bd      	mov	sp, r7
 8009546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800954a:	4770      	bx	lr

0800954c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800954c:	b580      	push	{r7, lr}
 800954e:	b098      	sub	sp, #96	; 0x60
 8009550:	af02      	add	r7, sp, #8
 8009552:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	2200      	movs	r2, #0
 8009558:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800955c:	f7f9 feb0 	bl	80032c0 <HAL_GetTick>
 8009560:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	681b      	ldr	r3, [r3, #0]
 8009566:	681b      	ldr	r3, [r3, #0]
 8009568:	f003 0308 	and.w	r3, r3, #8
 800956c:	2b08      	cmp	r3, #8
 800956e:	d12e      	bne.n	80095ce <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009570:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009574:	9300      	str	r3, [sp, #0]
 8009576:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009578:	2200      	movs	r2, #0
 800957a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800957e:	6878      	ldr	r0, [r7, #4]
 8009580:	f000 f88c 	bl	800969c <UART_WaitOnFlagUntilTimeout>
 8009584:	4603      	mov	r3, r0
 8009586:	2b00      	cmp	r3, #0
 8009588:	d021      	beq.n	80095ce <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	681b      	ldr	r3, [r3, #0]
 800958e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009590:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009592:	e853 3f00 	ldrex	r3, [r3]
 8009596:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009598:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800959a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800959e:	653b      	str	r3, [r7, #80]	; 0x50
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	681b      	ldr	r3, [r3, #0]
 80095a4:	461a      	mov	r2, r3
 80095a6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80095a8:	647b      	str	r3, [r7, #68]	; 0x44
 80095aa:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095ac:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80095ae:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80095b0:	e841 2300 	strex	r3, r2, [r1]
 80095b4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80095b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80095b8:	2b00      	cmp	r3, #0
 80095ba:	d1e6      	bne.n	800958a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	2220      	movs	r2, #32
 80095c0:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	2200      	movs	r2, #0
 80095c6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80095ca:	2303      	movs	r3, #3
 80095cc:	e062      	b.n	8009694 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	681b      	ldr	r3, [r3, #0]
 80095d2:	681b      	ldr	r3, [r3, #0]
 80095d4:	f003 0304 	and.w	r3, r3, #4
 80095d8:	2b04      	cmp	r3, #4
 80095da:	d149      	bne.n	8009670 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80095dc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80095e0:	9300      	str	r3, [sp, #0]
 80095e2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80095e4:	2200      	movs	r2, #0
 80095e6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80095ea:	6878      	ldr	r0, [r7, #4]
 80095ec:	f000 f856 	bl	800969c <UART_WaitOnFlagUntilTimeout>
 80095f0:	4603      	mov	r3, r0
 80095f2:	2b00      	cmp	r3, #0
 80095f4:	d03c      	beq.n	8009670 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	681b      	ldr	r3, [r3, #0]
 80095fa:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095fe:	e853 3f00 	ldrex	r3, [r3]
 8009602:	623b      	str	r3, [r7, #32]
   return(result);
 8009604:	6a3b      	ldr	r3, [r7, #32]
 8009606:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800960a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	681b      	ldr	r3, [r3, #0]
 8009610:	461a      	mov	r2, r3
 8009612:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009614:	633b      	str	r3, [r7, #48]	; 0x30
 8009616:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009618:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800961a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800961c:	e841 2300 	strex	r3, r2, [r1]
 8009620:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009622:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009624:	2b00      	cmp	r3, #0
 8009626:	d1e6      	bne.n	80095f6 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	681b      	ldr	r3, [r3, #0]
 800962c:	3308      	adds	r3, #8
 800962e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009630:	693b      	ldr	r3, [r7, #16]
 8009632:	e853 3f00 	ldrex	r3, [r3]
 8009636:	60fb      	str	r3, [r7, #12]
   return(result);
 8009638:	68fb      	ldr	r3, [r7, #12]
 800963a:	f023 0301 	bic.w	r3, r3, #1
 800963e:	64bb      	str	r3, [r7, #72]	; 0x48
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	681b      	ldr	r3, [r3, #0]
 8009644:	3308      	adds	r3, #8
 8009646:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009648:	61fa      	str	r2, [r7, #28]
 800964a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800964c:	69b9      	ldr	r1, [r7, #24]
 800964e:	69fa      	ldr	r2, [r7, #28]
 8009650:	e841 2300 	strex	r3, r2, [r1]
 8009654:	617b      	str	r3, [r7, #20]
   return(result);
 8009656:	697b      	ldr	r3, [r7, #20]
 8009658:	2b00      	cmp	r3, #0
 800965a:	d1e5      	bne.n	8009628 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	2220      	movs	r2, #32
 8009660:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	2200      	movs	r2, #0
 8009668:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800966c:	2303      	movs	r3, #3
 800966e:	e011      	b.n	8009694 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	2220      	movs	r2, #32
 8009674:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	2220      	movs	r2, #32
 800967a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	2200      	movs	r2, #0
 8009682:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	2200      	movs	r2, #0
 8009688:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	2200      	movs	r2, #0
 800968e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8009692:	2300      	movs	r3, #0
}
 8009694:	4618      	mov	r0, r3
 8009696:	3758      	adds	r7, #88	; 0x58
 8009698:	46bd      	mov	sp, r7
 800969a:	bd80      	pop	{r7, pc}

0800969c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800969c:	b580      	push	{r7, lr}
 800969e:	b084      	sub	sp, #16
 80096a0:	af00      	add	r7, sp, #0
 80096a2:	60f8      	str	r0, [r7, #12]
 80096a4:	60b9      	str	r1, [r7, #8]
 80096a6:	603b      	str	r3, [r7, #0]
 80096a8:	4613      	mov	r3, r2
 80096aa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80096ac:	e049      	b.n	8009742 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80096ae:	69bb      	ldr	r3, [r7, #24]
 80096b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80096b4:	d045      	beq.n	8009742 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80096b6:	f7f9 fe03 	bl	80032c0 <HAL_GetTick>
 80096ba:	4602      	mov	r2, r0
 80096bc:	683b      	ldr	r3, [r7, #0]
 80096be:	1ad3      	subs	r3, r2, r3
 80096c0:	69ba      	ldr	r2, [r7, #24]
 80096c2:	429a      	cmp	r2, r3
 80096c4:	d302      	bcc.n	80096cc <UART_WaitOnFlagUntilTimeout+0x30>
 80096c6:	69bb      	ldr	r3, [r7, #24]
 80096c8:	2b00      	cmp	r3, #0
 80096ca:	d101      	bne.n	80096d0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80096cc:	2303      	movs	r3, #3
 80096ce:	e048      	b.n	8009762 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80096d0:	68fb      	ldr	r3, [r7, #12]
 80096d2:	681b      	ldr	r3, [r3, #0]
 80096d4:	681b      	ldr	r3, [r3, #0]
 80096d6:	f003 0304 	and.w	r3, r3, #4
 80096da:	2b00      	cmp	r3, #0
 80096dc:	d031      	beq.n	8009742 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80096de:	68fb      	ldr	r3, [r7, #12]
 80096e0:	681b      	ldr	r3, [r3, #0]
 80096e2:	69db      	ldr	r3, [r3, #28]
 80096e4:	f003 0308 	and.w	r3, r3, #8
 80096e8:	2b08      	cmp	r3, #8
 80096ea:	d110      	bne.n	800970e <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80096ec:	68fb      	ldr	r3, [r7, #12]
 80096ee:	681b      	ldr	r3, [r3, #0]
 80096f0:	2208      	movs	r2, #8
 80096f2:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 80096f4:	68f8      	ldr	r0, [r7, #12]
 80096f6:	f000 f8ed 	bl	80098d4 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 80096fa:	68fb      	ldr	r3, [r7, #12]
 80096fc:	2208      	movs	r2, #8
 80096fe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8009702:	68fb      	ldr	r3, [r7, #12]
 8009704:	2200      	movs	r2, #0
 8009706:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 800970a:	2301      	movs	r3, #1
 800970c:	e029      	b.n	8009762 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800970e:	68fb      	ldr	r3, [r7, #12]
 8009710:	681b      	ldr	r3, [r3, #0]
 8009712:	69db      	ldr	r3, [r3, #28]
 8009714:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009718:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800971c:	d111      	bne.n	8009742 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800971e:	68fb      	ldr	r3, [r7, #12]
 8009720:	681b      	ldr	r3, [r3, #0]
 8009722:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009726:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009728:	68f8      	ldr	r0, [r7, #12]
 800972a:	f000 f8d3 	bl	80098d4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800972e:	68fb      	ldr	r3, [r7, #12]
 8009730:	2220      	movs	r2, #32
 8009732:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009736:	68fb      	ldr	r3, [r7, #12]
 8009738:	2200      	movs	r2, #0
 800973a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 800973e:	2303      	movs	r3, #3
 8009740:	e00f      	b.n	8009762 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009742:	68fb      	ldr	r3, [r7, #12]
 8009744:	681b      	ldr	r3, [r3, #0]
 8009746:	69da      	ldr	r2, [r3, #28]
 8009748:	68bb      	ldr	r3, [r7, #8]
 800974a:	4013      	ands	r3, r2
 800974c:	68ba      	ldr	r2, [r7, #8]
 800974e:	429a      	cmp	r2, r3
 8009750:	bf0c      	ite	eq
 8009752:	2301      	moveq	r3, #1
 8009754:	2300      	movne	r3, #0
 8009756:	b2db      	uxtb	r3, r3
 8009758:	461a      	mov	r2, r3
 800975a:	79fb      	ldrb	r3, [r7, #7]
 800975c:	429a      	cmp	r2, r3
 800975e:	d0a6      	beq.n	80096ae <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009760:	2300      	movs	r3, #0
}
 8009762:	4618      	mov	r0, r3
 8009764:	3710      	adds	r7, #16
 8009766:	46bd      	mov	sp, r7
 8009768:	bd80      	pop	{r7, pc}
	...

0800976c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800976c:	b480      	push	{r7}
 800976e:	b097      	sub	sp, #92	; 0x5c
 8009770:	af00      	add	r7, sp, #0
 8009772:	60f8      	str	r0, [r7, #12]
 8009774:	60b9      	str	r1, [r7, #8]
 8009776:	4613      	mov	r3, r2
 8009778:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800977a:	68fb      	ldr	r3, [r7, #12]
 800977c:	68ba      	ldr	r2, [r7, #8]
 800977e:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8009780:	68fb      	ldr	r3, [r7, #12]
 8009782:	88fa      	ldrh	r2, [r7, #6]
 8009784:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8009788:	68fb      	ldr	r3, [r7, #12]
 800978a:	88fa      	ldrh	r2, [r7, #6]
 800978c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8009790:	68fb      	ldr	r3, [r7, #12]
 8009792:	2200      	movs	r2, #0
 8009794:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8009796:	68fb      	ldr	r3, [r7, #12]
 8009798:	689b      	ldr	r3, [r3, #8]
 800979a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800979e:	d10e      	bne.n	80097be <UART_Start_Receive_IT+0x52>
 80097a0:	68fb      	ldr	r3, [r7, #12]
 80097a2:	691b      	ldr	r3, [r3, #16]
 80097a4:	2b00      	cmp	r3, #0
 80097a6:	d105      	bne.n	80097b4 <UART_Start_Receive_IT+0x48>
 80097a8:	68fb      	ldr	r3, [r7, #12]
 80097aa:	f240 12ff 	movw	r2, #511	; 0x1ff
 80097ae:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80097b2:	e01a      	b.n	80097ea <UART_Start_Receive_IT+0x7e>
 80097b4:	68fb      	ldr	r3, [r7, #12]
 80097b6:	22ff      	movs	r2, #255	; 0xff
 80097b8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80097bc:	e015      	b.n	80097ea <UART_Start_Receive_IT+0x7e>
 80097be:	68fb      	ldr	r3, [r7, #12]
 80097c0:	689b      	ldr	r3, [r3, #8]
 80097c2:	2b00      	cmp	r3, #0
 80097c4:	d10d      	bne.n	80097e2 <UART_Start_Receive_IT+0x76>
 80097c6:	68fb      	ldr	r3, [r7, #12]
 80097c8:	691b      	ldr	r3, [r3, #16]
 80097ca:	2b00      	cmp	r3, #0
 80097cc:	d104      	bne.n	80097d8 <UART_Start_Receive_IT+0x6c>
 80097ce:	68fb      	ldr	r3, [r7, #12]
 80097d0:	22ff      	movs	r2, #255	; 0xff
 80097d2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80097d6:	e008      	b.n	80097ea <UART_Start_Receive_IT+0x7e>
 80097d8:	68fb      	ldr	r3, [r7, #12]
 80097da:	227f      	movs	r2, #127	; 0x7f
 80097dc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80097e0:	e003      	b.n	80097ea <UART_Start_Receive_IT+0x7e>
 80097e2:	68fb      	ldr	r3, [r7, #12]
 80097e4:	2200      	movs	r2, #0
 80097e6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80097ea:	68fb      	ldr	r3, [r7, #12]
 80097ec:	2200      	movs	r2, #0
 80097ee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80097f2:	68fb      	ldr	r3, [r7, #12]
 80097f4:	2222      	movs	r2, #34	; 0x22
 80097f6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80097fa:	68fb      	ldr	r3, [r7, #12]
 80097fc:	681b      	ldr	r3, [r3, #0]
 80097fe:	3308      	adds	r3, #8
 8009800:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009802:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009804:	e853 3f00 	ldrex	r3, [r3]
 8009808:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800980a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800980c:	f043 0301 	orr.w	r3, r3, #1
 8009810:	657b      	str	r3, [r7, #84]	; 0x54
 8009812:	68fb      	ldr	r3, [r7, #12]
 8009814:	681b      	ldr	r3, [r3, #0]
 8009816:	3308      	adds	r3, #8
 8009818:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800981a:	64ba      	str	r2, [r7, #72]	; 0x48
 800981c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800981e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8009820:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009822:	e841 2300 	strex	r3, r2, [r1]
 8009826:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8009828:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800982a:	2b00      	cmp	r3, #0
 800982c:	d1e5      	bne.n	80097fa <UART_Start_Receive_IT+0x8e>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800982e:	68fb      	ldr	r3, [r7, #12]
 8009830:	689b      	ldr	r3, [r3, #8]
 8009832:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009836:	d107      	bne.n	8009848 <UART_Start_Receive_IT+0xdc>
 8009838:	68fb      	ldr	r3, [r7, #12]
 800983a:	691b      	ldr	r3, [r3, #16]
 800983c:	2b00      	cmp	r3, #0
 800983e:	d103      	bne.n	8009848 <UART_Start_Receive_IT+0xdc>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8009840:	68fb      	ldr	r3, [r7, #12]
 8009842:	4a22      	ldr	r2, [pc, #136]	; (80098cc <UART_Start_Receive_IT+0x160>)
 8009844:	669a      	str	r2, [r3, #104]	; 0x68
 8009846:	e002      	b.n	800984e <UART_Start_Receive_IT+0xe2>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8009848:	68fb      	ldr	r3, [r7, #12]
 800984a:	4a21      	ldr	r2, [pc, #132]	; (80098d0 <UART_Start_Receive_IT+0x164>)
 800984c:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800984e:	68fb      	ldr	r3, [r7, #12]
 8009850:	691b      	ldr	r3, [r3, #16]
 8009852:	2b00      	cmp	r3, #0
 8009854:	d019      	beq.n	800988a <UART_Start_Receive_IT+0x11e>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8009856:	68fb      	ldr	r3, [r7, #12]
 8009858:	681b      	ldr	r3, [r3, #0]
 800985a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800985c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800985e:	e853 3f00 	ldrex	r3, [r3]
 8009862:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009864:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009866:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800986a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800986c:	68fb      	ldr	r3, [r7, #12]
 800986e:	681b      	ldr	r3, [r3, #0]
 8009870:	461a      	mov	r2, r3
 8009872:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009874:	637b      	str	r3, [r7, #52]	; 0x34
 8009876:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009878:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800987a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800987c:	e841 2300 	strex	r3, r2, [r1]
 8009880:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8009882:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009884:	2b00      	cmp	r3, #0
 8009886:	d1e6      	bne.n	8009856 <UART_Start_Receive_IT+0xea>
 8009888:	e018      	b.n	80098bc <UART_Start_Receive_IT+0x150>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 800988a:	68fb      	ldr	r3, [r7, #12]
 800988c:	681b      	ldr	r3, [r3, #0]
 800988e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009890:	697b      	ldr	r3, [r7, #20]
 8009892:	e853 3f00 	ldrex	r3, [r3]
 8009896:	613b      	str	r3, [r7, #16]
   return(result);
 8009898:	693b      	ldr	r3, [r7, #16]
 800989a:	f043 0320 	orr.w	r3, r3, #32
 800989e:	653b      	str	r3, [r7, #80]	; 0x50
 80098a0:	68fb      	ldr	r3, [r7, #12]
 80098a2:	681b      	ldr	r3, [r3, #0]
 80098a4:	461a      	mov	r2, r3
 80098a6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80098a8:	623b      	str	r3, [r7, #32]
 80098aa:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80098ac:	69f9      	ldr	r1, [r7, #28]
 80098ae:	6a3a      	ldr	r2, [r7, #32]
 80098b0:	e841 2300 	strex	r3, r2, [r1]
 80098b4:	61bb      	str	r3, [r7, #24]
   return(result);
 80098b6:	69bb      	ldr	r3, [r7, #24]
 80098b8:	2b00      	cmp	r3, #0
 80098ba:	d1e6      	bne.n	800988a <UART_Start_Receive_IT+0x11e>
  }
  return HAL_OK;
 80098bc:	2300      	movs	r3, #0
}
 80098be:	4618      	mov	r0, r3
 80098c0:	375c      	adds	r7, #92	; 0x5c
 80098c2:	46bd      	mov	sp, r7
 80098c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098c8:	4770      	bx	lr
 80098ca:	bf00      	nop
 80098cc:	08009bc5 	.word	0x08009bc5
 80098d0:	08009a1d 	.word	0x08009a1d

080098d4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80098d4:	b480      	push	{r7}
 80098d6:	b095      	sub	sp, #84	; 0x54
 80098d8:	af00      	add	r7, sp, #0
 80098da:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	681b      	ldr	r3, [r3, #0]
 80098e0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80098e4:	e853 3f00 	ldrex	r3, [r3]
 80098e8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80098ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098ec:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80098f0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	681b      	ldr	r3, [r3, #0]
 80098f6:	461a      	mov	r2, r3
 80098f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80098fa:	643b      	str	r3, [r7, #64]	; 0x40
 80098fc:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80098fe:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009900:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009902:	e841 2300 	strex	r3, r2, [r1]
 8009906:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009908:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800990a:	2b00      	cmp	r3, #0
 800990c:	d1e6      	bne.n	80098dc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	681b      	ldr	r3, [r3, #0]
 8009912:	3308      	adds	r3, #8
 8009914:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009916:	6a3b      	ldr	r3, [r7, #32]
 8009918:	e853 3f00 	ldrex	r3, [r3]
 800991c:	61fb      	str	r3, [r7, #28]
   return(result);
 800991e:	69fb      	ldr	r3, [r7, #28]
 8009920:	f023 0301 	bic.w	r3, r3, #1
 8009924:	64bb      	str	r3, [r7, #72]	; 0x48
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	681b      	ldr	r3, [r3, #0]
 800992a:	3308      	adds	r3, #8
 800992c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800992e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009930:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009932:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009934:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009936:	e841 2300 	strex	r3, r2, [r1]
 800993a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800993c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800993e:	2b00      	cmp	r3, #0
 8009940:	d1e5      	bne.n	800990e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009946:	2b01      	cmp	r3, #1
 8009948:	d118      	bne.n	800997c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	681b      	ldr	r3, [r3, #0]
 800994e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009950:	68fb      	ldr	r3, [r7, #12]
 8009952:	e853 3f00 	ldrex	r3, [r3]
 8009956:	60bb      	str	r3, [r7, #8]
   return(result);
 8009958:	68bb      	ldr	r3, [r7, #8]
 800995a:	f023 0310 	bic.w	r3, r3, #16
 800995e:	647b      	str	r3, [r7, #68]	; 0x44
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	681b      	ldr	r3, [r3, #0]
 8009964:	461a      	mov	r2, r3
 8009966:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009968:	61bb      	str	r3, [r7, #24]
 800996a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800996c:	6979      	ldr	r1, [r7, #20]
 800996e:	69ba      	ldr	r2, [r7, #24]
 8009970:	e841 2300 	strex	r3, r2, [r1]
 8009974:	613b      	str	r3, [r7, #16]
   return(result);
 8009976:	693b      	ldr	r3, [r7, #16]
 8009978:	2b00      	cmp	r3, #0
 800997a:	d1e6      	bne.n	800994a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	2220      	movs	r2, #32
 8009980:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	2200      	movs	r2, #0
 8009988:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	2200      	movs	r2, #0
 800998e:	669a      	str	r2, [r3, #104]	; 0x68
}
 8009990:	bf00      	nop
 8009992:	3754      	adds	r7, #84	; 0x54
 8009994:	46bd      	mov	sp, r7
 8009996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800999a:	4770      	bx	lr

0800999c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800999c:	b580      	push	{r7, lr}
 800999e:	b084      	sub	sp, #16
 80099a0:	af00      	add	r7, sp, #0
 80099a2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099a8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80099aa:	68fb      	ldr	r3, [r7, #12]
 80099ac:	2200      	movs	r2, #0
 80099ae:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80099b2:	68fb      	ldr	r3, [r7, #12]
 80099b4:	2200      	movs	r2, #0
 80099b6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80099ba:	68f8      	ldr	r0, [r7, #12]
 80099bc:	f7ff fb3a 	bl	8009034 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80099c0:	bf00      	nop
 80099c2:	3710      	adds	r7, #16
 80099c4:	46bd      	mov	sp, r7
 80099c6:	bd80      	pop	{r7, pc}

080099c8 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80099c8:	b580      	push	{r7, lr}
 80099ca:	b088      	sub	sp, #32
 80099cc:	af00      	add	r7, sp, #0
 80099ce:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	681b      	ldr	r3, [r3, #0]
 80099d4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099d6:	68fb      	ldr	r3, [r7, #12]
 80099d8:	e853 3f00 	ldrex	r3, [r3]
 80099dc:	60bb      	str	r3, [r7, #8]
   return(result);
 80099de:	68bb      	ldr	r3, [r7, #8]
 80099e0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80099e4:	61fb      	str	r3, [r7, #28]
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	681b      	ldr	r3, [r3, #0]
 80099ea:	461a      	mov	r2, r3
 80099ec:	69fb      	ldr	r3, [r7, #28]
 80099ee:	61bb      	str	r3, [r7, #24]
 80099f0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80099f2:	6979      	ldr	r1, [r7, #20]
 80099f4:	69ba      	ldr	r2, [r7, #24]
 80099f6:	e841 2300 	strex	r3, r2, [r1]
 80099fa:	613b      	str	r3, [r7, #16]
   return(result);
 80099fc:	693b      	ldr	r3, [r7, #16]
 80099fe:	2b00      	cmp	r3, #0
 8009a00:	d1e6      	bne.n	80099d0 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	2220      	movs	r2, #32
 8009a06:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	2200      	movs	r2, #0
 8009a0c:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009a0e:	6878      	ldr	r0, [r7, #4]
 8009a10:	f7ff fb06 	bl	8009020 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009a14:	bf00      	nop
 8009a16:	3720      	adds	r7, #32
 8009a18:	46bd      	mov	sp, r7
 8009a1a:	bd80      	pop	{r7, pc}

08009a1c <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8009a1c:	b580      	push	{r7, lr}
 8009a1e:	b09c      	sub	sp, #112	; 0x70
 8009a20:	af00      	add	r7, sp, #0
 8009a22:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009a2a:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009a34:	2b22      	cmp	r3, #34	; 0x22
 8009a36:	f040 80b9 	bne.w	8009bac <UART_RxISR_8BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	681b      	ldr	r3, [r3, #0]
 8009a3e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8009a40:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8009a44:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8009a48:	b2d9      	uxtb	r1, r3
 8009a4a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8009a4e:	b2da      	uxtb	r2, r3
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009a54:	400a      	ands	r2, r1
 8009a56:	b2d2      	uxtb	r2, r2
 8009a58:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009a5e:	1c5a      	adds	r2, r3, #1
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8009a6a:	b29b      	uxth	r3, r3
 8009a6c:	3b01      	subs	r3, #1
 8009a6e:	b29a      	uxth	r2, r3
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8009a7c:	b29b      	uxth	r3, r3
 8009a7e:	2b00      	cmp	r3, #0
 8009a80:	f040 809c 	bne.w	8009bbc <UART_RxISR_8BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	681b      	ldr	r3, [r3, #0]
 8009a88:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a8a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009a8c:	e853 3f00 	ldrex	r3, [r3]
 8009a90:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8009a92:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009a94:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009a98:	66bb      	str	r3, [r7, #104]	; 0x68
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	681b      	ldr	r3, [r3, #0]
 8009a9e:	461a      	mov	r2, r3
 8009aa0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009aa2:	65bb      	str	r3, [r7, #88]	; 0x58
 8009aa4:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009aa6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8009aa8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009aaa:	e841 2300 	strex	r3, r2, [r1]
 8009aae:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8009ab0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009ab2:	2b00      	cmp	r3, #0
 8009ab4:	d1e6      	bne.n	8009a84 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	681b      	ldr	r3, [r3, #0]
 8009aba:	3308      	adds	r3, #8
 8009abc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009abe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ac0:	e853 3f00 	ldrex	r3, [r3]
 8009ac4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009ac6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009ac8:	f023 0301 	bic.w	r3, r3, #1
 8009acc:	667b      	str	r3, [r7, #100]	; 0x64
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	681b      	ldr	r3, [r3, #0]
 8009ad2:	3308      	adds	r3, #8
 8009ad4:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8009ad6:	647a      	str	r2, [r7, #68]	; 0x44
 8009ad8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ada:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009adc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009ade:	e841 2300 	strex	r3, r2, [r1]
 8009ae2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009ae4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009ae6:	2b00      	cmp	r3, #0
 8009ae8:	d1e5      	bne.n	8009ab6 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	2220      	movs	r2, #32
 8009aee:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	2200      	movs	r2, #0
 8009af6:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	2200      	movs	r2, #0
 8009afc:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	681b      	ldr	r3, [r3, #0]
 8009b02:	685b      	ldr	r3, [r3, #4]
 8009b04:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009b08:	2b00      	cmp	r3, #0
 8009b0a:	d018      	beq.n	8009b3e <UART_RxISR_8BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	681b      	ldr	r3, [r3, #0]
 8009b10:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b14:	e853 3f00 	ldrex	r3, [r3]
 8009b18:	623b      	str	r3, [r7, #32]
   return(result);
 8009b1a:	6a3b      	ldr	r3, [r7, #32]
 8009b1c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8009b20:	663b      	str	r3, [r7, #96]	; 0x60
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	681b      	ldr	r3, [r3, #0]
 8009b26:	461a      	mov	r2, r3
 8009b28:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009b2a:	633b      	str	r3, [r7, #48]	; 0x30
 8009b2c:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b2e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009b30:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009b32:	e841 2300 	strex	r3, r2, [r1]
 8009b36:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009b38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b3a:	2b00      	cmp	r3, #0
 8009b3c:	d1e6      	bne.n	8009b0c <UART_RxISR_8BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009b42:	2b01      	cmp	r3, #1
 8009b44:	d12e      	bne.n	8009ba4 <UART_RxISR_8BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	2200      	movs	r2, #0
 8009b4a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	681b      	ldr	r3, [r3, #0]
 8009b50:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b52:	693b      	ldr	r3, [r7, #16]
 8009b54:	e853 3f00 	ldrex	r3, [r3]
 8009b58:	60fb      	str	r3, [r7, #12]
   return(result);
 8009b5a:	68fb      	ldr	r3, [r7, #12]
 8009b5c:	f023 0310 	bic.w	r3, r3, #16
 8009b60:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	681b      	ldr	r3, [r3, #0]
 8009b66:	461a      	mov	r2, r3
 8009b68:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009b6a:	61fb      	str	r3, [r7, #28]
 8009b6c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b6e:	69b9      	ldr	r1, [r7, #24]
 8009b70:	69fa      	ldr	r2, [r7, #28]
 8009b72:	e841 2300 	strex	r3, r2, [r1]
 8009b76:	617b      	str	r3, [r7, #20]
   return(result);
 8009b78:	697b      	ldr	r3, [r7, #20]
 8009b7a:	2b00      	cmp	r3, #0
 8009b7c:	d1e6      	bne.n	8009b4c <UART_RxISR_8BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	681b      	ldr	r3, [r3, #0]
 8009b82:	69db      	ldr	r3, [r3, #28]
 8009b84:	f003 0310 	and.w	r3, r3, #16
 8009b88:	2b10      	cmp	r3, #16
 8009b8a:	d103      	bne.n	8009b94 <UART_RxISR_8BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	681b      	ldr	r3, [r3, #0]
 8009b90:	2210      	movs	r2, #16
 8009b92:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8009b9a:	4619      	mov	r1, r3
 8009b9c:	6878      	ldr	r0, [r7, #4]
 8009b9e:	f7ff fa53 	bl	8009048 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009ba2:	e00b      	b.n	8009bbc <UART_RxISR_8BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 8009ba4:	6878      	ldr	r0, [r7, #4]
 8009ba6:	f7f7 fcdd 	bl	8001564 <HAL_UART_RxCpltCallback>
}
 8009baa:	e007      	b.n	8009bbc <UART_RxISR_8BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	681b      	ldr	r3, [r3, #0]
 8009bb0:	699a      	ldr	r2, [r3, #24]
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	681b      	ldr	r3, [r3, #0]
 8009bb6:	f042 0208 	orr.w	r2, r2, #8
 8009bba:	619a      	str	r2, [r3, #24]
}
 8009bbc:	bf00      	nop
 8009bbe:	3770      	adds	r7, #112	; 0x70
 8009bc0:	46bd      	mov	sp, r7
 8009bc2:	bd80      	pop	{r7, pc}

08009bc4 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8009bc4:	b580      	push	{r7, lr}
 8009bc6:	b09c      	sub	sp, #112	; 0x70
 8009bc8:	af00      	add	r7, sp, #0
 8009bca:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009bd2:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009bdc:	2b22      	cmp	r3, #34	; 0x22
 8009bde:	f040 80b9 	bne.w	8009d54 <UART_RxISR_16BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	681b      	ldr	r3, [r3, #0]
 8009be6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8009be8:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009bf0:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8009bf2:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 8009bf6:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8009bfa:	4013      	ands	r3, r2
 8009bfc:	b29a      	uxth	r2, r3
 8009bfe:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009c00:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009c06:	1c9a      	adds	r2, r3, #2
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8009c12:	b29b      	uxth	r3, r3
 8009c14:	3b01      	subs	r3, #1
 8009c16:	b29a      	uxth	r2, r3
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8009c24:	b29b      	uxth	r3, r3
 8009c26:	2b00      	cmp	r3, #0
 8009c28:	f040 809c 	bne.w	8009d64 <UART_RxISR_16BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	681b      	ldr	r3, [r3, #0]
 8009c30:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c32:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009c34:	e853 3f00 	ldrex	r3, [r3]
 8009c38:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8009c3a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009c3c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009c40:	667b      	str	r3, [r7, #100]	; 0x64
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	681b      	ldr	r3, [r3, #0]
 8009c46:	461a      	mov	r2, r3
 8009c48:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009c4a:	657b      	str	r3, [r7, #84]	; 0x54
 8009c4c:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c4e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8009c50:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8009c52:	e841 2300 	strex	r3, r2, [r1]
 8009c56:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8009c58:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009c5a:	2b00      	cmp	r3, #0
 8009c5c:	d1e6      	bne.n	8009c2c <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	681b      	ldr	r3, [r3, #0]
 8009c62:	3308      	adds	r3, #8
 8009c64:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009c68:	e853 3f00 	ldrex	r3, [r3]
 8009c6c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009c6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c70:	f023 0301 	bic.w	r3, r3, #1
 8009c74:	663b      	str	r3, [r7, #96]	; 0x60
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	681b      	ldr	r3, [r3, #0]
 8009c7a:	3308      	adds	r3, #8
 8009c7c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8009c7e:	643a      	str	r2, [r7, #64]	; 0x40
 8009c80:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c82:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009c84:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009c86:	e841 2300 	strex	r3, r2, [r1]
 8009c8a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009c8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c8e:	2b00      	cmp	r3, #0
 8009c90:	d1e5      	bne.n	8009c5e <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	2220      	movs	r2, #32
 8009c96:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	2200      	movs	r2, #0
 8009c9e:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	2200      	movs	r2, #0
 8009ca4:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	681b      	ldr	r3, [r3, #0]
 8009caa:	685b      	ldr	r3, [r3, #4]
 8009cac:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009cb0:	2b00      	cmp	r3, #0
 8009cb2:	d018      	beq.n	8009ce6 <UART_RxISR_16BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	681b      	ldr	r3, [r3, #0]
 8009cb8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009cba:	6a3b      	ldr	r3, [r7, #32]
 8009cbc:	e853 3f00 	ldrex	r3, [r3]
 8009cc0:	61fb      	str	r3, [r7, #28]
   return(result);
 8009cc2:	69fb      	ldr	r3, [r7, #28]
 8009cc4:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8009cc8:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	681b      	ldr	r3, [r3, #0]
 8009cce:	461a      	mov	r2, r3
 8009cd0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009cd2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009cd4:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009cd6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009cd8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009cda:	e841 2300 	strex	r3, r2, [r1]
 8009cde:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009ce0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ce2:	2b00      	cmp	r3, #0
 8009ce4:	d1e6      	bne.n	8009cb4 <UART_RxISR_16BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009cea:	2b01      	cmp	r3, #1
 8009cec:	d12e      	bne.n	8009d4c <UART_RxISR_16BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	2200      	movs	r2, #0
 8009cf2:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	681b      	ldr	r3, [r3, #0]
 8009cf8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009cfa:	68fb      	ldr	r3, [r7, #12]
 8009cfc:	e853 3f00 	ldrex	r3, [r3]
 8009d00:	60bb      	str	r3, [r7, #8]
   return(result);
 8009d02:	68bb      	ldr	r3, [r7, #8]
 8009d04:	f023 0310 	bic.w	r3, r3, #16
 8009d08:	65bb      	str	r3, [r7, #88]	; 0x58
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	681b      	ldr	r3, [r3, #0]
 8009d0e:	461a      	mov	r2, r3
 8009d10:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009d12:	61bb      	str	r3, [r7, #24]
 8009d14:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d16:	6979      	ldr	r1, [r7, #20]
 8009d18:	69ba      	ldr	r2, [r7, #24]
 8009d1a:	e841 2300 	strex	r3, r2, [r1]
 8009d1e:	613b      	str	r3, [r7, #16]
   return(result);
 8009d20:	693b      	ldr	r3, [r7, #16]
 8009d22:	2b00      	cmp	r3, #0
 8009d24:	d1e6      	bne.n	8009cf4 <UART_RxISR_16BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	681b      	ldr	r3, [r3, #0]
 8009d2a:	69db      	ldr	r3, [r3, #28]
 8009d2c:	f003 0310 	and.w	r3, r3, #16
 8009d30:	2b10      	cmp	r3, #16
 8009d32:	d103      	bne.n	8009d3c <UART_RxISR_16BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	681b      	ldr	r3, [r3, #0]
 8009d38:	2210      	movs	r2, #16
 8009d3a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8009d42:	4619      	mov	r1, r3
 8009d44:	6878      	ldr	r0, [r7, #4]
 8009d46:	f7ff f97f 	bl	8009048 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009d4a:	e00b      	b.n	8009d64 <UART_RxISR_16BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 8009d4c:	6878      	ldr	r0, [r7, #4]
 8009d4e:	f7f7 fc09 	bl	8001564 <HAL_UART_RxCpltCallback>
}
 8009d52:	e007      	b.n	8009d64 <UART_RxISR_16BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	681b      	ldr	r3, [r3, #0]
 8009d58:	699a      	ldr	r2, [r3, #24]
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	681b      	ldr	r3, [r3, #0]
 8009d5e:	f042 0208 	orr.w	r2, r2, #8
 8009d62:	619a      	str	r2, [r3, #24]
}
 8009d64:	bf00      	nop
 8009d66:	3770      	adds	r7, #112	; 0x70
 8009d68:	46bd      	mov	sp, r7
 8009d6a:	bd80      	pop	{r7, pc}

08009d6c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8009d6c:	b480      	push	{r7}
 8009d6e:	b083      	sub	sp, #12
 8009d70:	af00      	add	r7, sp, #0
 8009d72:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8009d74:	bf00      	nop
 8009d76:	370c      	adds	r7, #12
 8009d78:	46bd      	mov	sp, r7
 8009d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d7e:	4770      	bx	lr

08009d80 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8009d80:	b480      	push	{r7}
 8009d82:	b085      	sub	sp, #20
 8009d84:	af00      	add	r7, sp, #0
 8009d86:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8009d88:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8009d8c:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8009d94:	b29a      	uxth	r2, r3
 8009d96:	68fb      	ldr	r3, [r7, #12]
 8009d98:	b29b      	uxth	r3, r3
 8009d9a:	43db      	mvns	r3, r3
 8009d9c:	b29b      	uxth	r3, r3
 8009d9e:	4013      	ands	r3, r2
 8009da0:	b29a      	uxth	r2, r3
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8009da8:	2300      	movs	r3, #0
}
 8009daa:	4618      	mov	r0, r3
 8009dac:	3714      	adds	r7, #20
 8009dae:	46bd      	mov	sp, r7
 8009db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009db4:	4770      	bx	lr

08009db6 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8009db6:	b084      	sub	sp, #16
 8009db8:	b480      	push	{r7}
 8009dba:	b083      	sub	sp, #12
 8009dbc:	af00      	add	r7, sp, #0
 8009dbe:	6078      	str	r0, [r7, #4]
 8009dc0:	f107 0014 	add.w	r0, r7, #20
 8009dc4:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	2201      	movs	r2, #1
 8009dcc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	2200      	movs	r2, #0
 8009dd4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	2200      	movs	r2, #0
 8009ddc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	2200      	movs	r2, #0
 8009de4:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8009de8:	2300      	movs	r3, #0
}
 8009dea:	4618      	mov	r0, r3
 8009dec:	370c      	adds	r7, #12
 8009dee:	46bd      	mov	sp, r7
 8009df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009df4:	b004      	add	sp, #16
 8009df6:	4770      	bx	lr

08009df8 <__errno>:
 8009df8:	4b01      	ldr	r3, [pc, #4]	; (8009e00 <__errno+0x8>)
 8009dfa:	6818      	ldr	r0, [r3, #0]
 8009dfc:	4770      	bx	lr
 8009dfe:	bf00      	nop
 8009e00:	20000078 	.word	0x20000078

08009e04 <__libc_init_array>:
 8009e04:	b570      	push	{r4, r5, r6, lr}
 8009e06:	4d0d      	ldr	r5, [pc, #52]	; (8009e3c <__libc_init_array+0x38>)
 8009e08:	4c0d      	ldr	r4, [pc, #52]	; (8009e40 <__libc_init_array+0x3c>)
 8009e0a:	1b64      	subs	r4, r4, r5
 8009e0c:	10a4      	asrs	r4, r4, #2
 8009e0e:	2600      	movs	r6, #0
 8009e10:	42a6      	cmp	r6, r4
 8009e12:	d109      	bne.n	8009e28 <__libc_init_array+0x24>
 8009e14:	4d0b      	ldr	r5, [pc, #44]	; (8009e44 <__libc_init_array+0x40>)
 8009e16:	4c0c      	ldr	r4, [pc, #48]	; (8009e48 <__libc_init_array+0x44>)
 8009e18:	f000 fca2 	bl	800a760 <_init>
 8009e1c:	1b64      	subs	r4, r4, r5
 8009e1e:	10a4      	asrs	r4, r4, #2
 8009e20:	2600      	movs	r6, #0
 8009e22:	42a6      	cmp	r6, r4
 8009e24:	d105      	bne.n	8009e32 <__libc_init_array+0x2e>
 8009e26:	bd70      	pop	{r4, r5, r6, pc}
 8009e28:	f855 3b04 	ldr.w	r3, [r5], #4
 8009e2c:	4798      	blx	r3
 8009e2e:	3601      	adds	r6, #1
 8009e30:	e7ee      	b.n	8009e10 <__libc_init_array+0xc>
 8009e32:	f855 3b04 	ldr.w	r3, [r5], #4
 8009e36:	4798      	blx	r3
 8009e38:	3601      	adds	r6, #1
 8009e3a:	e7f2      	b.n	8009e22 <__libc_init_array+0x1e>
 8009e3c:	0800aad8 	.word	0x0800aad8
 8009e40:	0800aad8 	.word	0x0800aad8
 8009e44:	0800aad8 	.word	0x0800aad8
 8009e48:	0800aadc 	.word	0x0800aadc

08009e4c <memset>:
 8009e4c:	4402      	add	r2, r0
 8009e4e:	4603      	mov	r3, r0
 8009e50:	4293      	cmp	r3, r2
 8009e52:	d100      	bne.n	8009e56 <memset+0xa>
 8009e54:	4770      	bx	lr
 8009e56:	f803 1b01 	strb.w	r1, [r3], #1
 8009e5a:	e7f9      	b.n	8009e50 <memset+0x4>

08009e5c <siprintf>:
 8009e5c:	b40e      	push	{r1, r2, r3}
 8009e5e:	b500      	push	{lr}
 8009e60:	b09c      	sub	sp, #112	; 0x70
 8009e62:	ab1d      	add	r3, sp, #116	; 0x74
 8009e64:	9002      	str	r0, [sp, #8]
 8009e66:	9006      	str	r0, [sp, #24]
 8009e68:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009e6c:	4809      	ldr	r0, [pc, #36]	; (8009e94 <siprintf+0x38>)
 8009e6e:	9107      	str	r1, [sp, #28]
 8009e70:	9104      	str	r1, [sp, #16]
 8009e72:	4909      	ldr	r1, [pc, #36]	; (8009e98 <siprintf+0x3c>)
 8009e74:	f853 2b04 	ldr.w	r2, [r3], #4
 8009e78:	9105      	str	r1, [sp, #20]
 8009e7a:	6800      	ldr	r0, [r0, #0]
 8009e7c:	9301      	str	r3, [sp, #4]
 8009e7e:	a902      	add	r1, sp, #8
 8009e80:	f000 f87c 	bl	8009f7c <_svfiprintf_r>
 8009e84:	9b02      	ldr	r3, [sp, #8]
 8009e86:	2200      	movs	r2, #0
 8009e88:	701a      	strb	r2, [r3, #0]
 8009e8a:	b01c      	add	sp, #112	; 0x70
 8009e8c:	f85d eb04 	ldr.w	lr, [sp], #4
 8009e90:	b003      	add	sp, #12
 8009e92:	4770      	bx	lr
 8009e94:	20000078 	.word	0x20000078
 8009e98:	ffff0208 	.word	0xffff0208

08009e9c <strncmp>:
 8009e9c:	b510      	push	{r4, lr}
 8009e9e:	b17a      	cbz	r2, 8009ec0 <strncmp+0x24>
 8009ea0:	4603      	mov	r3, r0
 8009ea2:	3901      	subs	r1, #1
 8009ea4:	1884      	adds	r4, r0, r2
 8009ea6:	f813 0b01 	ldrb.w	r0, [r3], #1
 8009eaa:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8009eae:	4290      	cmp	r0, r2
 8009eb0:	d101      	bne.n	8009eb6 <strncmp+0x1a>
 8009eb2:	42a3      	cmp	r3, r4
 8009eb4:	d101      	bne.n	8009eba <strncmp+0x1e>
 8009eb6:	1a80      	subs	r0, r0, r2
 8009eb8:	bd10      	pop	{r4, pc}
 8009eba:	2800      	cmp	r0, #0
 8009ebc:	d1f3      	bne.n	8009ea6 <strncmp+0xa>
 8009ebe:	e7fa      	b.n	8009eb6 <strncmp+0x1a>
 8009ec0:	4610      	mov	r0, r2
 8009ec2:	e7f9      	b.n	8009eb8 <strncmp+0x1c>

08009ec4 <__ssputs_r>:
 8009ec4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009ec8:	688e      	ldr	r6, [r1, #8]
 8009eca:	429e      	cmp	r6, r3
 8009ecc:	4682      	mov	sl, r0
 8009ece:	460c      	mov	r4, r1
 8009ed0:	4690      	mov	r8, r2
 8009ed2:	461f      	mov	r7, r3
 8009ed4:	d838      	bhi.n	8009f48 <__ssputs_r+0x84>
 8009ed6:	898a      	ldrh	r2, [r1, #12]
 8009ed8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009edc:	d032      	beq.n	8009f44 <__ssputs_r+0x80>
 8009ede:	6825      	ldr	r5, [r4, #0]
 8009ee0:	6909      	ldr	r1, [r1, #16]
 8009ee2:	eba5 0901 	sub.w	r9, r5, r1
 8009ee6:	6965      	ldr	r5, [r4, #20]
 8009ee8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009eec:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009ef0:	3301      	adds	r3, #1
 8009ef2:	444b      	add	r3, r9
 8009ef4:	106d      	asrs	r5, r5, #1
 8009ef6:	429d      	cmp	r5, r3
 8009ef8:	bf38      	it	cc
 8009efa:	461d      	movcc	r5, r3
 8009efc:	0553      	lsls	r3, r2, #21
 8009efe:	d531      	bpl.n	8009f64 <__ssputs_r+0xa0>
 8009f00:	4629      	mov	r1, r5
 8009f02:	f000 fb63 	bl	800a5cc <_malloc_r>
 8009f06:	4606      	mov	r6, r0
 8009f08:	b950      	cbnz	r0, 8009f20 <__ssputs_r+0x5c>
 8009f0a:	230c      	movs	r3, #12
 8009f0c:	f8ca 3000 	str.w	r3, [sl]
 8009f10:	89a3      	ldrh	r3, [r4, #12]
 8009f12:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009f16:	81a3      	strh	r3, [r4, #12]
 8009f18:	f04f 30ff 	mov.w	r0, #4294967295
 8009f1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009f20:	6921      	ldr	r1, [r4, #16]
 8009f22:	464a      	mov	r2, r9
 8009f24:	f000 fabe 	bl	800a4a4 <memcpy>
 8009f28:	89a3      	ldrh	r3, [r4, #12]
 8009f2a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009f2e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009f32:	81a3      	strh	r3, [r4, #12]
 8009f34:	6126      	str	r6, [r4, #16]
 8009f36:	6165      	str	r5, [r4, #20]
 8009f38:	444e      	add	r6, r9
 8009f3a:	eba5 0509 	sub.w	r5, r5, r9
 8009f3e:	6026      	str	r6, [r4, #0]
 8009f40:	60a5      	str	r5, [r4, #8]
 8009f42:	463e      	mov	r6, r7
 8009f44:	42be      	cmp	r6, r7
 8009f46:	d900      	bls.n	8009f4a <__ssputs_r+0x86>
 8009f48:	463e      	mov	r6, r7
 8009f4a:	6820      	ldr	r0, [r4, #0]
 8009f4c:	4632      	mov	r2, r6
 8009f4e:	4641      	mov	r1, r8
 8009f50:	f000 fab6 	bl	800a4c0 <memmove>
 8009f54:	68a3      	ldr	r3, [r4, #8]
 8009f56:	1b9b      	subs	r3, r3, r6
 8009f58:	60a3      	str	r3, [r4, #8]
 8009f5a:	6823      	ldr	r3, [r4, #0]
 8009f5c:	4433      	add	r3, r6
 8009f5e:	6023      	str	r3, [r4, #0]
 8009f60:	2000      	movs	r0, #0
 8009f62:	e7db      	b.n	8009f1c <__ssputs_r+0x58>
 8009f64:	462a      	mov	r2, r5
 8009f66:	f000 fba5 	bl	800a6b4 <_realloc_r>
 8009f6a:	4606      	mov	r6, r0
 8009f6c:	2800      	cmp	r0, #0
 8009f6e:	d1e1      	bne.n	8009f34 <__ssputs_r+0x70>
 8009f70:	6921      	ldr	r1, [r4, #16]
 8009f72:	4650      	mov	r0, sl
 8009f74:	f000 fabe 	bl	800a4f4 <_free_r>
 8009f78:	e7c7      	b.n	8009f0a <__ssputs_r+0x46>
	...

08009f7c <_svfiprintf_r>:
 8009f7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f80:	4698      	mov	r8, r3
 8009f82:	898b      	ldrh	r3, [r1, #12]
 8009f84:	061b      	lsls	r3, r3, #24
 8009f86:	b09d      	sub	sp, #116	; 0x74
 8009f88:	4607      	mov	r7, r0
 8009f8a:	460d      	mov	r5, r1
 8009f8c:	4614      	mov	r4, r2
 8009f8e:	d50e      	bpl.n	8009fae <_svfiprintf_r+0x32>
 8009f90:	690b      	ldr	r3, [r1, #16]
 8009f92:	b963      	cbnz	r3, 8009fae <_svfiprintf_r+0x32>
 8009f94:	2140      	movs	r1, #64	; 0x40
 8009f96:	f000 fb19 	bl	800a5cc <_malloc_r>
 8009f9a:	6028      	str	r0, [r5, #0]
 8009f9c:	6128      	str	r0, [r5, #16]
 8009f9e:	b920      	cbnz	r0, 8009faa <_svfiprintf_r+0x2e>
 8009fa0:	230c      	movs	r3, #12
 8009fa2:	603b      	str	r3, [r7, #0]
 8009fa4:	f04f 30ff 	mov.w	r0, #4294967295
 8009fa8:	e0d1      	b.n	800a14e <_svfiprintf_r+0x1d2>
 8009faa:	2340      	movs	r3, #64	; 0x40
 8009fac:	616b      	str	r3, [r5, #20]
 8009fae:	2300      	movs	r3, #0
 8009fb0:	9309      	str	r3, [sp, #36]	; 0x24
 8009fb2:	2320      	movs	r3, #32
 8009fb4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009fb8:	f8cd 800c 	str.w	r8, [sp, #12]
 8009fbc:	2330      	movs	r3, #48	; 0x30
 8009fbe:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800a168 <_svfiprintf_r+0x1ec>
 8009fc2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009fc6:	f04f 0901 	mov.w	r9, #1
 8009fca:	4623      	mov	r3, r4
 8009fcc:	469a      	mov	sl, r3
 8009fce:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009fd2:	b10a      	cbz	r2, 8009fd8 <_svfiprintf_r+0x5c>
 8009fd4:	2a25      	cmp	r2, #37	; 0x25
 8009fd6:	d1f9      	bne.n	8009fcc <_svfiprintf_r+0x50>
 8009fd8:	ebba 0b04 	subs.w	fp, sl, r4
 8009fdc:	d00b      	beq.n	8009ff6 <_svfiprintf_r+0x7a>
 8009fde:	465b      	mov	r3, fp
 8009fe0:	4622      	mov	r2, r4
 8009fe2:	4629      	mov	r1, r5
 8009fe4:	4638      	mov	r0, r7
 8009fe6:	f7ff ff6d 	bl	8009ec4 <__ssputs_r>
 8009fea:	3001      	adds	r0, #1
 8009fec:	f000 80aa 	beq.w	800a144 <_svfiprintf_r+0x1c8>
 8009ff0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009ff2:	445a      	add	r2, fp
 8009ff4:	9209      	str	r2, [sp, #36]	; 0x24
 8009ff6:	f89a 3000 	ldrb.w	r3, [sl]
 8009ffa:	2b00      	cmp	r3, #0
 8009ffc:	f000 80a2 	beq.w	800a144 <_svfiprintf_r+0x1c8>
 800a000:	2300      	movs	r3, #0
 800a002:	f04f 32ff 	mov.w	r2, #4294967295
 800a006:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a00a:	f10a 0a01 	add.w	sl, sl, #1
 800a00e:	9304      	str	r3, [sp, #16]
 800a010:	9307      	str	r3, [sp, #28]
 800a012:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a016:	931a      	str	r3, [sp, #104]	; 0x68
 800a018:	4654      	mov	r4, sl
 800a01a:	2205      	movs	r2, #5
 800a01c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a020:	4851      	ldr	r0, [pc, #324]	; (800a168 <_svfiprintf_r+0x1ec>)
 800a022:	f7f6 f8dd 	bl	80001e0 <memchr>
 800a026:	9a04      	ldr	r2, [sp, #16]
 800a028:	b9d8      	cbnz	r0, 800a062 <_svfiprintf_r+0xe6>
 800a02a:	06d0      	lsls	r0, r2, #27
 800a02c:	bf44      	itt	mi
 800a02e:	2320      	movmi	r3, #32
 800a030:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a034:	0711      	lsls	r1, r2, #28
 800a036:	bf44      	itt	mi
 800a038:	232b      	movmi	r3, #43	; 0x2b
 800a03a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a03e:	f89a 3000 	ldrb.w	r3, [sl]
 800a042:	2b2a      	cmp	r3, #42	; 0x2a
 800a044:	d015      	beq.n	800a072 <_svfiprintf_r+0xf6>
 800a046:	9a07      	ldr	r2, [sp, #28]
 800a048:	4654      	mov	r4, sl
 800a04a:	2000      	movs	r0, #0
 800a04c:	f04f 0c0a 	mov.w	ip, #10
 800a050:	4621      	mov	r1, r4
 800a052:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a056:	3b30      	subs	r3, #48	; 0x30
 800a058:	2b09      	cmp	r3, #9
 800a05a:	d94e      	bls.n	800a0fa <_svfiprintf_r+0x17e>
 800a05c:	b1b0      	cbz	r0, 800a08c <_svfiprintf_r+0x110>
 800a05e:	9207      	str	r2, [sp, #28]
 800a060:	e014      	b.n	800a08c <_svfiprintf_r+0x110>
 800a062:	eba0 0308 	sub.w	r3, r0, r8
 800a066:	fa09 f303 	lsl.w	r3, r9, r3
 800a06a:	4313      	orrs	r3, r2
 800a06c:	9304      	str	r3, [sp, #16]
 800a06e:	46a2      	mov	sl, r4
 800a070:	e7d2      	b.n	800a018 <_svfiprintf_r+0x9c>
 800a072:	9b03      	ldr	r3, [sp, #12]
 800a074:	1d19      	adds	r1, r3, #4
 800a076:	681b      	ldr	r3, [r3, #0]
 800a078:	9103      	str	r1, [sp, #12]
 800a07a:	2b00      	cmp	r3, #0
 800a07c:	bfbb      	ittet	lt
 800a07e:	425b      	neglt	r3, r3
 800a080:	f042 0202 	orrlt.w	r2, r2, #2
 800a084:	9307      	strge	r3, [sp, #28]
 800a086:	9307      	strlt	r3, [sp, #28]
 800a088:	bfb8      	it	lt
 800a08a:	9204      	strlt	r2, [sp, #16]
 800a08c:	7823      	ldrb	r3, [r4, #0]
 800a08e:	2b2e      	cmp	r3, #46	; 0x2e
 800a090:	d10c      	bne.n	800a0ac <_svfiprintf_r+0x130>
 800a092:	7863      	ldrb	r3, [r4, #1]
 800a094:	2b2a      	cmp	r3, #42	; 0x2a
 800a096:	d135      	bne.n	800a104 <_svfiprintf_r+0x188>
 800a098:	9b03      	ldr	r3, [sp, #12]
 800a09a:	1d1a      	adds	r2, r3, #4
 800a09c:	681b      	ldr	r3, [r3, #0]
 800a09e:	9203      	str	r2, [sp, #12]
 800a0a0:	2b00      	cmp	r3, #0
 800a0a2:	bfb8      	it	lt
 800a0a4:	f04f 33ff 	movlt.w	r3, #4294967295
 800a0a8:	3402      	adds	r4, #2
 800a0aa:	9305      	str	r3, [sp, #20]
 800a0ac:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800a178 <_svfiprintf_r+0x1fc>
 800a0b0:	7821      	ldrb	r1, [r4, #0]
 800a0b2:	2203      	movs	r2, #3
 800a0b4:	4650      	mov	r0, sl
 800a0b6:	f7f6 f893 	bl	80001e0 <memchr>
 800a0ba:	b140      	cbz	r0, 800a0ce <_svfiprintf_r+0x152>
 800a0bc:	2340      	movs	r3, #64	; 0x40
 800a0be:	eba0 000a 	sub.w	r0, r0, sl
 800a0c2:	fa03 f000 	lsl.w	r0, r3, r0
 800a0c6:	9b04      	ldr	r3, [sp, #16]
 800a0c8:	4303      	orrs	r3, r0
 800a0ca:	3401      	adds	r4, #1
 800a0cc:	9304      	str	r3, [sp, #16]
 800a0ce:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a0d2:	4826      	ldr	r0, [pc, #152]	; (800a16c <_svfiprintf_r+0x1f0>)
 800a0d4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a0d8:	2206      	movs	r2, #6
 800a0da:	f7f6 f881 	bl	80001e0 <memchr>
 800a0de:	2800      	cmp	r0, #0
 800a0e0:	d038      	beq.n	800a154 <_svfiprintf_r+0x1d8>
 800a0e2:	4b23      	ldr	r3, [pc, #140]	; (800a170 <_svfiprintf_r+0x1f4>)
 800a0e4:	bb1b      	cbnz	r3, 800a12e <_svfiprintf_r+0x1b2>
 800a0e6:	9b03      	ldr	r3, [sp, #12]
 800a0e8:	3307      	adds	r3, #7
 800a0ea:	f023 0307 	bic.w	r3, r3, #7
 800a0ee:	3308      	adds	r3, #8
 800a0f0:	9303      	str	r3, [sp, #12]
 800a0f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a0f4:	4433      	add	r3, r6
 800a0f6:	9309      	str	r3, [sp, #36]	; 0x24
 800a0f8:	e767      	b.n	8009fca <_svfiprintf_r+0x4e>
 800a0fa:	fb0c 3202 	mla	r2, ip, r2, r3
 800a0fe:	460c      	mov	r4, r1
 800a100:	2001      	movs	r0, #1
 800a102:	e7a5      	b.n	800a050 <_svfiprintf_r+0xd4>
 800a104:	2300      	movs	r3, #0
 800a106:	3401      	adds	r4, #1
 800a108:	9305      	str	r3, [sp, #20]
 800a10a:	4619      	mov	r1, r3
 800a10c:	f04f 0c0a 	mov.w	ip, #10
 800a110:	4620      	mov	r0, r4
 800a112:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a116:	3a30      	subs	r2, #48	; 0x30
 800a118:	2a09      	cmp	r2, #9
 800a11a:	d903      	bls.n	800a124 <_svfiprintf_r+0x1a8>
 800a11c:	2b00      	cmp	r3, #0
 800a11e:	d0c5      	beq.n	800a0ac <_svfiprintf_r+0x130>
 800a120:	9105      	str	r1, [sp, #20]
 800a122:	e7c3      	b.n	800a0ac <_svfiprintf_r+0x130>
 800a124:	fb0c 2101 	mla	r1, ip, r1, r2
 800a128:	4604      	mov	r4, r0
 800a12a:	2301      	movs	r3, #1
 800a12c:	e7f0      	b.n	800a110 <_svfiprintf_r+0x194>
 800a12e:	ab03      	add	r3, sp, #12
 800a130:	9300      	str	r3, [sp, #0]
 800a132:	462a      	mov	r2, r5
 800a134:	4b0f      	ldr	r3, [pc, #60]	; (800a174 <_svfiprintf_r+0x1f8>)
 800a136:	a904      	add	r1, sp, #16
 800a138:	4638      	mov	r0, r7
 800a13a:	f3af 8000 	nop.w
 800a13e:	1c42      	adds	r2, r0, #1
 800a140:	4606      	mov	r6, r0
 800a142:	d1d6      	bne.n	800a0f2 <_svfiprintf_r+0x176>
 800a144:	89ab      	ldrh	r3, [r5, #12]
 800a146:	065b      	lsls	r3, r3, #25
 800a148:	f53f af2c 	bmi.w	8009fa4 <_svfiprintf_r+0x28>
 800a14c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a14e:	b01d      	add	sp, #116	; 0x74
 800a150:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a154:	ab03      	add	r3, sp, #12
 800a156:	9300      	str	r3, [sp, #0]
 800a158:	462a      	mov	r2, r5
 800a15a:	4b06      	ldr	r3, [pc, #24]	; (800a174 <_svfiprintf_r+0x1f8>)
 800a15c:	a904      	add	r1, sp, #16
 800a15e:	4638      	mov	r0, r7
 800a160:	f000 f87a 	bl	800a258 <_printf_i>
 800a164:	e7eb      	b.n	800a13e <_svfiprintf_r+0x1c2>
 800a166:	bf00      	nop
 800a168:	0800aaa4 	.word	0x0800aaa4
 800a16c:	0800aaae 	.word	0x0800aaae
 800a170:	00000000 	.word	0x00000000
 800a174:	08009ec5 	.word	0x08009ec5
 800a178:	0800aaaa 	.word	0x0800aaaa

0800a17c <_printf_common>:
 800a17c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a180:	4616      	mov	r6, r2
 800a182:	4699      	mov	r9, r3
 800a184:	688a      	ldr	r2, [r1, #8]
 800a186:	690b      	ldr	r3, [r1, #16]
 800a188:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a18c:	4293      	cmp	r3, r2
 800a18e:	bfb8      	it	lt
 800a190:	4613      	movlt	r3, r2
 800a192:	6033      	str	r3, [r6, #0]
 800a194:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a198:	4607      	mov	r7, r0
 800a19a:	460c      	mov	r4, r1
 800a19c:	b10a      	cbz	r2, 800a1a2 <_printf_common+0x26>
 800a19e:	3301      	adds	r3, #1
 800a1a0:	6033      	str	r3, [r6, #0]
 800a1a2:	6823      	ldr	r3, [r4, #0]
 800a1a4:	0699      	lsls	r1, r3, #26
 800a1a6:	bf42      	ittt	mi
 800a1a8:	6833      	ldrmi	r3, [r6, #0]
 800a1aa:	3302      	addmi	r3, #2
 800a1ac:	6033      	strmi	r3, [r6, #0]
 800a1ae:	6825      	ldr	r5, [r4, #0]
 800a1b0:	f015 0506 	ands.w	r5, r5, #6
 800a1b4:	d106      	bne.n	800a1c4 <_printf_common+0x48>
 800a1b6:	f104 0a19 	add.w	sl, r4, #25
 800a1ba:	68e3      	ldr	r3, [r4, #12]
 800a1bc:	6832      	ldr	r2, [r6, #0]
 800a1be:	1a9b      	subs	r3, r3, r2
 800a1c0:	42ab      	cmp	r3, r5
 800a1c2:	dc26      	bgt.n	800a212 <_printf_common+0x96>
 800a1c4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a1c8:	1e13      	subs	r3, r2, #0
 800a1ca:	6822      	ldr	r2, [r4, #0]
 800a1cc:	bf18      	it	ne
 800a1ce:	2301      	movne	r3, #1
 800a1d0:	0692      	lsls	r2, r2, #26
 800a1d2:	d42b      	bmi.n	800a22c <_printf_common+0xb0>
 800a1d4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a1d8:	4649      	mov	r1, r9
 800a1da:	4638      	mov	r0, r7
 800a1dc:	47c0      	blx	r8
 800a1de:	3001      	adds	r0, #1
 800a1e0:	d01e      	beq.n	800a220 <_printf_common+0xa4>
 800a1e2:	6823      	ldr	r3, [r4, #0]
 800a1e4:	68e5      	ldr	r5, [r4, #12]
 800a1e6:	6832      	ldr	r2, [r6, #0]
 800a1e8:	f003 0306 	and.w	r3, r3, #6
 800a1ec:	2b04      	cmp	r3, #4
 800a1ee:	bf08      	it	eq
 800a1f0:	1aad      	subeq	r5, r5, r2
 800a1f2:	68a3      	ldr	r3, [r4, #8]
 800a1f4:	6922      	ldr	r2, [r4, #16]
 800a1f6:	bf0c      	ite	eq
 800a1f8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a1fc:	2500      	movne	r5, #0
 800a1fe:	4293      	cmp	r3, r2
 800a200:	bfc4      	itt	gt
 800a202:	1a9b      	subgt	r3, r3, r2
 800a204:	18ed      	addgt	r5, r5, r3
 800a206:	2600      	movs	r6, #0
 800a208:	341a      	adds	r4, #26
 800a20a:	42b5      	cmp	r5, r6
 800a20c:	d11a      	bne.n	800a244 <_printf_common+0xc8>
 800a20e:	2000      	movs	r0, #0
 800a210:	e008      	b.n	800a224 <_printf_common+0xa8>
 800a212:	2301      	movs	r3, #1
 800a214:	4652      	mov	r2, sl
 800a216:	4649      	mov	r1, r9
 800a218:	4638      	mov	r0, r7
 800a21a:	47c0      	blx	r8
 800a21c:	3001      	adds	r0, #1
 800a21e:	d103      	bne.n	800a228 <_printf_common+0xac>
 800a220:	f04f 30ff 	mov.w	r0, #4294967295
 800a224:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a228:	3501      	adds	r5, #1
 800a22a:	e7c6      	b.n	800a1ba <_printf_common+0x3e>
 800a22c:	18e1      	adds	r1, r4, r3
 800a22e:	1c5a      	adds	r2, r3, #1
 800a230:	2030      	movs	r0, #48	; 0x30
 800a232:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a236:	4422      	add	r2, r4
 800a238:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a23c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a240:	3302      	adds	r3, #2
 800a242:	e7c7      	b.n	800a1d4 <_printf_common+0x58>
 800a244:	2301      	movs	r3, #1
 800a246:	4622      	mov	r2, r4
 800a248:	4649      	mov	r1, r9
 800a24a:	4638      	mov	r0, r7
 800a24c:	47c0      	blx	r8
 800a24e:	3001      	adds	r0, #1
 800a250:	d0e6      	beq.n	800a220 <_printf_common+0xa4>
 800a252:	3601      	adds	r6, #1
 800a254:	e7d9      	b.n	800a20a <_printf_common+0x8e>
	...

0800a258 <_printf_i>:
 800a258:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a25c:	7e0f      	ldrb	r7, [r1, #24]
 800a25e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a260:	2f78      	cmp	r7, #120	; 0x78
 800a262:	4691      	mov	r9, r2
 800a264:	4680      	mov	r8, r0
 800a266:	460c      	mov	r4, r1
 800a268:	469a      	mov	sl, r3
 800a26a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800a26e:	d807      	bhi.n	800a280 <_printf_i+0x28>
 800a270:	2f62      	cmp	r7, #98	; 0x62
 800a272:	d80a      	bhi.n	800a28a <_printf_i+0x32>
 800a274:	2f00      	cmp	r7, #0
 800a276:	f000 80d8 	beq.w	800a42a <_printf_i+0x1d2>
 800a27a:	2f58      	cmp	r7, #88	; 0x58
 800a27c:	f000 80a3 	beq.w	800a3c6 <_printf_i+0x16e>
 800a280:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a284:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a288:	e03a      	b.n	800a300 <_printf_i+0xa8>
 800a28a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a28e:	2b15      	cmp	r3, #21
 800a290:	d8f6      	bhi.n	800a280 <_printf_i+0x28>
 800a292:	a101      	add	r1, pc, #4	; (adr r1, 800a298 <_printf_i+0x40>)
 800a294:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a298:	0800a2f1 	.word	0x0800a2f1
 800a29c:	0800a305 	.word	0x0800a305
 800a2a0:	0800a281 	.word	0x0800a281
 800a2a4:	0800a281 	.word	0x0800a281
 800a2a8:	0800a281 	.word	0x0800a281
 800a2ac:	0800a281 	.word	0x0800a281
 800a2b0:	0800a305 	.word	0x0800a305
 800a2b4:	0800a281 	.word	0x0800a281
 800a2b8:	0800a281 	.word	0x0800a281
 800a2bc:	0800a281 	.word	0x0800a281
 800a2c0:	0800a281 	.word	0x0800a281
 800a2c4:	0800a411 	.word	0x0800a411
 800a2c8:	0800a335 	.word	0x0800a335
 800a2cc:	0800a3f3 	.word	0x0800a3f3
 800a2d0:	0800a281 	.word	0x0800a281
 800a2d4:	0800a281 	.word	0x0800a281
 800a2d8:	0800a433 	.word	0x0800a433
 800a2dc:	0800a281 	.word	0x0800a281
 800a2e0:	0800a335 	.word	0x0800a335
 800a2e4:	0800a281 	.word	0x0800a281
 800a2e8:	0800a281 	.word	0x0800a281
 800a2ec:	0800a3fb 	.word	0x0800a3fb
 800a2f0:	682b      	ldr	r3, [r5, #0]
 800a2f2:	1d1a      	adds	r2, r3, #4
 800a2f4:	681b      	ldr	r3, [r3, #0]
 800a2f6:	602a      	str	r2, [r5, #0]
 800a2f8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a2fc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a300:	2301      	movs	r3, #1
 800a302:	e0a3      	b.n	800a44c <_printf_i+0x1f4>
 800a304:	6820      	ldr	r0, [r4, #0]
 800a306:	6829      	ldr	r1, [r5, #0]
 800a308:	0606      	lsls	r6, r0, #24
 800a30a:	f101 0304 	add.w	r3, r1, #4
 800a30e:	d50a      	bpl.n	800a326 <_printf_i+0xce>
 800a310:	680e      	ldr	r6, [r1, #0]
 800a312:	602b      	str	r3, [r5, #0]
 800a314:	2e00      	cmp	r6, #0
 800a316:	da03      	bge.n	800a320 <_printf_i+0xc8>
 800a318:	232d      	movs	r3, #45	; 0x2d
 800a31a:	4276      	negs	r6, r6
 800a31c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a320:	485e      	ldr	r0, [pc, #376]	; (800a49c <_printf_i+0x244>)
 800a322:	230a      	movs	r3, #10
 800a324:	e019      	b.n	800a35a <_printf_i+0x102>
 800a326:	680e      	ldr	r6, [r1, #0]
 800a328:	602b      	str	r3, [r5, #0]
 800a32a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800a32e:	bf18      	it	ne
 800a330:	b236      	sxthne	r6, r6
 800a332:	e7ef      	b.n	800a314 <_printf_i+0xbc>
 800a334:	682b      	ldr	r3, [r5, #0]
 800a336:	6820      	ldr	r0, [r4, #0]
 800a338:	1d19      	adds	r1, r3, #4
 800a33a:	6029      	str	r1, [r5, #0]
 800a33c:	0601      	lsls	r1, r0, #24
 800a33e:	d501      	bpl.n	800a344 <_printf_i+0xec>
 800a340:	681e      	ldr	r6, [r3, #0]
 800a342:	e002      	b.n	800a34a <_printf_i+0xf2>
 800a344:	0646      	lsls	r6, r0, #25
 800a346:	d5fb      	bpl.n	800a340 <_printf_i+0xe8>
 800a348:	881e      	ldrh	r6, [r3, #0]
 800a34a:	4854      	ldr	r0, [pc, #336]	; (800a49c <_printf_i+0x244>)
 800a34c:	2f6f      	cmp	r7, #111	; 0x6f
 800a34e:	bf0c      	ite	eq
 800a350:	2308      	moveq	r3, #8
 800a352:	230a      	movne	r3, #10
 800a354:	2100      	movs	r1, #0
 800a356:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a35a:	6865      	ldr	r5, [r4, #4]
 800a35c:	60a5      	str	r5, [r4, #8]
 800a35e:	2d00      	cmp	r5, #0
 800a360:	bfa2      	ittt	ge
 800a362:	6821      	ldrge	r1, [r4, #0]
 800a364:	f021 0104 	bicge.w	r1, r1, #4
 800a368:	6021      	strge	r1, [r4, #0]
 800a36a:	b90e      	cbnz	r6, 800a370 <_printf_i+0x118>
 800a36c:	2d00      	cmp	r5, #0
 800a36e:	d04d      	beq.n	800a40c <_printf_i+0x1b4>
 800a370:	4615      	mov	r5, r2
 800a372:	fbb6 f1f3 	udiv	r1, r6, r3
 800a376:	fb03 6711 	mls	r7, r3, r1, r6
 800a37a:	5dc7      	ldrb	r7, [r0, r7]
 800a37c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800a380:	4637      	mov	r7, r6
 800a382:	42bb      	cmp	r3, r7
 800a384:	460e      	mov	r6, r1
 800a386:	d9f4      	bls.n	800a372 <_printf_i+0x11a>
 800a388:	2b08      	cmp	r3, #8
 800a38a:	d10b      	bne.n	800a3a4 <_printf_i+0x14c>
 800a38c:	6823      	ldr	r3, [r4, #0]
 800a38e:	07de      	lsls	r6, r3, #31
 800a390:	d508      	bpl.n	800a3a4 <_printf_i+0x14c>
 800a392:	6923      	ldr	r3, [r4, #16]
 800a394:	6861      	ldr	r1, [r4, #4]
 800a396:	4299      	cmp	r1, r3
 800a398:	bfde      	ittt	le
 800a39a:	2330      	movle	r3, #48	; 0x30
 800a39c:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a3a0:	f105 35ff 	addle.w	r5, r5, #4294967295
 800a3a4:	1b52      	subs	r2, r2, r5
 800a3a6:	6122      	str	r2, [r4, #16]
 800a3a8:	f8cd a000 	str.w	sl, [sp]
 800a3ac:	464b      	mov	r3, r9
 800a3ae:	aa03      	add	r2, sp, #12
 800a3b0:	4621      	mov	r1, r4
 800a3b2:	4640      	mov	r0, r8
 800a3b4:	f7ff fee2 	bl	800a17c <_printf_common>
 800a3b8:	3001      	adds	r0, #1
 800a3ba:	d14c      	bne.n	800a456 <_printf_i+0x1fe>
 800a3bc:	f04f 30ff 	mov.w	r0, #4294967295
 800a3c0:	b004      	add	sp, #16
 800a3c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a3c6:	4835      	ldr	r0, [pc, #212]	; (800a49c <_printf_i+0x244>)
 800a3c8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800a3cc:	6829      	ldr	r1, [r5, #0]
 800a3ce:	6823      	ldr	r3, [r4, #0]
 800a3d0:	f851 6b04 	ldr.w	r6, [r1], #4
 800a3d4:	6029      	str	r1, [r5, #0]
 800a3d6:	061d      	lsls	r5, r3, #24
 800a3d8:	d514      	bpl.n	800a404 <_printf_i+0x1ac>
 800a3da:	07df      	lsls	r7, r3, #31
 800a3dc:	bf44      	itt	mi
 800a3de:	f043 0320 	orrmi.w	r3, r3, #32
 800a3e2:	6023      	strmi	r3, [r4, #0]
 800a3e4:	b91e      	cbnz	r6, 800a3ee <_printf_i+0x196>
 800a3e6:	6823      	ldr	r3, [r4, #0]
 800a3e8:	f023 0320 	bic.w	r3, r3, #32
 800a3ec:	6023      	str	r3, [r4, #0]
 800a3ee:	2310      	movs	r3, #16
 800a3f0:	e7b0      	b.n	800a354 <_printf_i+0xfc>
 800a3f2:	6823      	ldr	r3, [r4, #0]
 800a3f4:	f043 0320 	orr.w	r3, r3, #32
 800a3f8:	6023      	str	r3, [r4, #0]
 800a3fa:	2378      	movs	r3, #120	; 0x78
 800a3fc:	4828      	ldr	r0, [pc, #160]	; (800a4a0 <_printf_i+0x248>)
 800a3fe:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a402:	e7e3      	b.n	800a3cc <_printf_i+0x174>
 800a404:	0659      	lsls	r1, r3, #25
 800a406:	bf48      	it	mi
 800a408:	b2b6      	uxthmi	r6, r6
 800a40a:	e7e6      	b.n	800a3da <_printf_i+0x182>
 800a40c:	4615      	mov	r5, r2
 800a40e:	e7bb      	b.n	800a388 <_printf_i+0x130>
 800a410:	682b      	ldr	r3, [r5, #0]
 800a412:	6826      	ldr	r6, [r4, #0]
 800a414:	6961      	ldr	r1, [r4, #20]
 800a416:	1d18      	adds	r0, r3, #4
 800a418:	6028      	str	r0, [r5, #0]
 800a41a:	0635      	lsls	r5, r6, #24
 800a41c:	681b      	ldr	r3, [r3, #0]
 800a41e:	d501      	bpl.n	800a424 <_printf_i+0x1cc>
 800a420:	6019      	str	r1, [r3, #0]
 800a422:	e002      	b.n	800a42a <_printf_i+0x1d2>
 800a424:	0670      	lsls	r0, r6, #25
 800a426:	d5fb      	bpl.n	800a420 <_printf_i+0x1c8>
 800a428:	8019      	strh	r1, [r3, #0]
 800a42a:	2300      	movs	r3, #0
 800a42c:	6123      	str	r3, [r4, #16]
 800a42e:	4615      	mov	r5, r2
 800a430:	e7ba      	b.n	800a3a8 <_printf_i+0x150>
 800a432:	682b      	ldr	r3, [r5, #0]
 800a434:	1d1a      	adds	r2, r3, #4
 800a436:	602a      	str	r2, [r5, #0]
 800a438:	681d      	ldr	r5, [r3, #0]
 800a43a:	6862      	ldr	r2, [r4, #4]
 800a43c:	2100      	movs	r1, #0
 800a43e:	4628      	mov	r0, r5
 800a440:	f7f5 fece 	bl	80001e0 <memchr>
 800a444:	b108      	cbz	r0, 800a44a <_printf_i+0x1f2>
 800a446:	1b40      	subs	r0, r0, r5
 800a448:	6060      	str	r0, [r4, #4]
 800a44a:	6863      	ldr	r3, [r4, #4]
 800a44c:	6123      	str	r3, [r4, #16]
 800a44e:	2300      	movs	r3, #0
 800a450:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a454:	e7a8      	b.n	800a3a8 <_printf_i+0x150>
 800a456:	6923      	ldr	r3, [r4, #16]
 800a458:	462a      	mov	r2, r5
 800a45a:	4649      	mov	r1, r9
 800a45c:	4640      	mov	r0, r8
 800a45e:	47d0      	blx	sl
 800a460:	3001      	adds	r0, #1
 800a462:	d0ab      	beq.n	800a3bc <_printf_i+0x164>
 800a464:	6823      	ldr	r3, [r4, #0]
 800a466:	079b      	lsls	r3, r3, #30
 800a468:	d413      	bmi.n	800a492 <_printf_i+0x23a>
 800a46a:	68e0      	ldr	r0, [r4, #12]
 800a46c:	9b03      	ldr	r3, [sp, #12]
 800a46e:	4298      	cmp	r0, r3
 800a470:	bfb8      	it	lt
 800a472:	4618      	movlt	r0, r3
 800a474:	e7a4      	b.n	800a3c0 <_printf_i+0x168>
 800a476:	2301      	movs	r3, #1
 800a478:	4632      	mov	r2, r6
 800a47a:	4649      	mov	r1, r9
 800a47c:	4640      	mov	r0, r8
 800a47e:	47d0      	blx	sl
 800a480:	3001      	adds	r0, #1
 800a482:	d09b      	beq.n	800a3bc <_printf_i+0x164>
 800a484:	3501      	adds	r5, #1
 800a486:	68e3      	ldr	r3, [r4, #12]
 800a488:	9903      	ldr	r1, [sp, #12]
 800a48a:	1a5b      	subs	r3, r3, r1
 800a48c:	42ab      	cmp	r3, r5
 800a48e:	dcf2      	bgt.n	800a476 <_printf_i+0x21e>
 800a490:	e7eb      	b.n	800a46a <_printf_i+0x212>
 800a492:	2500      	movs	r5, #0
 800a494:	f104 0619 	add.w	r6, r4, #25
 800a498:	e7f5      	b.n	800a486 <_printf_i+0x22e>
 800a49a:	bf00      	nop
 800a49c:	0800aab5 	.word	0x0800aab5
 800a4a0:	0800aac6 	.word	0x0800aac6

0800a4a4 <memcpy>:
 800a4a4:	440a      	add	r2, r1
 800a4a6:	4291      	cmp	r1, r2
 800a4a8:	f100 33ff 	add.w	r3, r0, #4294967295
 800a4ac:	d100      	bne.n	800a4b0 <memcpy+0xc>
 800a4ae:	4770      	bx	lr
 800a4b0:	b510      	push	{r4, lr}
 800a4b2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a4b6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a4ba:	4291      	cmp	r1, r2
 800a4bc:	d1f9      	bne.n	800a4b2 <memcpy+0xe>
 800a4be:	bd10      	pop	{r4, pc}

0800a4c0 <memmove>:
 800a4c0:	4288      	cmp	r0, r1
 800a4c2:	b510      	push	{r4, lr}
 800a4c4:	eb01 0402 	add.w	r4, r1, r2
 800a4c8:	d902      	bls.n	800a4d0 <memmove+0x10>
 800a4ca:	4284      	cmp	r4, r0
 800a4cc:	4623      	mov	r3, r4
 800a4ce:	d807      	bhi.n	800a4e0 <memmove+0x20>
 800a4d0:	1e43      	subs	r3, r0, #1
 800a4d2:	42a1      	cmp	r1, r4
 800a4d4:	d008      	beq.n	800a4e8 <memmove+0x28>
 800a4d6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a4da:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a4de:	e7f8      	b.n	800a4d2 <memmove+0x12>
 800a4e0:	4402      	add	r2, r0
 800a4e2:	4601      	mov	r1, r0
 800a4e4:	428a      	cmp	r2, r1
 800a4e6:	d100      	bne.n	800a4ea <memmove+0x2a>
 800a4e8:	bd10      	pop	{r4, pc}
 800a4ea:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a4ee:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a4f2:	e7f7      	b.n	800a4e4 <memmove+0x24>

0800a4f4 <_free_r>:
 800a4f4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a4f6:	2900      	cmp	r1, #0
 800a4f8:	d044      	beq.n	800a584 <_free_r+0x90>
 800a4fa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a4fe:	9001      	str	r0, [sp, #4]
 800a500:	2b00      	cmp	r3, #0
 800a502:	f1a1 0404 	sub.w	r4, r1, #4
 800a506:	bfb8      	it	lt
 800a508:	18e4      	addlt	r4, r4, r3
 800a50a:	f000 f913 	bl	800a734 <__malloc_lock>
 800a50e:	4a1e      	ldr	r2, [pc, #120]	; (800a588 <_free_r+0x94>)
 800a510:	9801      	ldr	r0, [sp, #4]
 800a512:	6813      	ldr	r3, [r2, #0]
 800a514:	b933      	cbnz	r3, 800a524 <_free_r+0x30>
 800a516:	6063      	str	r3, [r4, #4]
 800a518:	6014      	str	r4, [r2, #0]
 800a51a:	b003      	add	sp, #12
 800a51c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a520:	f000 b90e 	b.w	800a740 <__malloc_unlock>
 800a524:	42a3      	cmp	r3, r4
 800a526:	d908      	bls.n	800a53a <_free_r+0x46>
 800a528:	6825      	ldr	r5, [r4, #0]
 800a52a:	1961      	adds	r1, r4, r5
 800a52c:	428b      	cmp	r3, r1
 800a52e:	bf01      	itttt	eq
 800a530:	6819      	ldreq	r1, [r3, #0]
 800a532:	685b      	ldreq	r3, [r3, #4]
 800a534:	1949      	addeq	r1, r1, r5
 800a536:	6021      	streq	r1, [r4, #0]
 800a538:	e7ed      	b.n	800a516 <_free_r+0x22>
 800a53a:	461a      	mov	r2, r3
 800a53c:	685b      	ldr	r3, [r3, #4]
 800a53e:	b10b      	cbz	r3, 800a544 <_free_r+0x50>
 800a540:	42a3      	cmp	r3, r4
 800a542:	d9fa      	bls.n	800a53a <_free_r+0x46>
 800a544:	6811      	ldr	r1, [r2, #0]
 800a546:	1855      	adds	r5, r2, r1
 800a548:	42a5      	cmp	r5, r4
 800a54a:	d10b      	bne.n	800a564 <_free_r+0x70>
 800a54c:	6824      	ldr	r4, [r4, #0]
 800a54e:	4421      	add	r1, r4
 800a550:	1854      	adds	r4, r2, r1
 800a552:	42a3      	cmp	r3, r4
 800a554:	6011      	str	r1, [r2, #0]
 800a556:	d1e0      	bne.n	800a51a <_free_r+0x26>
 800a558:	681c      	ldr	r4, [r3, #0]
 800a55a:	685b      	ldr	r3, [r3, #4]
 800a55c:	6053      	str	r3, [r2, #4]
 800a55e:	4421      	add	r1, r4
 800a560:	6011      	str	r1, [r2, #0]
 800a562:	e7da      	b.n	800a51a <_free_r+0x26>
 800a564:	d902      	bls.n	800a56c <_free_r+0x78>
 800a566:	230c      	movs	r3, #12
 800a568:	6003      	str	r3, [r0, #0]
 800a56a:	e7d6      	b.n	800a51a <_free_r+0x26>
 800a56c:	6825      	ldr	r5, [r4, #0]
 800a56e:	1961      	adds	r1, r4, r5
 800a570:	428b      	cmp	r3, r1
 800a572:	bf04      	itt	eq
 800a574:	6819      	ldreq	r1, [r3, #0]
 800a576:	685b      	ldreq	r3, [r3, #4]
 800a578:	6063      	str	r3, [r4, #4]
 800a57a:	bf04      	itt	eq
 800a57c:	1949      	addeq	r1, r1, r5
 800a57e:	6021      	streq	r1, [r4, #0]
 800a580:	6054      	str	r4, [r2, #4]
 800a582:	e7ca      	b.n	800a51a <_free_r+0x26>
 800a584:	b003      	add	sp, #12
 800a586:	bd30      	pop	{r4, r5, pc}
 800a588:	2000082c 	.word	0x2000082c

0800a58c <sbrk_aligned>:
 800a58c:	b570      	push	{r4, r5, r6, lr}
 800a58e:	4e0e      	ldr	r6, [pc, #56]	; (800a5c8 <sbrk_aligned+0x3c>)
 800a590:	460c      	mov	r4, r1
 800a592:	6831      	ldr	r1, [r6, #0]
 800a594:	4605      	mov	r5, r0
 800a596:	b911      	cbnz	r1, 800a59e <sbrk_aligned+0x12>
 800a598:	f000 f8bc 	bl	800a714 <_sbrk_r>
 800a59c:	6030      	str	r0, [r6, #0]
 800a59e:	4621      	mov	r1, r4
 800a5a0:	4628      	mov	r0, r5
 800a5a2:	f000 f8b7 	bl	800a714 <_sbrk_r>
 800a5a6:	1c43      	adds	r3, r0, #1
 800a5a8:	d00a      	beq.n	800a5c0 <sbrk_aligned+0x34>
 800a5aa:	1cc4      	adds	r4, r0, #3
 800a5ac:	f024 0403 	bic.w	r4, r4, #3
 800a5b0:	42a0      	cmp	r0, r4
 800a5b2:	d007      	beq.n	800a5c4 <sbrk_aligned+0x38>
 800a5b4:	1a21      	subs	r1, r4, r0
 800a5b6:	4628      	mov	r0, r5
 800a5b8:	f000 f8ac 	bl	800a714 <_sbrk_r>
 800a5bc:	3001      	adds	r0, #1
 800a5be:	d101      	bne.n	800a5c4 <sbrk_aligned+0x38>
 800a5c0:	f04f 34ff 	mov.w	r4, #4294967295
 800a5c4:	4620      	mov	r0, r4
 800a5c6:	bd70      	pop	{r4, r5, r6, pc}
 800a5c8:	20000830 	.word	0x20000830

0800a5cc <_malloc_r>:
 800a5cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a5d0:	1ccd      	adds	r5, r1, #3
 800a5d2:	f025 0503 	bic.w	r5, r5, #3
 800a5d6:	3508      	adds	r5, #8
 800a5d8:	2d0c      	cmp	r5, #12
 800a5da:	bf38      	it	cc
 800a5dc:	250c      	movcc	r5, #12
 800a5de:	2d00      	cmp	r5, #0
 800a5e0:	4607      	mov	r7, r0
 800a5e2:	db01      	blt.n	800a5e8 <_malloc_r+0x1c>
 800a5e4:	42a9      	cmp	r1, r5
 800a5e6:	d905      	bls.n	800a5f4 <_malloc_r+0x28>
 800a5e8:	230c      	movs	r3, #12
 800a5ea:	603b      	str	r3, [r7, #0]
 800a5ec:	2600      	movs	r6, #0
 800a5ee:	4630      	mov	r0, r6
 800a5f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a5f4:	4e2e      	ldr	r6, [pc, #184]	; (800a6b0 <_malloc_r+0xe4>)
 800a5f6:	f000 f89d 	bl	800a734 <__malloc_lock>
 800a5fa:	6833      	ldr	r3, [r6, #0]
 800a5fc:	461c      	mov	r4, r3
 800a5fe:	bb34      	cbnz	r4, 800a64e <_malloc_r+0x82>
 800a600:	4629      	mov	r1, r5
 800a602:	4638      	mov	r0, r7
 800a604:	f7ff ffc2 	bl	800a58c <sbrk_aligned>
 800a608:	1c43      	adds	r3, r0, #1
 800a60a:	4604      	mov	r4, r0
 800a60c:	d14d      	bne.n	800a6aa <_malloc_r+0xde>
 800a60e:	6834      	ldr	r4, [r6, #0]
 800a610:	4626      	mov	r6, r4
 800a612:	2e00      	cmp	r6, #0
 800a614:	d140      	bne.n	800a698 <_malloc_r+0xcc>
 800a616:	6823      	ldr	r3, [r4, #0]
 800a618:	4631      	mov	r1, r6
 800a61a:	4638      	mov	r0, r7
 800a61c:	eb04 0803 	add.w	r8, r4, r3
 800a620:	f000 f878 	bl	800a714 <_sbrk_r>
 800a624:	4580      	cmp	r8, r0
 800a626:	d13a      	bne.n	800a69e <_malloc_r+0xd2>
 800a628:	6821      	ldr	r1, [r4, #0]
 800a62a:	3503      	adds	r5, #3
 800a62c:	1a6d      	subs	r5, r5, r1
 800a62e:	f025 0503 	bic.w	r5, r5, #3
 800a632:	3508      	adds	r5, #8
 800a634:	2d0c      	cmp	r5, #12
 800a636:	bf38      	it	cc
 800a638:	250c      	movcc	r5, #12
 800a63a:	4629      	mov	r1, r5
 800a63c:	4638      	mov	r0, r7
 800a63e:	f7ff ffa5 	bl	800a58c <sbrk_aligned>
 800a642:	3001      	adds	r0, #1
 800a644:	d02b      	beq.n	800a69e <_malloc_r+0xd2>
 800a646:	6823      	ldr	r3, [r4, #0]
 800a648:	442b      	add	r3, r5
 800a64a:	6023      	str	r3, [r4, #0]
 800a64c:	e00e      	b.n	800a66c <_malloc_r+0xa0>
 800a64e:	6822      	ldr	r2, [r4, #0]
 800a650:	1b52      	subs	r2, r2, r5
 800a652:	d41e      	bmi.n	800a692 <_malloc_r+0xc6>
 800a654:	2a0b      	cmp	r2, #11
 800a656:	d916      	bls.n	800a686 <_malloc_r+0xba>
 800a658:	1961      	adds	r1, r4, r5
 800a65a:	42a3      	cmp	r3, r4
 800a65c:	6025      	str	r5, [r4, #0]
 800a65e:	bf18      	it	ne
 800a660:	6059      	strne	r1, [r3, #4]
 800a662:	6863      	ldr	r3, [r4, #4]
 800a664:	bf08      	it	eq
 800a666:	6031      	streq	r1, [r6, #0]
 800a668:	5162      	str	r2, [r4, r5]
 800a66a:	604b      	str	r3, [r1, #4]
 800a66c:	4638      	mov	r0, r7
 800a66e:	f104 060b 	add.w	r6, r4, #11
 800a672:	f000 f865 	bl	800a740 <__malloc_unlock>
 800a676:	f026 0607 	bic.w	r6, r6, #7
 800a67a:	1d23      	adds	r3, r4, #4
 800a67c:	1af2      	subs	r2, r6, r3
 800a67e:	d0b6      	beq.n	800a5ee <_malloc_r+0x22>
 800a680:	1b9b      	subs	r3, r3, r6
 800a682:	50a3      	str	r3, [r4, r2]
 800a684:	e7b3      	b.n	800a5ee <_malloc_r+0x22>
 800a686:	6862      	ldr	r2, [r4, #4]
 800a688:	42a3      	cmp	r3, r4
 800a68a:	bf0c      	ite	eq
 800a68c:	6032      	streq	r2, [r6, #0]
 800a68e:	605a      	strne	r2, [r3, #4]
 800a690:	e7ec      	b.n	800a66c <_malloc_r+0xa0>
 800a692:	4623      	mov	r3, r4
 800a694:	6864      	ldr	r4, [r4, #4]
 800a696:	e7b2      	b.n	800a5fe <_malloc_r+0x32>
 800a698:	4634      	mov	r4, r6
 800a69a:	6876      	ldr	r6, [r6, #4]
 800a69c:	e7b9      	b.n	800a612 <_malloc_r+0x46>
 800a69e:	230c      	movs	r3, #12
 800a6a0:	603b      	str	r3, [r7, #0]
 800a6a2:	4638      	mov	r0, r7
 800a6a4:	f000 f84c 	bl	800a740 <__malloc_unlock>
 800a6a8:	e7a1      	b.n	800a5ee <_malloc_r+0x22>
 800a6aa:	6025      	str	r5, [r4, #0]
 800a6ac:	e7de      	b.n	800a66c <_malloc_r+0xa0>
 800a6ae:	bf00      	nop
 800a6b0:	2000082c 	.word	0x2000082c

0800a6b4 <_realloc_r>:
 800a6b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a6b8:	4680      	mov	r8, r0
 800a6ba:	4614      	mov	r4, r2
 800a6bc:	460e      	mov	r6, r1
 800a6be:	b921      	cbnz	r1, 800a6ca <_realloc_r+0x16>
 800a6c0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a6c4:	4611      	mov	r1, r2
 800a6c6:	f7ff bf81 	b.w	800a5cc <_malloc_r>
 800a6ca:	b92a      	cbnz	r2, 800a6d8 <_realloc_r+0x24>
 800a6cc:	f7ff ff12 	bl	800a4f4 <_free_r>
 800a6d0:	4625      	mov	r5, r4
 800a6d2:	4628      	mov	r0, r5
 800a6d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a6d8:	f000 f838 	bl	800a74c <_malloc_usable_size_r>
 800a6dc:	4284      	cmp	r4, r0
 800a6de:	4607      	mov	r7, r0
 800a6e0:	d802      	bhi.n	800a6e8 <_realloc_r+0x34>
 800a6e2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800a6e6:	d812      	bhi.n	800a70e <_realloc_r+0x5a>
 800a6e8:	4621      	mov	r1, r4
 800a6ea:	4640      	mov	r0, r8
 800a6ec:	f7ff ff6e 	bl	800a5cc <_malloc_r>
 800a6f0:	4605      	mov	r5, r0
 800a6f2:	2800      	cmp	r0, #0
 800a6f4:	d0ed      	beq.n	800a6d2 <_realloc_r+0x1e>
 800a6f6:	42bc      	cmp	r4, r7
 800a6f8:	4622      	mov	r2, r4
 800a6fa:	4631      	mov	r1, r6
 800a6fc:	bf28      	it	cs
 800a6fe:	463a      	movcs	r2, r7
 800a700:	f7ff fed0 	bl	800a4a4 <memcpy>
 800a704:	4631      	mov	r1, r6
 800a706:	4640      	mov	r0, r8
 800a708:	f7ff fef4 	bl	800a4f4 <_free_r>
 800a70c:	e7e1      	b.n	800a6d2 <_realloc_r+0x1e>
 800a70e:	4635      	mov	r5, r6
 800a710:	e7df      	b.n	800a6d2 <_realloc_r+0x1e>
	...

0800a714 <_sbrk_r>:
 800a714:	b538      	push	{r3, r4, r5, lr}
 800a716:	4d06      	ldr	r5, [pc, #24]	; (800a730 <_sbrk_r+0x1c>)
 800a718:	2300      	movs	r3, #0
 800a71a:	4604      	mov	r4, r0
 800a71c:	4608      	mov	r0, r1
 800a71e:	602b      	str	r3, [r5, #0]
 800a720:	f7f8 fd02 	bl	8003128 <_sbrk>
 800a724:	1c43      	adds	r3, r0, #1
 800a726:	d102      	bne.n	800a72e <_sbrk_r+0x1a>
 800a728:	682b      	ldr	r3, [r5, #0]
 800a72a:	b103      	cbz	r3, 800a72e <_sbrk_r+0x1a>
 800a72c:	6023      	str	r3, [r4, #0]
 800a72e:	bd38      	pop	{r3, r4, r5, pc}
 800a730:	20000834 	.word	0x20000834

0800a734 <__malloc_lock>:
 800a734:	4801      	ldr	r0, [pc, #4]	; (800a73c <__malloc_lock+0x8>)
 800a736:	f000 b811 	b.w	800a75c <__retarget_lock_acquire_recursive>
 800a73a:	bf00      	nop
 800a73c:	20000838 	.word	0x20000838

0800a740 <__malloc_unlock>:
 800a740:	4801      	ldr	r0, [pc, #4]	; (800a748 <__malloc_unlock+0x8>)
 800a742:	f000 b80c 	b.w	800a75e <__retarget_lock_release_recursive>
 800a746:	bf00      	nop
 800a748:	20000838 	.word	0x20000838

0800a74c <_malloc_usable_size_r>:
 800a74c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a750:	1f18      	subs	r0, r3, #4
 800a752:	2b00      	cmp	r3, #0
 800a754:	bfbc      	itt	lt
 800a756:	580b      	ldrlt	r3, [r1, r0]
 800a758:	18c0      	addlt	r0, r0, r3
 800a75a:	4770      	bx	lr

0800a75c <__retarget_lock_acquire_recursive>:
 800a75c:	4770      	bx	lr

0800a75e <__retarget_lock_release_recursive>:
 800a75e:	4770      	bx	lr

0800a760 <_init>:
 800a760:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a762:	bf00      	nop
 800a764:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a766:	bc08      	pop	{r3}
 800a768:	469e      	mov	lr, r3
 800a76a:	4770      	bx	lr

0800a76c <_fini>:
 800a76c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a76e:	bf00      	nop
 800a770:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a772:	bc08      	pop	{r3}
 800a774:	469e      	mov	lr, r3
 800a776:	4770      	bx	lr
